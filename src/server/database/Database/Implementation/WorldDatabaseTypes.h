// generated by D:\Users\Shauren\Desktop\Sources\TrinityCore\dep\sqlpp11\scripts\ddl2cpp.py world_database.sql WorldDatabaseTypes worlddb
#ifndef WORLDDB_WORLDDATABASETYPES_H
#define WORLDDB_WORLDDATABASETYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace worlddb
{
  namespace AccessRequirement_
  {
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapId;
            T& operator()() { return mapId; }
            const T& operator()() const { return mapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Difficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "difficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficulty;
            T& operator()() { return difficulty; }
            const T& operator()() const { return difficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LevelMin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level_min";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T levelMin;
            T& operator()() { return levelMin; }
            const T& operator()() const { return levelMin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LevelMax
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level_max";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T levelMax;
            T& operator()() { return levelMax; }
            const T& operator()() const { return levelMax; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "item2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item2;
            T& operator()() { return item2; }
            const T& operator()() const { return item2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestDoneA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_done_A";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questDoneA;
            T& operator()() { return questDoneA; }
            const T& operator()() const { return questDoneA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestDoneH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_done_H";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questDoneH;
            T& operator()() { return questDoneH; }
            const T& operator()() const { return questDoneH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CompletedAchievement
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "completed_achievement";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T completedAchievement;
            T& operator()() { return completedAchievement; }
            const T& operator()() const { return completedAchievement; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestFailedText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_failed_text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questFailedText;
            T& operator()() { return questFailedText; }
            const T& operator()() const { return questFailedText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct AccessRequirement: sqlpp::table_t<AccessRequirement,
               AccessRequirement_::MapId,
               AccessRequirement_::Difficulty,
               AccessRequirement_::LevelMin,
               AccessRequirement_::LevelMax,
               AccessRequirement_::Item,
               AccessRequirement_::Item2,
               AccessRequirement_::QuestDoneA,
               AccessRequirement_::QuestDoneH,
               AccessRequirement_::CompletedAchievement,
               AccessRequirement_::QuestFailedText,
               AccessRequirement_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "access_requirement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accessRequirement;
        T& operator()() { return accessRequirement; }
        const T& operator()() const { return accessRequirement; }
      };
    };
  };
  namespace AchievementDbc_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct RequiredFaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "requiredFaction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T requiredFaction;
            T& operator()() { return requiredFaction; }
            const T& operator()() const { return requiredFaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mapID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mapID;
            T& operator()() { return mapID; }
            const T& operator()() const { return mapID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Points
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "points";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T points;
            T& operator()() { return points; }
            const T& operator()() const { return points; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Count
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "count";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T count;
            T& operator()() { return count; }
            const T& operator()() const { return count; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RefAchievement
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "refAchievement";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T refAchievement;
            T& operator()() { return refAchievement; }
            const T& operator()() const { return refAchievement; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct AchievementDbc: sqlpp::table_t<AchievementDbc,
               AchievementDbc_::ID,
               AchievementDbc_::RequiredFaction,
               AchievementDbc_::MapID,
               AchievementDbc_::Points,
               AchievementDbc_::Flags,
               AchievementDbc_::Count,
               AchievementDbc_::RefAchievement>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "achievement_dbc";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T achievementDbc;
        T& operator()() { return achievementDbc; }
        const T& operator()() const { return achievementDbc; }
      };
    };
  };
  namespace AchievementReward_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TitleA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "title_A";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T titleA;
            T& operator()() { return titleA; }
            const T& operator()() const { return titleA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TitleH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "title_H";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T titleH;
            T& operator()() { return titleH; }
            const T& operator()() const { return titleH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Sender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sender;
            T& operator()() { return sender; }
            const T& operator()() const { return sender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Subject
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subject;
            T& operator()() { return subject; }
            const T& operator()() const { return subject; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct MailTemplate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mailTemplate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mailTemplate;
            T& operator()() { return mailTemplate; }
            const T& operator()() const { return mailTemplate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
  }

  struct AchievementReward: sqlpp::table_t<AchievementReward,
               AchievementReward_::Entry,
               AchievementReward_::TitleA,
               AchievementReward_::TitleH,
               AchievementReward_::Item,
               AchievementReward_::Sender,
               AchievementReward_::Subject,
               AchievementReward_::Text,
               AchievementReward_::MailTemplate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "achievement_reward";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T achievementReward;
        T& operator()() { return achievementReward; }
        const T& operator()() const { return achievementReward; }
      };
    };
  };
  namespace AreatriggerInvolvedrelation_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct AreatriggerInvolvedrelation: sqlpp::table_t<AreatriggerInvolvedrelation,
               AreatriggerInvolvedrelation_::Id,
               AreatriggerInvolvedrelation_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "areatrigger_involvedrelation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T areatriggerInvolvedrelation;
        T& operator()() { return areatriggerInvolvedrelation; }
        const T& operator()() const { return areatriggerInvolvedrelation; }
      };
    };
  };
  namespace AreatriggerScripts_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::require_insert>;
    };
  }

  struct AreatriggerScripts: sqlpp::table_t<AreatriggerScripts,
               AreatriggerScripts_::Entry,
               AreatriggerScripts_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "areatrigger_scripts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T areatriggerScripts;
        T& operator()() { return areatriggerScripts; }
        const T& operator()() const { return areatriggerScripts; }
      };
    };
  };
  namespace AreatriggerTavern_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct AreatriggerTavern: sqlpp::table_t<AreatriggerTavern,
               AreatriggerTavern_::Id,
               AreatriggerTavern_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "areatrigger_tavern";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T areatriggerTavern;
        T& operator()() { return areatriggerTavern; }
        const T& operator()() const { return areatriggerTavern; }
      };
    };
  };
  namespace AreatriggerTeleport_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PortLocID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortLocID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortLocID;
            T& operator()() { return PortLocID; }
            const T& operator()() const { return PortLocID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Name;
            T& operator()() { return Name; }
            const T& operator()() const { return Name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct AreatriggerTeleport: sqlpp::table_t<AreatriggerTeleport,
               AreatriggerTeleport_::ID,
               AreatriggerTeleport_::PortLocID,
               AreatriggerTeleport_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "areatrigger_teleport";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T areatriggerTeleport;
        T& operator()() { return areatriggerTeleport; }
        const T& operator()() const { return areatriggerTeleport; }
      };
    };
  };
  namespace BattlePetBreeds_
  {
    struct SpeciesId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speciesId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speciesId;
            T& operator()() { return speciesId; }
            const T& operator()() const { return speciesId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BreedId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "breedId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T breedId;
            T& operator()() { return breedId; }
            const T& operator()() const { return breedId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  }

  struct BattlePetBreeds: sqlpp::table_t<BattlePetBreeds,
               BattlePetBreeds_::SpeciesId,
               BattlePetBreeds_::BreedId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battle_pet_breeds";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlePetBreeds;
        T& operator()() { return battlePetBreeds; }
        const T& operator()() const { return battlePetBreeds; }
      };
    };
  };
  namespace BattlePetQuality_
  {
    struct SpeciesId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speciesId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speciesId;
            T& operator()() { return speciesId; }
            const T& operator()() const { return speciesId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quality;
            T& operator()() { return quality; }
            const T& operator()() const { return quality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct BattlePetQuality: sqlpp::table_t<BattlePetQuality,
               BattlePetQuality_::SpeciesId,
               BattlePetQuality_::Quality>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battle_pet_quality";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlePetQuality;
        T& operator()() { return battlePetQuality; }
        const T& operator()() const { return battlePetQuality; }
      };
    };
  };
  namespace BattlegroundTemplate_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MinPlayersPerTeam
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinPlayersPerTeam";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinPlayersPerTeam;
            T& operator()() { return MinPlayersPerTeam; }
            const T& operator()() const { return MinPlayersPerTeam; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MaxPlayersPerTeam
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxPlayersPerTeam";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxPlayersPerTeam;
            T& operator()() { return MaxPlayersPerTeam; }
            const T& operator()() const { return MaxPlayersPerTeam; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct MinLvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinLvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinLvl;
            T& operator()() { return MinLvl; }
            const T& operator()() const { return MinLvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxLvl
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxLvl";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxLvl;
            T& operator()() { return MaxLvl; }
            const T& operator()() const { return MaxLvl; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct AllianceStartLoc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AllianceStartLoc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AllianceStartLoc;
            T& operator()() { return AllianceStartLoc; }
            const T& operator()() const { return AllianceStartLoc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeStartLoc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "HordeStartLoc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HordeStartLoc;
            T& operator()() { return HordeStartLoc; }
            const T& operator()() const { return HordeStartLoc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct StartMaxDist
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "StartMaxDist";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T StartMaxDist;
            T& operator()() { return StartMaxDist; }
            const T& operator()() const { return StartMaxDist; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Weight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Weight;
            T& operator()() { return Weight; }
            const T& operator()() const { return Weight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::require_insert>;
    };
  }

  struct BattlegroundTemplate: sqlpp::table_t<BattlegroundTemplate,
               BattlegroundTemplate_::ID,
               BattlegroundTemplate_::MinPlayersPerTeam,
               BattlegroundTemplate_::MaxPlayersPerTeam,
               BattlegroundTemplate_::MinLvl,
               BattlegroundTemplate_::MaxLvl,
               BattlegroundTemplate_::AllianceStartLoc,
               BattlegroundTemplate_::HordeStartLoc,
               BattlegroundTemplate_::StartMaxDist,
               BattlegroundTemplate_::Weight,
               BattlegroundTemplate_::ScriptName,
               BattlegroundTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battleground_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlegroundTemplate;
        T& operator()() { return battlegroundTemplate; }
        const T& operator()() const { return battlegroundTemplate; }
      };
    };
  };
  namespace BattlemasterEntry_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BgTemplate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bg_template";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bgTemplate;
            T& operator()() { return bgTemplate; }
            const T& operator()() const { return bgTemplate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct BattlemasterEntry: sqlpp::table_t<BattlemasterEntry,
               BattlemasterEntry_::Entry,
               BattlemasterEntry_::BgTemplate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlemaster_entry";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlemasterEntry;
        T& operator()() { return battlemasterEntry; }
        const T& operator()() const { return battlemasterEntry; }
      };
    };
  };
  namespace BlackmarketTemplate_
  {
    struct MarketId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "marketId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T marketId;
            T& operator()() { return marketId; }
            const T& operator()() const { return marketId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SellerNpc
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sellerNpc";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sellerNpc;
            T& operator()() { return sellerNpc; }
            const T& operator()() const { return sellerNpc; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ItemEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "itemEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemEntry;
            T& operator()() { return itemEntry; }
            const T& operator()() const { return itemEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quantity
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quantity";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quantity;
            T& operator()() { return quantity; }
            const T& operator()() const { return quantity; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MinBid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "minBid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minBid;
            T& operator()() { return minBid; }
            const T& operator()() const { return minBid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Duration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "duration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duration;
            T& operator()() { return duration; }
            const T& operator()() const { return duration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct BonusListIDs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bonusListIDs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bonusListIDs;
            T& operator()() { return bonusListIDs; }
            const T& operator()() const { return bonusListIDs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct BlackmarketTemplate: sqlpp::table_t<BlackmarketTemplate,
               BlackmarketTemplate_::MarketId,
               BlackmarketTemplate_::SellerNpc,
               BlackmarketTemplate_::ItemEntry,
               BlackmarketTemplate_::Quantity,
               BlackmarketTemplate_::MinBid,
               BlackmarketTemplate_::Duration,
               BlackmarketTemplate_::Chance,
               BlackmarketTemplate_::BonusListIDs>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "blackmarket_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T blackmarketTemplate;
        T& operator()() { return blackmarketTemplate; }
        const T& operator()() const { return blackmarketTemplate; }
      };
    };
  };
  namespace ClassExpansionRequirement_
  {
    struct ClassID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "classID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classID;
            T& operator()() { return classID; }
            const T& operator()() const { return classID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Expansion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "expansion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expansion;
            T& operator()() { return expansion; }
            const T& operator()() const { return expansion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct ClassExpansionRequirement: sqlpp::table_t<ClassExpansionRequirement,
               ClassExpansionRequirement_::ClassID,
               ClassExpansionRequirement_::Expansion>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "class_expansion_requirement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T classExpansionRequirement;
        T& operator()() { return classExpansionRequirement; }
        const T& operator()() const { return classExpansionRequirement; }
      };
    };
  };
  namespace Command_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Permission
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "permission";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permission;
            T& operator()() { return permission; }
            const T& operator()() const { return permission; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Help
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "help";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T help;
            T& operator()() { return help; }
            const T& operator()() const { return help; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Command: sqlpp::table_t<Command,
               Command_::Name,
               Command_::Permission,
               Command_::Help>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "command";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T command;
        T& operator()() { return command; }
        const T& operator()() const { return command; }
      };
    };
  };
  namespace Conditions_
  {
    struct SourceTypeOrReferenceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SourceTypeOrReferenceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceTypeOrReferenceId;
            T& operator()() { return SourceTypeOrReferenceId; }
            const T& operator()() const { return SourceTypeOrReferenceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SourceGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SourceGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceGroup;
            T& operator()() { return SourceGroup; }
            const T& operator()() const { return SourceGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SourceEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SourceEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceEntry;
            T& operator()() { return SourceEntry; }
            const T& operator()() const { return SourceEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SourceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SourceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceId;
            T& operator()() { return SourceId; }
            const T& operator()() const { return SourceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ElseGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ElseGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ElseGroup;
            T& operator()() { return ElseGroup; }
            const T& operator()() const { return ElseGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ConditionTypeOrReference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ConditionTypeOrReference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ConditionTypeOrReference;
            T& operator()() { return ConditionTypeOrReference; }
            const T& operator()() const { return ConditionTypeOrReference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ConditionTarget
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ConditionTarget";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ConditionTarget;
            T& operator()() { return ConditionTarget; }
            const T& operator()() const { return ConditionTarget; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ConditionValue1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ConditionValue1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ConditionValue1;
            T& operator()() { return ConditionValue1; }
            const T& operator()() const { return ConditionValue1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ConditionValue2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ConditionValue2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ConditionValue2;
            T& operator()() { return ConditionValue2; }
            const T& operator()() const { return ConditionValue2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ConditionValue3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ConditionValue3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ConditionValue3;
            T& operator()() { return ConditionValue3; }
            const T& operator()() const { return ConditionValue3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct NegativeCondition
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "NegativeCondition";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NegativeCondition;
            T& operator()() { return NegativeCondition; }
            const T& operator()() const { return NegativeCondition; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ErrorType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ErrorType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ErrorType;
            T& operator()() { return ErrorType; }
            const T& operator()() const { return ErrorType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ErrorTextId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ErrorTextId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ErrorTextId;
            T& operator()() { return ErrorTextId; }
            const T& operator()() const { return ErrorTextId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct Conditions: sqlpp::table_t<Conditions,
               Conditions_::SourceTypeOrReferenceId,
               Conditions_::SourceGroup,
               Conditions_::SourceEntry,
               Conditions_::SourceId,
               Conditions_::ElseGroup,
               Conditions_::ConditionTypeOrReference,
               Conditions_::ConditionTarget,
               Conditions_::ConditionValue1,
               Conditions_::ConditionValue2,
               Conditions_::ConditionValue3,
               Conditions_::NegativeCondition,
               Conditions_::ErrorType,
               Conditions_::ErrorTextId,
               Conditions_::ScriptName,
               Conditions_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "conditions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T conditions;
        T& operator()() { return conditions; }
        const T& operator()() const { return conditions; }
      };
    };
  };
  namespace Creature_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ZoneId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "zoneId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneId;
            T& operator()() { return zoneId; }
            const T& operator()() const { return zoneId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AreaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "areaId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T areaId;
            T& operator()() { return areaId; }
            const T& operator()() const { return areaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SpawnMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spawnMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spawnMask;
            T& operator()() { return spawnMask; }
            const T& operator()() const { return spawnMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PhaseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PhaseId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseId;
            T& operator()() { return PhaseId; }
            const T& operator()() const { return PhaseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PhaseGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PhaseGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseGroup;
            T& operator()() { return PhaseGroup; }
            const T& operator()() const { return PhaseGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Modelid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid;
            T& operator()() { return modelid; }
            const T& operator()() const { return modelid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EquipmentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "equipment_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipmentId;
            T& operator()() { return equipmentId; }
            const T& operator()() const { return equipmentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Spawntimesecs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spawntimesecs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spawntimesecs;
            T& operator()() { return spawntimesecs; }
            const T& operator()() const { return spawntimesecs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spawndist
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spawndist";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spawndist;
            T& operator()() { return spawndist; }
            const T& operator()() const { return spawndist; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Currentwaypoint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "currentwaypoint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T currentwaypoint;
            T& operator()() { return currentwaypoint; }
            const T& operator()() const { return currentwaypoint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Curhealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "curhealth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T curhealth;
            T& operator()() { return curhealth; }
            const T& operator()() const { return curhealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Curmana
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "curmana";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T curmana;
            T& operator()() { return curmana; }
            const T& operator()() const { return curmana; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MovementType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MovementType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MovementType;
            T& operator()() { return MovementType; }
            const T& operator()() const { return MovementType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Npcflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "npcflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcflag;
            T& operator()() { return npcflag; }
            const T& operator()() const { return npcflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct UnitFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unit_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unitFlags;
            T& operator()() { return unitFlags; }
            const T& operator()() const { return unitFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dynamicflags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dynamicflags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dynamicflags;
            T& operator()() { return dynamicflags; }
            const T& operator()() const { return dynamicflags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct Creature: sqlpp::table_t<Creature,
               Creature_::Guid,
               Creature_::Id,
               Creature_::Map,
               Creature_::ZoneId,
               Creature_::AreaId,
               Creature_::SpawnMask,
               Creature_::PhaseId,
               Creature_::PhaseGroup,
               Creature_::Modelid,
               Creature_::EquipmentId,
               Creature_::PositionX,
               Creature_::PositionY,
               Creature_::PositionZ,
               Creature_::Orientation,
               Creature_::Spawntimesecs,
               Creature_::Spawndist,
               Creature_::Currentwaypoint,
               Creature_::Curhealth,
               Creature_::Curmana,
               Creature_::MovementType,
               Creature_::Npcflag,
               Creature_::UnitFlags,
               Creature_::Dynamicflags,
               Creature_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creature;
        T& operator()() { return creature; }
        const T& operator()() const { return creature; }
      };
    };
  };
  namespace CreatureAddon_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct PathId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "path_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pathId;
            T& operator()() { return pathId; }
            const T& operator()() const { return pathId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mount;
            T& operator()() { return mount; }
            const T& operator()() const { return mount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bytes1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bytes1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes1;
            T& operator()() { return bytes1; }
            const T& operator()() const { return bytes1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bytes2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bytes2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes2;
            T& operator()() { return bytes2; }
            const T& operator()() const { return bytes2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Emote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "emote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T emote;
            T& operator()() { return emote; }
            const T& operator()() const { return emote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AiAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "aiAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aiAnimKit;
            T& operator()() { return aiAnimKit; }
            const T& operator()() const { return aiAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MovementAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "movementAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T movementAnimKit;
            T& operator()() { return movementAnimKit; }
            const T& operator()() const { return movementAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MeleeAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "meleeAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T meleeAnimKit;
            T& operator()() { return meleeAnimKit; }
            const T& operator()() const { return meleeAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Auras
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "auras";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T auras;
            T& operator()() { return auras; }
            const T& operator()() const { return auras; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureAddon: sqlpp::table_t<CreatureAddon,
               CreatureAddon_::Guid,
               CreatureAddon_::PathId,
               CreatureAddon_::Mount,
               CreatureAddon_::Bytes1,
               CreatureAddon_::Bytes2,
               CreatureAddon_::Emote,
               CreatureAddon_::AiAnimKit,
               CreatureAddon_::MovementAnimKit,
               CreatureAddon_::MeleeAnimKit,
               CreatureAddon_::Auras>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureAddon;
        T& operator()() { return creatureAddon; }
        const T& operator()() const { return creatureAddon; }
      };
    };
  };
  namespace CreatureClasslevelstats_
  {
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Basemana
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "basemana";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T basemana;
            T& operator()() { return basemana; }
            const T& operator()() const { return basemana; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Basearmor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "basearmor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T basearmor;
            T& operator()() { return basearmor; }
            const T& operator()() const { return basearmor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Attackpower
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "attackpower";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attackpower;
            T& operator()() { return attackpower; }
            const T& operator()() const { return attackpower; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Rangedattackpower
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rangedattackpower";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rangedattackpower;
            T& operator()() { return rangedattackpower; }
            const T& operator()() const { return rangedattackpower; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct DamageBase
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_base";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageBase;
            T& operator()() { return damageBase; }
            const T& operator()() const { return damageBase; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageExp1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_exp1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageExp1;
            T& operator()() { return damageExp1; }
            const T& operator()() const { return damageExp1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageExp2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_exp2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageExp2;
            T& operator()() { return damageExp2; }
            const T& operator()() const { return damageExp2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageExp3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_exp3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageExp3;
            T& operator()() { return damageExp3; }
            const T& operator()() const { return damageExp3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageExp4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_exp4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageExp4;
            T& operator()() { return damageExp4; }
            const T& operator()() const { return damageExp4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageExp5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "damage_exp5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T damageExp5;
            T& operator()() { return damageExp5; }
            const T& operator()() const { return damageExp5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureClasslevelstats: sqlpp::table_t<CreatureClasslevelstats,
               CreatureClasslevelstats_::Level,
               CreatureClasslevelstats_::Class,
               CreatureClasslevelstats_::Basemana,
               CreatureClasslevelstats_::Basearmor,
               CreatureClasslevelstats_::Attackpower,
               CreatureClasslevelstats_::Rangedattackpower,
               CreatureClasslevelstats_::DamageBase,
               CreatureClasslevelstats_::DamageExp1,
               CreatureClasslevelstats_::DamageExp2,
               CreatureClasslevelstats_::DamageExp3,
               CreatureClasslevelstats_::DamageExp4,
               CreatureClasslevelstats_::DamageExp5,
               CreatureClasslevelstats_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_classlevelstats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureClasslevelstats;
        T& operator()() { return creatureClasslevelstats; }
        const T& operator()() const { return creatureClasslevelstats; }
      };
    };
  };
  namespace CreatureEquipTemplate_
  {
    struct CreatureID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CreatureID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CreatureID;
            T& operator()() { return CreatureID; }
            const T& operator()() const { return CreatureID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ItemID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemID1;
            T& operator()() { return ItemID1; }
            const T& operator()() const { return ItemID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemID2;
            T& operator()() { return ItemID2; }
            const T& operator()() const { return ItemID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemID3;
            T& operator()() { return ItemID3; }
            const T& operator()() const { return ItemID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureEquipTemplate: sqlpp::table_t<CreatureEquipTemplate,
               CreatureEquipTemplate_::CreatureID,
               CreatureEquipTemplate_::ID,
               CreatureEquipTemplate_::ItemID1,
               CreatureEquipTemplate_::ItemID2,
               CreatureEquipTemplate_::ItemID3,
               CreatureEquipTemplate_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_equip_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureEquipTemplate;
        T& operator()() { return creatureEquipTemplate; }
        const T& operator()() const { return creatureEquipTemplate; }
      };
    };
  };
  namespace CreatureFormations_
  {
    struct LeaderGUID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "leaderGUID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T leaderGUID;
            T& operator()() { return leaderGUID; }
            const T& operator()() const { return leaderGUID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct MemberGUID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "memberGUID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T memberGUID;
            T& operator()() { return memberGUID; }
            const T& operator()() const { return memberGUID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Dist
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dist";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dist;
            T& operator()() { return dist; }
            const T& operator()() const { return dist; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct Angle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "angle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T angle;
            T& operator()() { return angle; }
            const T& operator()() const { return angle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
    struct GroupAI
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "groupAI";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupAI;
            T& operator()() { return groupAI; }
            const T& operator()() const { return groupAI; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Point1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "point_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T point1;
            T& operator()() { return point1; }
            const T& operator()() const { return point1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Point2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "point_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T point2;
            T& operator()() { return point2; }
            const T& operator()() const { return point2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  }

  struct CreatureFormations: sqlpp::table_t<CreatureFormations,
               CreatureFormations_::LeaderGUID,
               CreatureFormations_::MemberGUID,
               CreatureFormations_::Dist,
               CreatureFormations_::Angle,
               CreatureFormations_::GroupAI,
               CreatureFormations_::Point1,
               CreatureFormations_::Point2>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_formations";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureFormations;
        T& operator()() { return creatureFormations; }
        const T& operator()() const { return creatureFormations; }
      };
    };
  };
  namespace CreatureLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureLootTemplate: sqlpp::table_t<CreatureLootTemplate,
               CreatureLootTemplate_::Entry,
               CreatureLootTemplate_::Item,
               CreatureLootTemplate_::Reference,
               CreatureLootTemplate_::Chance,
               CreatureLootTemplate_::QuestRequired,
               CreatureLootTemplate_::LootMode,
               CreatureLootTemplate_::GroupId,
               CreatureLootTemplate_::MinCount,
               CreatureLootTemplate_::MaxCount,
               CreatureLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureLootTemplate;
        T& operator()() { return creatureLootTemplate; }
        const T& operator()() const { return creatureLootTemplate; }
      };
    };
  };
  namespace CreatureModelInfo_
  {
    struct DisplayID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "DisplayID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DisplayID;
            T& operator()() { return DisplayID; }
            const T& operator()() const { return DisplayID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BoundingRadius
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BoundingRadius";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BoundingRadius;
            T& operator()() { return BoundingRadius; }
            const T& operator()() const { return BoundingRadius; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct CombatReach
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CombatReach";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CombatReach;
            T& operator()() { return CombatReach; }
            const T& operator()() const { return CombatReach; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DisplayIDOtherGender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "DisplayID_Other_Gender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DisplayIDOtherGender;
            T& operator()() { return DisplayIDOtherGender; }
            const T& operator()() const { return DisplayIDOtherGender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureModelInfo: sqlpp::table_t<CreatureModelInfo,
               CreatureModelInfo_::DisplayID,
               CreatureModelInfo_::BoundingRadius,
               CreatureModelInfo_::CombatReach,
               CreatureModelInfo_::DisplayIDOtherGender,
               CreatureModelInfo_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_model_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureModelInfo;
        T& operator()() { return creatureModelInfo; }
        const T& operator()() const { return creatureModelInfo; }
      };
    };
  };
  namespace CreatureOnkillReputation_
  {
    struct CreatureId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "creature_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creatureId;
            T& operator()() { return creatureId; }
            const T& operator()() const { return creatureId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewOnKillRepFaction1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewOnKillRepFaction1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewOnKillRepFaction1;
            T& operator()() { return RewOnKillRepFaction1; }
            const T& operator()() const { return RewOnKillRepFaction1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct RewOnKillRepFaction2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewOnKillRepFaction2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewOnKillRepFaction2;
            T& operator()() { return RewOnKillRepFaction2; }
            const T& operator()() const { return RewOnKillRepFaction2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MaxStanding1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxStanding1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxStanding1;
            T& operator()() { return MaxStanding1; }
            const T& operator()() const { return MaxStanding1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct IsTeamAward1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "IsTeamAward1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IsTeamAward1;
            T& operator()() { return IsTeamAward1; }
            const T& operator()() const { return IsTeamAward1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RewOnKillRepValue1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewOnKillRepValue1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewOnKillRepValue1;
            T& operator()() { return RewOnKillRepValue1; }
            const T& operator()() const { return RewOnKillRepValue1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MaxStanding2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxStanding2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxStanding2;
            T& operator()() { return MaxStanding2; }
            const T& operator()() const { return MaxStanding2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct IsTeamAward2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "IsTeamAward2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IsTeamAward2;
            T& operator()() { return IsTeamAward2; }
            const T& operator()() const { return IsTeamAward2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RewOnKillRepValue2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewOnKillRepValue2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewOnKillRepValue2;
            T& operator()() { return RewOnKillRepValue2; }
            const T& operator()() const { return RewOnKillRepValue2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TeamDependent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TeamDependent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TeamDependent;
            T& operator()() { return TeamDependent; }
            const T& operator()() const { return TeamDependent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct CreatureOnkillReputation: sqlpp::table_t<CreatureOnkillReputation,
               CreatureOnkillReputation_::CreatureId,
               CreatureOnkillReputation_::RewOnKillRepFaction1,
               CreatureOnkillReputation_::RewOnKillRepFaction2,
               CreatureOnkillReputation_::MaxStanding1,
               CreatureOnkillReputation_::IsTeamAward1,
               CreatureOnkillReputation_::RewOnKillRepValue1,
               CreatureOnkillReputation_::MaxStanding2,
               CreatureOnkillReputation_::IsTeamAward2,
               CreatureOnkillReputation_::RewOnKillRepValue2,
               CreatureOnkillReputation_::TeamDependent>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_onkill_reputation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureOnkillReputation;
        T& operator()() { return creatureOnkillReputation; }
        const T& operator()() const { return creatureOnkillReputation; }
      };
    };
  };
  namespace CreatureQuestender_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct CreatureQuestender: sqlpp::table_t<CreatureQuestender,
               CreatureQuestender_::Id,
               CreatureQuestender_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_questender";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureQuestender;
        T& operator()() { return creatureQuestender; }
        const T& operator()() const { return creatureQuestender; }
      };
    };
  };
  namespace CreatureQuestitem_
  {
    struct CreatureEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CreatureEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CreatureEntry;
            T& operator()() { return CreatureEntry; }
            const T& operator()() const { return CreatureEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Idx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx;
            T& operator()() { return Idx; }
            const T& operator()() const { return Idx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemId;
            T& operator()() { return ItemId; }
            const T& operator()() const { return ItemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct CreatureQuestitem: sqlpp::table_t<CreatureQuestitem,
               CreatureQuestitem_::CreatureEntry,
               CreatureQuestitem_::Idx,
               CreatureQuestitem_::ItemId,
               CreatureQuestitem_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_questitem";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureQuestitem;
        T& operator()() { return creatureQuestitem; }
        const T& operator()() const { return creatureQuestitem; }
      };
    };
  };
  namespace CreatureQueststarter_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct CreatureQueststarter: sqlpp::table_t<CreatureQueststarter,
               CreatureQueststarter_::Id,
               CreatureQueststarter_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_queststarter";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureQueststarter;
        T& operator()() { return creatureQueststarter; }
        const T& operator()() const { return creatureQueststarter; }
      };
    };
  };
  namespace CreatureSummonGroups_
  {
    struct SummonerId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summonerId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summonerId;
            T& operator()() { return summonerId; }
            const T& operator()() const { return summonerId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SummonerType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summonerType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summonerType;
            T& operator()() { return summonerType; }
            const T& operator()() const { return summonerType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "groupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct SummonType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summonType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summonType;
            T& operator()() { return summonType; }
            const T& operator()() const { return summonType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SummonTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summonTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summonTime;
            T& operator()() { return summonTime; }
            const T& operator()() const { return summonTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct CreatureSummonGroups: sqlpp::table_t<CreatureSummonGroups,
               CreatureSummonGroups_::SummonerId,
               CreatureSummonGroups_::SummonerType,
               CreatureSummonGroups_::GroupId,
               CreatureSummonGroups_::Entry,
               CreatureSummonGroups_::PositionX,
               CreatureSummonGroups_::PositionY,
               CreatureSummonGroups_::PositionZ,
               CreatureSummonGroups_::Orientation,
               CreatureSummonGroups_::SummonType,
               CreatureSummonGroups_::SummonTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_summon_groups";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureSummonGroups;
        T& operator()() { return creatureSummonGroups; }
        const T& operator()() const { return creatureSummonGroups; }
      };
    };
  };
  namespace CreatureTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DifficultyEntry1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "difficulty_entry_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficultyEntry1;
            T& operator()() { return difficultyEntry1; }
            const T& operator()() const { return difficultyEntry1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DifficultyEntry2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "difficulty_entry_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficultyEntry2;
            T& operator()() { return difficultyEntry2; }
            const T& operator()() const { return difficultyEntry2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DifficultyEntry3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "difficulty_entry_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficultyEntry3;
            T& operator()() { return difficultyEntry3; }
            const T& operator()() const { return difficultyEntry3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct KillCredit1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "KillCredit1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T KillCredit1;
            T& operator()() { return KillCredit1; }
            const T& operator()() const { return KillCredit1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct KillCredit2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "KillCredit2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T KillCredit2;
            T& operator()() { return KillCredit2; }
            const T& operator()() const { return KillCredit2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Modelid1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid1;
            T& operator()() { return modelid1; }
            const T& operator()() const { return modelid1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Modelid2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid2;
            T& operator()() { return modelid2; }
            const T& operator()() const { return modelid2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Modelid3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid3;
            T& operator()() { return modelid3; }
            const T& operator()() const { return modelid3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Modelid4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid4;
            T& operator()() { return modelid4; }
            const T& operator()() const { return modelid4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct FemaleName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "femaleName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T femaleName;
            T& operator()() { return femaleName; }
            const T& operator()() const { return femaleName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::require_insert>;
    };
    struct Subname
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subname";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subname;
            T& operator()() { return subname; }
            const T& operator()() const { return subname; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct IconName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "IconName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IconName;
            T& operator()() { return IconName; }
            const T& operator()() const { return IconName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct GossipMenuId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "gossip_menu_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gossipMenuId;
            T& operator()() { return gossipMenuId; }
            const T& operator()() const { return gossipMenuId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Minlevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "minlevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minlevel;
            T& operator()() { return minlevel; }
            const T& operator()() const { return minlevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Maxlevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxlevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxlevel;
            T& operator()() { return maxlevel; }
            const T& operator()() const { return maxlevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct HealthScalingExpansion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "HealthScalingExpansion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HealthScalingExpansion;
            T& operator()() { return HealthScalingExpansion; }
            const T& operator()() const { return HealthScalingExpansion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RequiredExpansion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredExpansion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredExpansion;
            T& operator()() { return RequiredExpansion; }
            const T& operator()() const { return RequiredExpansion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VignetteID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VignetteID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VignetteID;
            T& operator()() { return VignetteID; }
            const T& operator()() const { return VignetteID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction;
            T& operator()() { return faction; }
            const T& operator()() const { return faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Npcflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "npcflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcflag;
            T& operator()() { return npcflag; }
            const T& operator()() const { return npcflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct SpeedWalk
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speed_walk";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speedWalk;
            T& operator()() { return speedWalk; }
            const T& operator()() const { return speedWalk; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct SpeedRun
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speed_run";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speedRun;
            T& operator()() { return speedRun; }
            const T& operator()() const { return speedRun; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Scale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "scale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scale;
            T& operator()() { return scale; }
            const T& operator()() const { return scale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank;
            T& operator()() { return rank; }
            const T& operator()() const { return rank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Dmgschool
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dmgschool";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dmgschool;
            T& operator()() { return dmgschool; }
            const T& operator()() const { return dmgschool; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct BaseAttackTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BaseAttackTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BaseAttackTime;
            T& operator()() { return BaseAttackTime; }
            const T& operator()() const { return BaseAttackTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RangeAttackTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RangeAttackTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RangeAttackTime;
            T& operator()() { return RangeAttackTime; }
            const T& operator()() const { return RangeAttackTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BaseVariance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BaseVariance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BaseVariance;
            T& operator()() { return BaseVariance; }
            const T& operator()() const { return BaseVariance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RangeVariance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RangeVariance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RangeVariance;
            T& operator()() { return RangeVariance; }
            const T& operator()() const { return RangeVariance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct UnitClass
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unit_class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unitClass;
            T& operator()() { return unitClass; }
            const T& operator()() const { return unitClass; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct UnitFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unit_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unitFlags;
            T& operator()() { return unitFlags; }
            const T& operator()() const { return unitFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct UnitFlags2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unit_flags2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unitFlags2;
            T& operator()() { return unitFlags2; }
            const T& operator()() const { return unitFlags2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dynamicflags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dynamicflags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dynamicflags;
            T& operator()() { return dynamicflags; }
            const T& operator()() const { return dynamicflags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Family
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "family";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T family;
            T& operator()() { return family; }
            const T& operator()() const { return family; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TrainerType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "trainer_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trainerType;
            T& operator()() { return trainerType; }
            const T& operator()() const { return trainerType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct TrainerClass
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "trainer_class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trainerClass;
            T& operator()() { return trainerClass; }
            const T& operator()() const { return trainerClass; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TrainerRace
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "trainer_race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T trainerRace;
            T& operator()() { return trainerRace; }
            const T& operator()() const { return trainerRace; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TypeFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T typeFlags;
            T& operator()() { return typeFlags; }
            const T& operator()() const { return typeFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TypeFlags2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type_flags2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T typeFlags2;
            T& operator()() { return typeFlags2; }
            const T& operator()() const { return typeFlags2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Lootid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lootid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lootid;
            T& operator()() { return lootid; }
            const T& operator()() const { return lootid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Pickpocketloot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pickpocketloot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pickpocketloot;
            T& operator()() { return pickpocketloot; }
            const T& operator()() const { return pickpocketloot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Skinloot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "skinloot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skinloot;
            T& operator()() { return skinloot; }
            const T& operator()() const { return skinloot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Resistance1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance1;
            T& operator()() { return resistance1; }
            const T& operator()() const { return resistance1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resistance2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance2;
            T& operator()() { return resistance2; }
            const T& operator()() const { return resistance2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resistance3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance3;
            T& operator()() { return resistance3; }
            const T& operator()() const { return resistance3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resistance4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance4;
            T& operator()() { return resistance4; }
            const T& operator()() const { return resistance4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resistance5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance5;
            T& operator()() { return resistance5; }
            const T& operator()() const { return resistance5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Resistance6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "resistance6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T resistance6;
            T& operator()() { return resistance6; }
            const T& operator()() const { return resistance6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Spell1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell1;
            T& operator()() { return spell1; }
            const T& operator()() const { return spell1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell2;
            T& operator()() { return spell2; }
            const T& operator()() const { return spell2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell3;
            T& operator()() { return spell3; }
            const T& operator()() const { return spell3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell4;
            T& operator()() { return spell4; }
            const T& operator()() const { return spell4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell5;
            T& operator()() { return spell5; }
            const T& operator()() const { return spell5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell6;
            T& operator()() { return spell6; }
            const T& operator()() const { return spell6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell7;
            T& operator()() { return spell7; }
            const T& operator()() const { return spell7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell8;
            T& operator()() { return spell8; }
            const T& operator()() const { return spell8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VehicleId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VehicleId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VehicleId;
            T& operator()() { return VehicleId; }
            const T& operator()() const { return VehicleId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mingold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mingold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mingold;
            T& operator()() { return mingold; }
            const T& operator()() const { return mingold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Maxgold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxgold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxgold;
            T& operator()() { return maxgold; }
            const T& operator()() const { return maxgold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AIName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AIName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AIName;
            T& operator()() { return AIName; }
            const T& operator()() const { return AIName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct MovementType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MovementType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MovementType;
            T& operator()() { return MovementType; }
            const T& operator()() const { return MovementType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InhabitType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "InhabitType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T InhabitType;
            T& operator()() { return InhabitType; }
            const T& operator()() const { return InhabitType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct HoverHeight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "HoverHeight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HoverHeight;
            T& operator()() { return HoverHeight; }
            const T& operator()() const { return HoverHeight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HealthModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "HealthModifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HealthModifier;
            T& operator()() { return HealthModifier; }
            const T& operator()() const { return HealthModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HealthModifierExtra
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "HealthModifierExtra";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T HealthModifierExtra;
            T& operator()() { return HealthModifierExtra; }
            const T& operator()() const { return HealthModifierExtra; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ManaModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ManaModifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ManaModifier;
            T& operator()() { return ManaModifier; }
            const T& operator()() const { return ManaModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ManaModifierExtra
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ManaModifierExtra";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ManaModifierExtra;
            T& operator()() { return ManaModifierExtra; }
            const T& operator()() const { return ManaModifierExtra; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ArmorModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ArmorModifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ArmorModifier;
            T& operator()() { return ArmorModifier; }
            const T& operator()() const { return ArmorModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct DamageModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "DamageModifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DamageModifier;
            T& operator()() { return DamageModifier; }
            const T& operator()() const { return DamageModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ExperienceModifier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ExperienceModifier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ExperienceModifier;
            T& operator()() { return ExperienceModifier; }
            const T& operator()() const { return ExperienceModifier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RacialLeader
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RacialLeader";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RacialLeader;
            T& operator()() { return RacialLeader; }
            const T& operator()() const { return RacialLeader; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MovementId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "movementId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T movementId;
            T& operator()() { return movementId; }
            const T& operator()() const { return movementId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RegenHealth
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RegenHealth";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RegenHealth;
            T& operator()() { return RegenHealth; }
            const T& operator()() const { return RegenHealth; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MechanicImmuneMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mechanic_immune_mask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mechanicImmuneMask;
            T& operator()() { return mechanicImmuneMask; }
            const T& operator()() const { return mechanicImmuneMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FlagsExtra
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags_extra";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flagsExtra;
            T& operator()() { return flagsExtra; }
            const T& operator()() const { return flagsExtra; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureTemplate: sqlpp::table_t<CreatureTemplate,
               CreatureTemplate_::Entry,
               CreatureTemplate_::DifficultyEntry1,
               CreatureTemplate_::DifficultyEntry2,
               CreatureTemplate_::DifficultyEntry3,
               CreatureTemplate_::KillCredit1,
               CreatureTemplate_::KillCredit2,
               CreatureTemplate_::Modelid1,
               CreatureTemplate_::Modelid2,
               CreatureTemplate_::Modelid3,
               CreatureTemplate_::Modelid4,
               CreatureTemplate_::Name,
               CreatureTemplate_::FemaleName,
               CreatureTemplate_::Subname,
               CreatureTemplate_::IconName,
               CreatureTemplate_::GossipMenuId,
               CreatureTemplate_::Minlevel,
               CreatureTemplate_::Maxlevel,
               CreatureTemplate_::HealthScalingExpansion,
               CreatureTemplate_::RequiredExpansion,
               CreatureTemplate_::VignetteID,
               CreatureTemplate_::Faction,
               CreatureTemplate_::Npcflag,
               CreatureTemplate_::SpeedWalk,
               CreatureTemplate_::SpeedRun,
               CreatureTemplate_::Scale,
               CreatureTemplate_::Rank,
               CreatureTemplate_::Dmgschool,
               CreatureTemplate_::BaseAttackTime,
               CreatureTemplate_::RangeAttackTime,
               CreatureTemplate_::BaseVariance,
               CreatureTemplate_::RangeVariance,
               CreatureTemplate_::UnitClass,
               CreatureTemplate_::UnitFlags,
               CreatureTemplate_::UnitFlags2,
               CreatureTemplate_::Dynamicflags,
               CreatureTemplate_::Family,
               CreatureTemplate_::TrainerType,
               CreatureTemplate_::TrainerClass,
               CreatureTemplate_::TrainerRace,
               CreatureTemplate_::Type,
               CreatureTemplate_::TypeFlags,
               CreatureTemplate_::TypeFlags2,
               CreatureTemplate_::Lootid,
               CreatureTemplate_::Pickpocketloot,
               CreatureTemplate_::Skinloot,
               CreatureTemplate_::Resistance1,
               CreatureTemplate_::Resistance2,
               CreatureTemplate_::Resistance3,
               CreatureTemplate_::Resistance4,
               CreatureTemplate_::Resistance5,
               CreatureTemplate_::Resistance6,
               CreatureTemplate_::Spell1,
               CreatureTemplate_::Spell2,
               CreatureTemplate_::Spell3,
               CreatureTemplate_::Spell4,
               CreatureTemplate_::Spell5,
               CreatureTemplate_::Spell6,
               CreatureTemplate_::Spell7,
               CreatureTemplate_::Spell8,
               CreatureTemplate_::VehicleId,
               CreatureTemplate_::Mingold,
               CreatureTemplate_::Maxgold,
               CreatureTemplate_::AIName,
               CreatureTemplate_::MovementType,
               CreatureTemplate_::InhabitType,
               CreatureTemplate_::HoverHeight,
               CreatureTemplate_::HealthModifier,
               CreatureTemplate_::HealthModifierExtra,
               CreatureTemplate_::ManaModifier,
               CreatureTemplate_::ManaModifierExtra,
               CreatureTemplate_::ArmorModifier,
               CreatureTemplate_::DamageModifier,
               CreatureTemplate_::ExperienceModifier,
               CreatureTemplate_::RacialLeader,
               CreatureTemplate_::MovementId,
               CreatureTemplate_::RegenHealth,
               CreatureTemplate_::MechanicImmuneMask,
               CreatureTemplate_::FlagsExtra,
               CreatureTemplate_::ScriptName,
               CreatureTemplate_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureTemplate;
        T& operator()() { return creatureTemplate; }
        const T& operator()() const { return creatureTemplate; }
      };
    };
  };
  namespace CreatureTemplateAddon_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PathId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "path_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pathId;
            T& operator()() { return pathId; }
            const T& operator()() const { return pathId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mount;
            T& operator()() { return mount; }
            const T& operator()() const { return mount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bytes1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bytes1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes1;
            T& operator()() { return bytes1; }
            const T& operator()() const { return bytes1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bytes2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bytes2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bytes2;
            T& operator()() { return bytes2; }
            const T& operator()() const { return bytes2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Emote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "emote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T emote;
            T& operator()() { return emote; }
            const T& operator()() const { return emote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AiAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "aiAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aiAnimKit;
            T& operator()() { return aiAnimKit; }
            const T& operator()() const { return aiAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MovementAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "movementAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T movementAnimKit;
            T& operator()() { return movementAnimKit; }
            const T& operator()() const { return movementAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct MeleeAnimKit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "meleeAnimKit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T meleeAnimKit;
            T& operator()() { return meleeAnimKit; }
            const T& operator()() const { return meleeAnimKit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Auras
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "auras";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T auras;
            T& operator()() { return auras; }
            const T& operator()() const { return auras; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureTemplateAddon: sqlpp::table_t<CreatureTemplateAddon,
               CreatureTemplateAddon_::Entry,
               CreatureTemplateAddon_::PathId,
               CreatureTemplateAddon_::Mount,
               CreatureTemplateAddon_::Bytes1,
               CreatureTemplateAddon_::Bytes2,
               CreatureTemplateAddon_::Emote,
               CreatureTemplateAddon_::AiAnimKit,
               CreatureTemplateAddon_::MovementAnimKit,
               CreatureTemplateAddon_::MeleeAnimKit,
               CreatureTemplateAddon_::Auras>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_template_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureTemplateAddon;
        T& operator()() { return creatureTemplateAddon; }
        const T& operator()() const { return creatureTemplateAddon; }
      };
    };
  };
  namespace CreatureTemplateLocale_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Name;
            T& operator()() { return Name; }
            const T& operator()() const { return Name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct NameAlt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "NameAlt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NameAlt;
            T& operator()() { return NameAlt; }
            const T& operator()() const { return NameAlt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Title
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Title";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Title;
            T& operator()() { return Title; }
            const T& operator()() const { return Title; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TitleAlt
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TitleAlt";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TitleAlt;
            T& operator()() { return TitleAlt; }
            const T& operator()() const { return TitleAlt; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureTemplateLocale: sqlpp::table_t<CreatureTemplateLocale,
               CreatureTemplateLocale_::Entry,
               CreatureTemplateLocale_::Locale,
               CreatureTemplateLocale_::Name,
               CreatureTemplateLocale_::NameAlt,
               CreatureTemplateLocale_::Title,
               CreatureTemplateLocale_::TitleAlt,
               CreatureTemplateLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_template_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureTemplateLocale;
        T& operator()() { return creatureTemplateLocale; }
        const T& operator()() const { return creatureTemplateLocale; }
      };
    };
  };
  namespace CreatureText_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Groupid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "groupid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupid;
            T& operator()() { return groupid; }
            const T& operator()() const { return groupid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Language
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "language";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T language;
            T& operator()() { return language; }
            const T& operator()() const { return language; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Probability
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "probability";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T probability;
            T& operator()() { return probability; }
            const T& operator()() const { return probability; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Emote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "emote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T emote;
            T& operator()() { return emote; }
            const T& operator()() const { return emote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Duration
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "duration";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T duration;
            T& operator()() { return duration; }
            const T& operator()() const { return duration; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Sound
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sound";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sound;
            T& operator()() { return sound; }
            const T& operator()() const { return sound; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextId;
            T& operator()() { return BroadcastTextId; }
            const T& operator()() const { return BroadcastTextId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct TextRange
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TextRange";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TextRange;
            T& operator()() { return TextRange; }
            const T& operator()() const { return TextRange; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct CreatureText: sqlpp::table_t<CreatureText,
               CreatureText_::Entry,
               CreatureText_::Groupid,
               CreatureText_::Id,
               CreatureText_::Text,
               CreatureText_::Type,
               CreatureText_::Language,
               CreatureText_::Probability,
               CreatureText_::Emote,
               CreatureText_::Duration,
               CreatureText_::Sound,
               CreatureText_::BroadcastTextId,
               CreatureText_::TextRange,
               CreatureText_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "creature_text";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T creatureText;
        T& operator()() { return creatureText; }
        const T& operator()() const { return creatureText; }
      };
    };
  };
  namespace CriteriaData_
  {
    struct CriteriaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "criteria_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T criteriaId;
            T& operator()() { return criteriaId; }
            const T& operator()() const { return criteriaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Value1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "value1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value1;
            T& operator()() { return value1; }
            const T& operator()() const { return value1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "value2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T value2;
            T& operator()() { return value2; }
            const T& operator()() const { return value2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
  }

  struct CriteriaData: sqlpp::table_t<CriteriaData,
               CriteriaData_::CriteriaId,
               CriteriaData_::Type,
               CriteriaData_::Value1,
               CriteriaData_::Value2,
               CriteriaData_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "criteria_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T criteriaData;
        T& operator()() { return criteriaData; }
        const T& operator()() const { return criteriaData; }
      };
    };
  };
  namespace Disables_
  {
    struct SourceType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sourceType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sourceType;
            T& operator()() { return sourceType; }
            const T& operator()() const { return sourceType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Params0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "params_0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T params0;
            T& operator()() { return params0; }
            const T& operator()() const { return params0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Params1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "params_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T params1;
            T& operator()() { return params1; }
            const T& operator()() const { return params1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct Disables: sqlpp::table_t<Disables,
               Disables_::SourceType,
               Disables_::Entry,
               Disables_::Flags,
               Disables_::Params0,
               Disables_::Params1,
               Disables_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "disables";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T disables;
        T& operator()() { return disables; }
        const T& operator()() const { return disables; }
      };
    };
  };
  namespace DisenchantLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct DisenchantLootTemplate: sqlpp::table_t<DisenchantLootTemplate,
               DisenchantLootTemplate_::Entry,
               DisenchantLootTemplate_::Item,
               DisenchantLootTemplate_::Reference,
               DisenchantLootTemplate_::Chance,
               DisenchantLootTemplate_::QuestRequired,
               DisenchantLootTemplate_::LootMode,
               DisenchantLootTemplate_::GroupId,
               DisenchantLootTemplate_::MinCount,
               DisenchantLootTemplate_::MaxCount,
               DisenchantLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "disenchant_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T disenchantLootTemplate;
        T& operator()() { return disenchantLootTemplate; }
        const T& operator()() const { return disenchantLootTemplate; }
      };
    };
  };
  namespace EventScripts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Command
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "command";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T command;
            T& operator()() { return command; }
            const T& operator()() const { return command; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong;
            T& operator()() { return datalong; }
            const T& operator()() const { return datalong; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong2;
            T& operator()() { return datalong2; }
            const T& operator()() const { return datalong2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dataint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dataint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dataint;
            T& operator()() { return dataint; }
            const T& operator()() const { return dataint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T z;
            T& operator()() { return z; }
            const T& operator()() const { return z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct O
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "o";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T o;
            T& operator()() { return o; }
            const T& operator()() const { return o; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct EventScripts: sqlpp::table_t<EventScripts,
               EventScripts_::Id,
               EventScripts_::Delay,
               EventScripts_::Command,
               EventScripts_::Datalong,
               EventScripts_::Datalong2,
               EventScripts_::Dataint,
               EventScripts_::X,
               EventScripts_::Y,
               EventScripts_::Z,
               EventScripts_::O>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "event_scripts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T eventScripts;
        T& operator()() { return eventScripts; }
        const T& operator()() const { return eventScripts; }
      };
    };
  };
  namespace ExplorationBasexp_
  {
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Basexp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "basexp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T basexp;
            T& operator()() { return basexp; }
            const T& operator()() const { return basexp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct ExplorationBasexp: sqlpp::table_t<ExplorationBasexp,
               ExplorationBasexp_::Level,
               ExplorationBasexp_::Basexp>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "exploration_basexp";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T explorationBasexp;
        T& operator()() { return explorationBasexp; }
        const T& operator()() const { return explorationBasexp; }
      };
    };
  };
  namespace FishingLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct FishingLootTemplate: sqlpp::table_t<FishingLootTemplate,
               FishingLootTemplate_::Entry,
               FishingLootTemplate_::Item,
               FishingLootTemplate_::Reference,
               FishingLootTemplate_::Chance,
               FishingLootTemplate_::QuestRequired,
               FishingLootTemplate_::LootMode,
               FishingLootTemplate_::GroupId,
               FishingLootTemplate_::MinCount,
               FishingLootTemplate_::MaxCount,
               FishingLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "fishing_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T fishingLootTemplate;
        T& operator()() { return fishingLootTemplate; }
        const T& operator()() const { return fishingLootTemplate; }
      };
    };
  };
  namespace GameEvent_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct StartTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "start_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T startTime;
            T& operator()() { return startTime; }
            const T& operator()() const { return startTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EndTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "end_time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T endTime;
            T& operator()() { return endTime; }
            const T& operator()() const { return endTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Occurence
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "occurence";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T occurence;
            T& operator()() { return occurence; }
            const T& operator()() const { return occurence; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Length
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "length";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T length;
            T& operator()() { return length; }
            const T& operator()() const { return length; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Holiday
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "holiday";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T holiday;
            T& operator()() { return holiday; }
            const T& operator()() const { return holiday; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct WorldEvent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "world_event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T worldEvent;
            T& operator()() { return worldEvent; }
            const T& operator()() const { return worldEvent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Announce
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "announce";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T announce;
            T& operator()() { return announce; }
            const T& operator()() const { return announce; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
  }

  struct GameEvent: sqlpp::table_t<GameEvent,
               GameEvent_::EventEntry,
               GameEvent_::StartTime,
               GameEvent_::EndTime,
               GameEvent_::Occurence,
               GameEvent_::Length,
               GameEvent_::Holiday,
               GameEvent_::Description,
               GameEvent_::WorldEvent,
               GameEvent_::Announce>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEvent;
        T& operator()() { return gameEvent; }
        const T& operator()() const { return gameEvent; }
      };
    };
  };
  namespace GameEventArenaSeasons_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Season
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "season";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T season;
            T& operator()() { return season; }
            const T& operator()() const { return season; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct GameEventArenaSeasons: sqlpp::table_t<GameEventArenaSeasons,
               GameEventArenaSeasons_::EventEntry,
               GameEventArenaSeasons_::Season>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_arena_seasons";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventArenaSeasons;
        T& operator()() { return gameEventArenaSeasons; }
        const T& operator()() const { return gameEventArenaSeasons; }
      };
    };
  };
  namespace GameEventBattlegroundHoliday_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Bgflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bgflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bgflag;
            T& operator()() { return bgflag; }
            const T& operator()() const { return bgflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameEventBattlegroundHoliday: sqlpp::table_t<GameEventBattlegroundHoliday,
               GameEventBattlegroundHoliday_::EventEntry,
               GameEventBattlegroundHoliday_::Bgflag>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_battleground_holiday";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventBattlegroundHoliday;
        T& operator()() { return gameEventBattlegroundHoliday; }
        const T& operator()() const { return gameEventBattlegroundHoliday; }
      };
    };
  };
  namespace GameEventCondition_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct ConditionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "condition_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T conditionId;
            T& operator()() { return conditionId; }
            const T& operator()() const { return conditionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ReqNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "req_num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqNum;
            T& operator()() { return reqNum; }
            const T& operator()() const { return reqNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
    struct MaxWorldStateField
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "max_world_state_field";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxWorldStateField;
            T& operator()() { return maxWorldStateField; }
            const T& operator()() const { return maxWorldStateField; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct DoneWorldStateField
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "done_world_state_field";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T doneWorldStateField;
            T& operator()() { return doneWorldStateField; }
            const T& operator()() const { return doneWorldStateField; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct GameEventCondition: sqlpp::table_t<GameEventCondition,
               GameEventCondition_::EventEntry,
               GameEventCondition_::ConditionId,
               GameEventCondition_::ReqNum,
               GameEventCondition_::MaxWorldStateField,
               GameEventCondition_::DoneWorldStateField,
               GameEventCondition_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_condition";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventCondition;
        T& operator()() { return gameEventCondition; }
        const T& operator()() const { return gameEventCondition; }
      };
    };
  };
  namespace GameEventCreature_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
  }

  struct GameEventCreature: sqlpp::table_t<GameEventCreature,
               GameEventCreature_::EventEntry,
               GameEventCreature_::Guid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_creature";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventCreature;
        T& operator()() { return gameEventCreature; }
        const T& operator()() const { return gameEventCreature; }
      };
    };
  };
  namespace GameEventCreatureQuest_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameEventCreatureQuest: sqlpp::table_t<GameEventCreatureQuest,
               GameEventCreatureQuest_::EventEntry,
               GameEventCreatureQuest_::Id,
               GameEventCreatureQuest_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_creature_quest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventCreatureQuest;
        T& operator()() { return gameEventCreatureQuest; }
        const T& operator()() const { return gameEventCreatureQuest; }
      };
    };
  };
  namespace GameEventGameobject_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
  }

  struct GameEventGameobject: sqlpp::table_t<GameEventGameobject,
               GameEventGameobject_::EventEntry,
               GameEventGameobject_::Guid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_gameobject";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventGameobject;
        T& operator()() { return gameEventGameobject; }
        const T& operator()() const { return gameEventGameobject; }
      };
    };
  };
  namespace GameEventGameobjectQuest_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameEventGameobjectQuest: sqlpp::table_t<GameEventGameobjectQuest,
               GameEventGameobjectQuest_::EventEntry,
               GameEventGameobjectQuest_::Id,
               GameEventGameobjectQuest_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_gameobject_quest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventGameobjectQuest;
        T& operator()() { return gameEventGameobjectQuest; }
        const T& operator()() const { return gameEventGameobjectQuest; }
      };
    };
  };
  namespace GameEventModelEquip_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Modelid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "modelid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T modelid;
            T& operator()() { return modelid; }
            const T& operator()() const { return modelid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EquipmentId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "equipment_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T equipmentId;
            T& operator()() { return equipmentId; }
            const T& operator()() const { return equipmentId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct GameEventModelEquip: sqlpp::table_t<GameEventModelEquip,
               GameEventModelEquip_::EventEntry,
               GameEventModelEquip_::Guid,
               GameEventModelEquip_::Modelid,
               GameEventModelEquip_::EquipmentId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_model_equip";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventModelEquip;
        T& operator()() { return gameEventModelEquip; }
        const T& operator()() const { return gameEventModelEquip; }
      };
    };
  };
  namespace GameEventNpcVendor_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Maxcount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxcount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxcount;
            T& operator()() { return maxcount; }
            const T& operator()() const { return maxcount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Incrtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "incrtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T incrtime;
            T& operator()() { return incrtime; }
            const T& operator()() const { return incrtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ExtendedCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ExtendedCost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ExtendedCost;
            T& operator()() { return ExtendedCost; }
            const T& operator()() const { return ExtendedCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct GameEventNpcVendor: sqlpp::table_t<GameEventNpcVendor,
               GameEventNpcVendor_::EventEntry,
               GameEventNpcVendor_::Guid,
               GameEventNpcVendor_::Slot,
               GameEventNpcVendor_::Item,
               GameEventNpcVendor_::Maxcount,
               GameEventNpcVendor_::Incrtime,
               GameEventNpcVendor_::ExtendedCost,
               GameEventNpcVendor_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_npc_vendor";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventNpcVendor;
        T& operator()() { return gameEventNpcVendor; }
        const T& operator()() const { return gameEventNpcVendor; }
      };
    };
  };
  namespace GameEventNpcflag_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Npcflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "npcflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcflag;
            T& operator()() { return npcflag; }
            const T& operator()() const { return npcflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
  }

  struct GameEventNpcflag: sqlpp::table_t<GameEventNpcflag,
               GameEventNpcflag_::EventEntry,
               GameEventNpcflag_::Guid,
               GameEventNpcflag_::Npcflag>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_npcflag";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventNpcflag;
        T& operator()() { return gameEventNpcflag; }
        const T& operator()() const { return gameEventNpcflag; }
      };
    };
  };
  namespace GameEventPool_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct PoolEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pool_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolEntry;
            T& operator()() { return poolEntry; }
            const T& operator()() const { return poolEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameEventPool: sqlpp::table_t<GameEventPool,
               GameEventPool_::EventEntry,
               GameEventPool_::PoolEntry>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_pool";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventPool;
        T& operator()() { return gameEventPool; }
        const T& operator()() const { return gameEventPool; }
      };
    };
  };
  namespace GameEventPrerequisite_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct PrerequisiteEvent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "prerequisite_event";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T prerequisiteEvent;
            T& operator()() { return prerequisiteEvent; }
            const T& operator()() const { return prerequisiteEvent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct GameEventPrerequisite: sqlpp::table_t<GameEventPrerequisite,
               GameEventPrerequisite_::EventEntry,
               GameEventPrerequisite_::PrerequisiteEvent>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_prerequisite";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventPrerequisite;
        T& operator()() { return gameEventPrerequisite; }
        const T& operator()() const { return gameEventPrerequisite; }
      };
    };
  };
  namespace GameEventQuestCondition_
  {
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ConditionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "condition_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T conditionId;
            T& operator()() { return conditionId; }
            const T& operator()() const { return conditionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Num
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "num";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T num;
            T& operator()() { return num; }
            const T& operator()() const { return num; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::can_be_null>;
    };
  }

  struct GameEventQuestCondition: sqlpp::table_t<GameEventQuestCondition,
               GameEventQuestCondition_::EventEntry,
               GameEventQuestCondition_::Quest,
               GameEventQuestCondition_::ConditionId,
               GameEventQuestCondition_::Num>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_quest_condition";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventQuestCondition;
        T& operator()() { return gameEventQuestCondition; }
        const T& operator()() const { return gameEventQuestCondition; }
      };
    };
  };
  namespace GameEventSeasonalQuestrelation_
  {
    struct QuestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "questId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questId;
            T& operator()() { return questId; }
            const T& operator()() const { return questId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct EventEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "eventEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventEntry;
            T& operator()() { return eventEntry; }
            const T& operator()() const { return eventEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameEventSeasonalQuestrelation: sqlpp::table_t<GameEventSeasonalQuestrelation,
               GameEventSeasonalQuestrelation_::QuestId,
               GameEventSeasonalQuestrelation_::EventEntry>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_event_seasonal_questrelation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameEventSeasonalQuestrelation;
        T& operator()() { return gameEventSeasonalQuestrelation; }
        const T& operator()() const { return gameEventSeasonalQuestrelation; }
      };
    };
  };
  namespace GameTele_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct GameTele: sqlpp::table_t<GameTele,
               GameTele_::Id,
               GameTele_::PositionX,
               GameTele_::PositionY,
               GameTele_::PositionZ,
               GameTele_::Orientation,
               GameTele_::Map,
               GameTele_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_tele";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameTele;
        T& operator()() { return gameTele; }
        const T& operator()() const { return gameTele; }
      };
    };
  };
  namespace GameWeather_
  {
    struct Zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpringRainChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spring_rain_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T springRainChance;
            T& operator()() { return springRainChance; }
            const T& operator()() const { return springRainChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SpringSnowChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spring_snow_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T springSnowChance;
            T& operator()() { return springSnowChance; }
            const T& operator()() const { return springSnowChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SpringStormChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spring_storm_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T springStormChance;
            T& operator()() { return springStormChance; }
            const T& operator()() const { return springStormChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SummerRainChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summer_rain_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summerRainChance;
            T& operator()() { return summerRainChance; }
            const T& operator()() const { return summerRainChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SummerSnowChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summer_snow_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summerSnowChance;
            T& operator()() { return summerSnowChance; }
            const T& operator()() const { return summerSnowChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SummerStormChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summer_storm_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summerStormChance;
            T& operator()() { return summerStormChance; }
            const T& operator()() const { return summerStormChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FallRainChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "fall_rain_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fallRainChance;
            T& operator()() { return fallRainChance; }
            const T& operator()() const { return fallRainChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FallSnowChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "fall_snow_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fallSnowChance;
            T& operator()() { return fallSnowChance; }
            const T& operator()() const { return fallSnowChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FallStormChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "fall_storm_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T fallStormChance;
            T& operator()() { return fallStormChance; }
            const T& operator()() const { return fallStormChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WinterRainChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "winter_rain_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winterRainChance;
            T& operator()() { return winterRainChance; }
            const T& operator()() const { return winterRainChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WinterSnowChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "winter_snow_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winterSnowChance;
            T& operator()() { return winterSnowChance; }
            const T& operator()() const { return winterSnowChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct WinterStormChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "winter_storm_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T winterStormChance;
            T& operator()() { return winterStormChance; }
            const T& operator()() const { return winterStormChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
  }

  struct GameWeather: sqlpp::table_t<GameWeather,
               GameWeather_::Zone,
               GameWeather_::SpringRainChance,
               GameWeather_::SpringSnowChance,
               GameWeather_::SpringStormChance,
               GameWeather_::SummerRainChance,
               GameWeather_::SummerSnowChance,
               GameWeather_::SummerStormChance,
               GameWeather_::FallRainChance,
               GameWeather_::FallSnowChance,
               GameWeather_::FallStormChance,
               GameWeather_::WinterRainChance,
               GameWeather_::WinterSnowChance,
               GameWeather_::WinterStormChance,
               GameWeather_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "game_weather";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameWeather;
        T& operator()() { return gameWeather; }
        const T& operator()() const { return gameWeather; }
      };
    };
  };
  namespace Gameobject_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ZoneId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "zoneId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zoneId;
            T& operator()() { return zoneId; }
            const T& operator()() const { return zoneId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AreaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "areaId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T areaId;
            T& operator()() { return areaId; }
            const T& operator()() const { return areaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SpawnMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spawnMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spawnMask;
            T& operator()() { return spawnMask; }
            const T& operator()() const { return spawnMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PhaseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PhaseId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseId;
            T& operator()() { return PhaseId; }
            const T& operator()() const { return PhaseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PhaseGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PhaseGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseGroup;
            T& operator()() { return PhaseGroup; }
            const T& operator()() const { return PhaseGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rotation0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rotation0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rotation0;
            T& operator()() { return rotation0; }
            const T& operator()() const { return rotation0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rotation1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rotation1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rotation1;
            T& operator()() { return rotation1; }
            const T& operator()() const { return rotation1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rotation2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rotation2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rotation2;
            T& operator()() { return rotation2; }
            const T& operator()() const { return rotation2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rotation3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rotation3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rotation3;
            T& operator()() { return rotation3; }
            const T& operator()() const { return rotation3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Spawntimesecs
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spawntimesecs";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spawntimesecs;
            T& operator()() { return spawntimesecs; }
            const T& operator()() const { return spawntimesecs; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Animprogress
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "animprogress";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T animprogress;
            T& operator()() { return animprogress; }
            const T& operator()() const { return animprogress; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct Gameobject: sqlpp::table_t<Gameobject,
               Gameobject_::Guid,
               Gameobject_::Id,
               Gameobject_::Map,
               Gameobject_::ZoneId,
               Gameobject_::AreaId,
               Gameobject_::SpawnMask,
               Gameobject_::PhaseId,
               Gameobject_::PhaseGroup,
               Gameobject_::PositionX,
               Gameobject_::PositionY,
               Gameobject_::PositionZ,
               Gameobject_::Orientation,
               Gameobject_::Rotation0,
               Gameobject_::Rotation1,
               Gameobject_::Rotation2,
               Gameobject_::Rotation3,
               Gameobject_::Spawntimesecs,
               Gameobject_::Animprogress,
               Gameobject_::State,
               Gameobject_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobject;
        T& operator()() { return gameobject; }
        const T& operator()() const { return gameobject; }
      };
    };
  };
  namespace GameobjectAddon_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct InvisibilityType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "invisibilityType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T invisibilityType;
            T& operator()() { return invisibilityType; }
            const T& operator()() const { return invisibilityType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct InvisibilityValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "invisibilityValue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T invisibilityValue;
            T& operator()() { return invisibilityValue; }
            const T& operator()() const { return invisibilityValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameobjectAddon: sqlpp::table_t<GameobjectAddon,
               GameobjectAddon_::Guid,
               GameobjectAddon_::InvisibilityType,
               GameobjectAddon_::InvisibilityValue>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectAddon;
        T& operator()() { return gameobjectAddon; }
        const T& operator()() const { return gameobjectAddon; }
      };
    };
  };
  namespace GameobjectLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct GameobjectLootTemplate: sqlpp::table_t<GameobjectLootTemplate,
               GameobjectLootTemplate_::Entry,
               GameobjectLootTemplate_::Item,
               GameobjectLootTemplate_::Reference,
               GameobjectLootTemplate_::Chance,
               GameobjectLootTemplate_::QuestRequired,
               GameobjectLootTemplate_::LootMode,
               GameobjectLootTemplate_::GroupId,
               GameobjectLootTemplate_::MinCount,
               GameobjectLootTemplate_::MaxCount,
               GameobjectLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectLootTemplate;
        T& operator()() { return gameobjectLootTemplate; }
        const T& operator()() const { return gameobjectLootTemplate; }
      };
    };
  };
  namespace GameobjectQuestender_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameobjectQuestender: sqlpp::table_t<GameobjectQuestender,
               GameobjectQuestender_::Id,
               GameobjectQuestender_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_questender";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectQuestender;
        T& operator()() { return gameobjectQuestender; }
        const T& operator()() const { return gameobjectQuestender; }
      };
    };
  };
  namespace GameobjectQuestitem_
  {
    struct GameObjectEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GameObjectEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GameObjectEntry;
            T& operator()() { return GameObjectEntry; }
            const T& operator()() const { return GameObjectEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Idx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx;
            T& operator()() { return Idx; }
            const T& operator()() const { return Idx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemId;
            T& operator()() { return ItemId; }
            const T& operator()() const { return ItemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct GameobjectQuestitem: sqlpp::table_t<GameobjectQuestitem,
               GameobjectQuestitem_::GameObjectEntry,
               GameobjectQuestitem_::Idx,
               GameobjectQuestitem_::ItemId,
               GameobjectQuestitem_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_questitem";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectQuestitem;
        T& operator()() { return gameobjectQuestitem; }
        const T& operator()() const { return gameobjectQuestitem; }
      };
    };
  };
  namespace GameobjectQueststarter_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Quest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quest;
            T& operator()() { return quest; }
            const T& operator()() const { return quest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameobjectQueststarter: sqlpp::table_t<GameobjectQueststarter,
               GameobjectQueststarter_::Id,
               GameobjectQueststarter_::Quest>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_queststarter";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectQueststarter;
        T& operator()() { return gameobjectQueststarter; }
        const T& operator()() const { return gameobjectQueststarter; }
      };
    };
  };
  namespace GameobjectTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct DisplayId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "displayId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T displayId;
            T& operator()() { return displayId; }
            const T& operator()() const { return displayId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct IconName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "IconName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IconName;
            T& operator()() { return IconName; }
            const T& operator()() const { return IconName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct CastBarCaption
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "castBarCaption";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T castBarCaption;
            T& operator()() { return castBarCaption; }
            const T& operator()() const { return castBarCaption; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Unk1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unk1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unk1;
            T& operator()() { return unk1; }
            const T& operator()() const { return unk1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Size
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "size";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T size;
            T& operator()() { return size; }
            const T& operator()() const { return size; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Data0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data0;
            T& operator()() { return Data0; }
            const T& operator()() const { return Data0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data1;
            T& operator()() { return Data1; }
            const T& operator()() const { return Data1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data2;
            T& operator()() { return Data2; }
            const T& operator()() const { return Data2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data3;
            T& operator()() { return Data3; }
            const T& operator()() const { return Data3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data4;
            T& operator()() { return Data4; }
            const T& operator()() const { return Data4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data5;
            T& operator()() { return Data5; }
            const T& operator()() const { return Data5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data6;
            T& operator()() { return Data6; }
            const T& operator()() const { return Data6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data7;
            T& operator()() { return Data7; }
            const T& operator()() const { return Data7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data8;
            T& operator()() { return Data8; }
            const T& operator()() const { return Data8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data9;
            T& operator()() { return Data9; }
            const T& operator()() const { return Data9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data10;
            T& operator()() { return Data10; }
            const T& operator()() const { return Data10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data11;
            T& operator()() { return Data11; }
            const T& operator()() const { return Data11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data12;
            T& operator()() { return Data12; }
            const T& operator()() const { return Data12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data13;
            T& operator()() { return Data13; }
            const T& operator()() const { return Data13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data14;
            T& operator()() { return Data14; }
            const T& operator()() const { return Data14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data15;
            T& operator()() { return Data15; }
            const T& operator()() const { return Data15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data16;
            T& operator()() { return Data16; }
            const T& operator()() const { return Data16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data17
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data17";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data17;
            T& operator()() { return Data17; }
            const T& operator()() const { return Data17; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data18
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data18";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data18;
            T& operator()() { return Data18; }
            const T& operator()() const { return Data18; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data19
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data19";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data19;
            T& operator()() { return Data19; }
            const T& operator()() const { return Data19; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data20
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data20";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data20;
            T& operator()() { return Data20; }
            const T& operator()() const { return Data20; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data21
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data21";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data21;
            T& operator()() { return Data21; }
            const T& operator()() const { return Data21; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data22
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data22";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data22;
            T& operator()() { return Data22; }
            const T& operator()() const { return Data22; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data23
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data23";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data23;
            T& operator()() { return Data23; }
            const T& operator()() const { return Data23; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data24
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data24";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data24;
            T& operator()() { return Data24; }
            const T& operator()() const { return Data24; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data25
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data25";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data25;
            T& operator()() { return Data25; }
            const T& operator()() const { return Data25; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data26
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data26";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data26;
            T& operator()() { return Data26; }
            const T& operator()() const { return Data26; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data27
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data27";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data27;
            T& operator()() { return Data27; }
            const T& operator()() const { return Data27; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data28
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data28";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data28;
            T& operator()() { return Data28; }
            const T& operator()() const { return Data28; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data29
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data29";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data29;
            T& operator()() { return Data29; }
            const T& operator()() const { return Data29; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data30
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data30";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data30;
            T& operator()() { return Data30; }
            const T& operator()() const { return Data30; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data31
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data31";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data31;
            T& operator()() { return Data31; }
            const T& operator()() const { return Data31; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Data32
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Data32";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Data32;
            T& operator()() { return Data32; }
            const T& operator()() const { return Data32; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RequiredLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredLevel;
            T& operator()() { return RequiredLevel; }
            const T& operator()() const { return RequiredLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct AIName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AIName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AIName;
            T& operator()() { return AIName; }
            const T& operator()() const { return AIName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct GameobjectTemplate: sqlpp::table_t<GameobjectTemplate,
               GameobjectTemplate_::Entry,
               GameobjectTemplate_::Type,
               GameobjectTemplate_::DisplayId,
               GameobjectTemplate_::Name,
               GameobjectTemplate_::IconName,
               GameobjectTemplate_::CastBarCaption,
               GameobjectTemplate_::Unk1,
               GameobjectTemplate_::Size,
               GameobjectTemplate_::Data0,
               GameobjectTemplate_::Data1,
               GameobjectTemplate_::Data2,
               GameobjectTemplate_::Data3,
               GameobjectTemplate_::Data4,
               GameobjectTemplate_::Data5,
               GameobjectTemplate_::Data6,
               GameobjectTemplate_::Data7,
               GameobjectTemplate_::Data8,
               GameobjectTemplate_::Data9,
               GameobjectTemplate_::Data10,
               GameobjectTemplate_::Data11,
               GameobjectTemplate_::Data12,
               GameobjectTemplate_::Data13,
               GameobjectTemplate_::Data14,
               GameobjectTemplate_::Data15,
               GameobjectTemplate_::Data16,
               GameobjectTemplate_::Data17,
               GameobjectTemplate_::Data18,
               GameobjectTemplate_::Data19,
               GameobjectTemplate_::Data20,
               GameobjectTemplate_::Data21,
               GameobjectTemplate_::Data22,
               GameobjectTemplate_::Data23,
               GameobjectTemplate_::Data24,
               GameobjectTemplate_::Data25,
               GameobjectTemplate_::Data26,
               GameobjectTemplate_::Data27,
               GameobjectTemplate_::Data28,
               GameobjectTemplate_::Data29,
               GameobjectTemplate_::Data30,
               GameobjectTemplate_::Data31,
               GameobjectTemplate_::Data32,
               GameobjectTemplate_::RequiredLevel,
               GameobjectTemplate_::AIName,
               GameobjectTemplate_::ScriptName,
               GameobjectTemplate_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectTemplate;
        T& operator()() { return gameobjectTemplate; }
        const T& operator()() const { return gameobjectTemplate; }
      };
    };
  };
  namespace GameobjectTemplateAddon_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction;
            T& operator()() { return faction; }
            const T& operator()() const { return faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mingold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mingold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mingold;
            T& operator()() { return mingold; }
            const T& operator()() const { return mingold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Maxgold
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxgold";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxgold;
            T& operator()() { return maxgold; }
            const T& operator()() const { return maxgold; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GameobjectTemplateAddon: sqlpp::table_t<GameobjectTemplateAddon,
               GameobjectTemplateAddon_::Entry,
               GameobjectTemplateAddon_::Faction,
               GameobjectTemplateAddon_::Flags,
               GameobjectTemplateAddon_::Mingold,
               GameobjectTemplateAddon_::Maxgold>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_template_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectTemplateAddon;
        T& operator()() { return gameobjectTemplateAddon; }
        const T& operator()() const { return gameobjectTemplateAddon; }
      };
    };
  };
  namespace GameobjectTemplateLocale_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct CastBarCaption
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "castBarCaption";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T castBarCaption;
            T& operator()() { return castBarCaption; }
            const T& operator()() const { return castBarCaption; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Unk1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unk1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unk1;
            T& operator()() { return unk1; }
            const T& operator()() const { return unk1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct GameobjectTemplateLocale: sqlpp::table_t<GameobjectTemplateLocale,
               GameobjectTemplateLocale_::Entry,
               GameobjectTemplateLocale_::Locale,
               GameobjectTemplateLocale_::Name,
               GameobjectTemplateLocale_::CastBarCaption,
               GameobjectTemplateLocale_::Unk1,
               GameobjectTemplateLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gameobject_template_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gameobjectTemplateLocale;
        T& operator()() { return gameobjectTemplateLocale; }
        const T& operator()() const { return gameobjectTemplateLocale; }
      };
    };
  };
  namespace GarrisonFollowerClassSpecAbilities_
  {
    struct ClassSpecId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "classSpecId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classSpecId;
            T& operator()() { return classSpecId; }
            const T& operator()() const { return classSpecId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AbilityId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "abilityId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T abilityId;
            T& operator()() { return abilityId; }
            const T& operator()() const { return abilityId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GarrisonFollowerClassSpecAbilities: sqlpp::table_t<GarrisonFollowerClassSpecAbilities,
               GarrisonFollowerClassSpecAbilities_::ClassSpecId,
               GarrisonFollowerClassSpecAbilities_::AbilityId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "garrison_follower_class_spec_abilities";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T garrisonFollowerClassSpecAbilities;
        T& operator()() { return garrisonFollowerClassSpecAbilities; }
        const T& operator()() const { return garrisonFollowerClassSpecAbilities; }
      };
    };
  };
  namespace GarrisonPlotFinalizeInfo_
  {
    struct GarrPlotInstanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "garrPlotInstanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T garrPlotInstanceId;
            T& operator()() { return garrPlotInstanceId; }
            const T& operator()() const { return garrPlotInstanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeGameObjectId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeGameObjectId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeGameObjectId;
            T& operator()() { return hordeGameObjectId; }
            const T& operator()() const { return hordeGameObjectId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct HordeX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeX;
            T& operator()() { return hordeX; }
            const T& operator()() const { return hordeX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HordeY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeY;
            T& operator()() { return hordeY; }
            const T& operator()() const { return hordeY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HordeZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeZ;
            T& operator()() { return hordeZ; }
            const T& operator()() const { return hordeZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HordeO
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeO";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeO;
            T& operator()() { return hordeO; }
            const T& operator()() const { return hordeO; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct HordeAnimKitId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hordeAnimKitId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeAnimKitId;
            T& operator()() { return hordeAnimKitId; }
            const T& operator()() const { return hordeAnimKitId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct AllianceGameObjectId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceGameObjectId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceGameObjectId;
            T& operator()() { return allianceGameObjectId; }
            const T& operator()() const { return allianceGameObjectId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AllianceX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceX;
            T& operator()() { return allianceX; }
            const T& operator()() const { return allianceX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AllianceY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceY;
            T& operator()() { return allianceY; }
            const T& operator()() const { return allianceY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AllianceZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceZ;
            T& operator()() { return allianceZ; }
            const T& operator()() const { return allianceZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AllianceO
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceO";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceO;
            T& operator()() { return allianceO; }
            const T& operator()() const { return allianceO; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AllianceAnimKitId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allianceAnimKitId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceAnimKitId;
            T& operator()() { return allianceAnimKitId; }
            const T& operator()() const { return allianceAnimKitId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  }

  struct GarrisonPlotFinalizeInfo: sqlpp::table_t<GarrisonPlotFinalizeInfo,
               GarrisonPlotFinalizeInfo_::GarrPlotInstanceId,
               GarrisonPlotFinalizeInfo_::HordeGameObjectId,
               GarrisonPlotFinalizeInfo_::HordeX,
               GarrisonPlotFinalizeInfo_::HordeY,
               GarrisonPlotFinalizeInfo_::HordeZ,
               GarrisonPlotFinalizeInfo_::HordeO,
               GarrisonPlotFinalizeInfo_::HordeAnimKitId,
               GarrisonPlotFinalizeInfo_::AllianceGameObjectId,
               GarrisonPlotFinalizeInfo_::AllianceX,
               GarrisonPlotFinalizeInfo_::AllianceY,
               GarrisonPlotFinalizeInfo_::AllianceZ,
               GarrisonPlotFinalizeInfo_::AllianceO,
               GarrisonPlotFinalizeInfo_::AllianceAnimKitId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "garrison_plot_finalize_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T garrisonPlotFinalizeInfo;
        T& operator()() { return garrisonPlotFinalizeInfo; }
        const T& operator()() const { return garrisonPlotFinalizeInfo; }
      };
    };
  };
  namespace GossipMenu_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct TextId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textId;
            T& operator()() { return textId; }
            const T& operator()() const { return textId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GossipMenu: sqlpp::table_t<GossipMenu,
               GossipMenu_::Entry,
               GossipMenu_::TextId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gossip_menu";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gossipMenu;
        T& operator()() { return gossipMenu; }
        const T& operator()() const { return gossipMenu; }
      };
    };
  };
  namespace GossipMenuOption_
  {
    struct MenuId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "menu_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T menuId;
            T& operator()() { return menuId; }
            const T& operator()() const { return menuId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct OptionIcon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_icon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionIcon;
            T& operator()() { return optionIcon; }
            const T& operator()() const { return optionIcon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct OptionText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionText;
            T& operator()() { return optionText; }
            const T& operator()() const { return optionText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionBroadcastTextID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "OptionBroadcastTextID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T OptionBroadcastTextID;
            T& operator()() { return OptionBroadcastTextID; }
            const T& operator()() const { return OptionBroadcastTextID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct OptionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionId;
            T& operator()() { return optionId; }
            const T& operator()() const { return optionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct NpcOptionNpcflag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "npc_option_npcflag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcOptionNpcflag;
            T& operator()() { return npcOptionNpcflag; }
            const T& operator()() const { return npcOptionNpcflag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct ActionMenuId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_menu_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionMenuId;
            T& operator()() { return actionMenuId; }
            const T& operator()() const { return actionMenuId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionPoiId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_poi_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionPoiId;
            T& operator()() { return actionPoiId; }
            const T& operator()() const { return actionPoiId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BoxCoded
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_coded";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxCoded;
            T& operator()() { return boxCoded; }
            const T& operator()() const { return boxCoded; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct BoxMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_money";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxMoney;
            T& operator()() { return boxMoney; }
            const T& operator()() const { return boxMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BoxText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxText;
            T& operator()() { return boxText; }
            const T& operator()() const { return boxText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxBroadcastTextID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BoxBroadcastTextID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BoxBroadcastTextID;
            T& operator()() { return BoxBroadcastTextID; }
            const T& operator()() const { return BoxBroadcastTextID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct GossipMenuOption: sqlpp::table_t<GossipMenuOption,
               GossipMenuOption_::MenuId,
               GossipMenuOption_::Id,
               GossipMenuOption_::OptionIcon,
               GossipMenuOption_::OptionText,
               GossipMenuOption_::OptionBroadcastTextID,
               GossipMenuOption_::OptionId,
               GossipMenuOption_::NpcOptionNpcflag,
               GossipMenuOption_::ActionMenuId,
               GossipMenuOption_::ActionPoiId,
               GossipMenuOption_::BoxCoded,
               GossipMenuOption_::BoxMoney,
               GossipMenuOption_::BoxText,
               GossipMenuOption_::BoxBroadcastTextID>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "gossip_menu_option";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T gossipMenuOption;
        T& operator()() { return gossipMenuOption; }
        const T& operator()() const { return gossipMenuOption; }
      };
    };
  };
  namespace GraveyardZone_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct GhostZone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GhostZone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GhostZone;
            T& operator()() { return GhostZone; }
            const T& operator()() const { return GhostZone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Faction;
            T& operator()() { return Faction; }
            const T& operator()() const { return Faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct GraveyardZone: sqlpp::table_t<GraveyardZone,
               GraveyardZone_::ID,
               GraveyardZone_::GhostZone,
               GraveyardZone_::Faction,
               GraveyardZone_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "graveyard_zone";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T graveyardZone;
        T& operator()() { return graveyardZone; }
        const T& operator()() const { return graveyardZone; }
      };
    };
  };
  namespace GuildRewards_
  {
    struct ItemID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemID;
            T& operator()() { return ItemID; }
            const T& operator()() const { return ItemID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MinGuildRep
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinGuildRep";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinGuildRep;
            T& operator()() { return MinGuildRep; }
            const T& operator()() const { return MinGuildRep; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct RaceMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RaceMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RaceMask;
            T& operator()() { return RaceMask; }
            const T& operator()() const { return RaceMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct Cost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Cost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Cost;
            T& operator()() { return Cost; }
            const T& operator()() const { return Cost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::can_be_null>;
    };
  }

  struct GuildRewards: sqlpp::table_t<GuildRewards,
               GuildRewards_::ItemID,
               GuildRewards_::MinGuildRep,
               GuildRewards_::RaceMask,
               GuildRewards_::Cost>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_rewards";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildRewards;
        T& operator()() { return guildRewards; }
        const T& operator()() const { return guildRewards; }
      };
    };
  };
  namespace GuildRewardsReqAchievements_
  {
    struct ItemID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemID;
            T& operator()() { return ItemID; }
            const T& operator()() const { return ItemID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AchievementRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AchievementRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AchievementRequired;
            T& operator()() { return AchievementRequired; }
            const T& operator()() const { return AchievementRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct GuildRewardsReqAchievements: sqlpp::table_t<GuildRewardsReqAchievements,
               GuildRewardsReqAchievements_::ItemID,
               GuildRewardsReqAchievements_::AchievementRequired>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "guild_rewards_req_achievements";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T guildRewardsReqAchievements;
        T& operator()() { return guildRewardsReqAchievements; }
        const T& operator()() const { return guildRewardsReqAchievements; }
      };
    };
  };
  namespace InstanceEncounters_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CreditType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "creditType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creditType;
            T& operator()() { return creditType; }
            const T& operator()() const { return creditType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct CreditEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "creditEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creditEntry;
            T& operator()() { return creditEntry; }
            const T& operator()() const { return creditEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LastEncounterDungeon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lastEncounterDungeon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastEncounterDungeon;
            T& operator()() { return lastEncounterDungeon; }
            const T& operator()() const { return lastEncounterDungeon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct InstanceEncounters: sqlpp::table_t<InstanceEncounters,
               InstanceEncounters_::Entry,
               InstanceEncounters_::CreditType,
               InstanceEncounters_::CreditEntry,
               InstanceEncounters_::LastEncounterDungeon,
               InstanceEncounters_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_encounters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceEncounters;
        T& operator()() { return instanceEncounters; }
        const T& operator()() const { return instanceEncounters; }
      };
    };
  };
  namespace InstanceTemplate_
  {
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Parent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "parent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T parent;
            T& operator()() { return parent; }
            const T& operator()() const { return parent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Script
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "script";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T script;
            T& operator()() { return script; }
            const T& operator()() const { return script; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct AllowMount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allowMount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allowMount;
            T& operator()() { return allowMount; }
            const T& operator()() const { return allowMount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct InstanceTemplate: sqlpp::table_t<InstanceTemplate,
               InstanceTemplate_::Map,
               InstanceTemplate_::Parent,
               InstanceTemplate_::Script,
               InstanceTemplate_::AllowMount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "instance_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T instanceTemplate;
        T& operator()() { return instanceTemplate; }
        const T& operator()() const { return instanceTemplate; }
      };
    };
  };
  namespace ItemEnchantmentTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Ench
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ench";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ench;
            T& operator()() { return ench; }
            const T& operator()() const { return ench; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct ItemEnchantmentTemplate: sqlpp::table_t<ItemEnchantmentTemplate,
               ItemEnchantmentTemplate_::Entry,
               ItemEnchantmentTemplate_::Ench,
               ItemEnchantmentTemplate_::Chance>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_enchantment_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemEnchantmentTemplate;
        T& operator()() { return itemEnchantmentTemplate; }
        const T& operator()() const { return itemEnchantmentTemplate; }
      };
    };
  };
  namespace ItemLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct ItemLootTemplate: sqlpp::table_t<ItemLootTemplate,
               ItemLootTemplate_::Entry,
               ItemLootTemplate_::Item,
               ItemLootTemplate_::Reference,
               ItemLootTemplate_::Chance,
               ItemLootTemplate_::QuestRequired,
               ItemLootTemplate_::LootMode,
               ItemLootTemplate_::GroupId,
               ItemLootTemplate_::MinCount,
               ItemLootTemplate_::MaxCount,
               ItemLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemLootTemplate;
        T& operator()() { return itemLootTemplate; }
        const T& operator()() const { return itemLootTemplate; }
      };
    };
  };
  namespace ItemScriptNames_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct ItemScriptNames: sqlpp::table_t<ItemScriptNames,
               ItemScriptNames_::Id,
               ItemScriptNames_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_script_names";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemScriptNames;
        T& operator()() { return itemScriptNames; }
        const T& operator()() const { return itemScriptNames; }
      };
    };
  };
  namespace ItemTemplateAddon_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct FlagsCu
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "FlagsCu";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FlagsCu;
            T& operator()() { return FlagsCu; }
            const T& operator()() const { return FlagsCu; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FoodType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "FoodType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FoodType;
            T& operator()() { return FoodType; }
            const T& operator()() const { return FoodType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinMoneyLoot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinMoneyLoot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinMoneyLoot;
            T& operator()() { return MinMoneyLoot; }
            const T& operator()() const { return MinMoneyLoot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxMoneyLoot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxMoneyLoot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxMoneyLoot;
            T& operator()() { return MaxMoneyLoot; }
            const T& operator()() const { return MaxMoneyLoot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellPPMChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellPPMChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellPPMChance;
            T& operator()() { return SpellPPMChance; }
            const T& operator()() const { return SpellPPMChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct ItemTemplateAddon: sqlpp::table_t<ItemTemplateAddon,
               ItemTemplateAddon_::Id,
               ItemTemplateAddon_::FlagsCu,
               ItemTemplateAddon_::FoodType,
               ItemTemplateAddon_::MinMoneyLoot,
               ItemTemplateAddon_::MaxMoneyLoot,
               ItemTemplateAddon_::SpellPPMChance>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "item_template_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T itemTemplateAddon;
        T& operator()() { return itemTemplateAddon; }
        const T& operator()() const { return itemTemplateAddon; }
      };
    };
  };
  namespace LfgDungeonRewards_
  {
    struct DungeonId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dungeonId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dungeonId;
            T& operator()() { return dungeonId; }
            const T& operator()() const { return dungeonId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxLevel;
            T& operator()() { return maxLevel; }
            const T& operator()() const { return maxLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct FirstQuestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "firstQuestId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T firstQuestId;
            T& operator()() { return firstQuestId; }
            const T& operator()() const { return firstQuestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct OtherQuestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "otherQuestId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T otherQuestId;
            T& operator()() { return otherQuestId; }
            const T& operator()() const { return otherQuestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct LfgDungeonRewards: sqlpp::table_t<LfgDungeonRewards,
               LfgDungeonRewards_::DungeonId,
               LfgDungeonRewards_::MaxLevel,
               LfgDungeonRewards_::FirstQuestId,
               LfgDungeonRewards_::OtherQuestId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lfg_dungeon_rewards";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lfgDungeonRewards;
        T& operator()() { return lfgDungeonRewards; }
        const T& operator()() const { return lfgDungeonRewards; }
      };
    };
  };
  namespace LfgDungeonTemplate_
  {
    struct DungeonId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dungeonId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dungeonId;
            T& operator()() { return dungeonId; }
            const T& operator()() const { return dungeonId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RequiredItemLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "requiredItemLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T requiredItemLevel;
            T& operator()() { return requiredItemLevel; }
            const T& operator()() const { return requiredItemLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct LfgDungeonTemplate: sqlpp::table_t<LfgDungeonTemplate,
               LfgDungeonTemplate_::DungeonId,
               LfgDungeonTemplate_::Name,
               LfgDungeonTemplate_::PositionX,
               LfgDungeonTemplate_::PositionY,
               LfgDungeonTemplate_::PositionZ,
               LfgDungeonTemplate_::Orientation,
               LfgDungeonTemplate_::RequiredItemLevel,
               LfgDungeonTemplate_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "lfg_dungeon_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T lfgDungeonTemplate;
        T& operator()() { return lfgDungeonTemplate; }
        const T& operator()() const { return lfgDungeonTemplate; }
      };
    };
  };
  namespace LinkedRespawn_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct LinkedGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "linkedGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkedGuid;
            T& operator()() { return linkedGuid; }
            const T& operator()() const { return linkedGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct LinkType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "linkType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkType;
            T& operator()() { return linkType; }
            const T& operator()() const { return linkType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct LinkedRespawn: sqlpp::table_t<LinkedRespawn,
               LinkedRespawn_::Guid,
               LinkedRespawn_::LinkedGuid,
               LinkedRespawn_::LinkType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "linked_respawn";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T linkedRespawn;
        T& operator()() { return linkedRespawn; }
        const T& operator()() const { return linkedRespawn; }
      };
    };
  };
  namespace LocalesAchievementReward_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SubjectLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc1;
            T& operator()() { return subjectLoc1; }
            const T& operator()() const { return subjectLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc2;
            T& operator()() { return subjectLoc2; }
            const T& operator()() const { return subjectLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc3;
            T& operator()() { return subjectLoc3; }
            const T& operator()() const { return subjectLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc4;
            T& operator()() { return subjectLoc4; }
            const T& operator()() const { return subjectLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc5;
            T& operator()() { return subjectLoc5; }
            const T& operator()() const { return subjectLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc6;
            T& operator()() { return subjectLoc6; }
            const T& operator()() const { return subjectLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc7;
            T& operator()() { return subjectLoc7; }
            const T& operator()() const { return subjectLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct SubjectLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "subject_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T subjectLoc8;
            T& operator()() { return subjectLoc8; }
            const T& operator()() const { return subjectLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct TextLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc1;
            T& operator()() { return textLoc1; }
            const T& operator()() const { return textLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc2;
            T& operator()() { return textLoc2; }
            const T& operator()() const { return textLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc3;
            T& operator()() { return textLoc3; }
            const T& operator()() const { return textLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc4;
            T& operator()() { return textLoc4; }
            const T& operator()() const { return textLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc5;
            T& operator()() { return textLoc5; }
            const T& operator()() const { return textLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc6;
            T& operator()() { return textLoc6; }
            const T& operator()() const { return textLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc7;
            T& operator()() { return textLoc7; }
            const T& operator()() const { return textLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc8;
            T& operator()() { return textLoc8; }
            const T& operator()() const { return textLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct LocalesAchievementReward: sqlpp::table_t<LocalesAchievementReward,
               LocalesAchievementReward_::Entry,
               LocalesAchievementReward_::SubjectLoc1,
               LocalesAchievementReward_::SubjectLoc2,
               LocalesAchievementReward_::SubjectLoc3,
               LocalesAchievementReward_::SubjectLoc4,
               LocalesAchievementReward_::SubjectLoc5,
               LocalesAchievementReward_::SubjectLoc6,
               LocalesAchievementReward_::SubjectLoc7,
               LocalesAchievementReward_::SubjectLoc8,
               LocalesAchievementReward_::TextLoc1,
               LocalesAchievementReward_::TextLoc2,
               LocalesAchievementReward_::TextLoc3,
               LocalesAchievementReward_::TextLoc4,
               LocalesAchievementReward_::TextLoc5,
               LocalesAchievementReward_::TextLoc6,
               LocalesAchievementReward_::TextLoc7,
               LocalesAchievementReward_::TextLoc8>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "locales_achievement_reward";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T localesAchievementReward;
        T& operator()() { return localesAchievementReward; }
        const T& operator()() const { return localesAchievementReward; }
      };
    };
  };
  namespace LocalesCreatureText_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Groupid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "groupid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupid;
            T& operator()() { return groupid; }
            const T& operator()() const { return groupid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TextLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc1;
            T& operator()() { return textLoc1; }
            const T& operator()() const { return textLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc2;
            T& operator()() { return textLoc2; }
            const T& operator()() const { return textLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc3;
            T& operator()() { return textLoc3; }
            const T& operator()() const { return textLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc4;
            T& operator()() { return textLoc4; }
            const T& operator()() const { return textLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc5;
            T& operator()() { return textLoc5; }
            const T& operator()() const { return textLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc6;
            T& operator()() { return textLoc6; }
            const T& operator()() const { return textLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc7;
            T& operator()() { return textLoc7; }
            const T& operator()() const { return textLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct TextLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T textLoc8;
            T& operator()() { return textLoc8; }
            const T& operator()() const { return textLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct LocalesCreatureText: sqlpp::table_t<LocalesCreatureText,
               LocalesCreatureText_::Entry,
               LocalesCreatureText_::Groupid,
               LocalesCreatureText_::Id,
               LocalesCreatureText_::TextLoc1,
               LocalesCreatureText_::TextLoc2,
               LocalesCreatureText_::TextLoc3,
               LocalesCreatureText_::TextLoc4,
               LocalesCreatureText_::TextLoc5,
               LocalesCreatureText_::TextLoc6,
               LocalesCreatureText_::TextLoc7,
               LocalesCreatureText_::TextLoc8>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "locales_creature_text";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T localesCreatureText;
        T& operator()() { return localesCreatureText; }
        const T& operator()() const { return localesCreatureText; }
      };
    };
  };
  namespace LocalesGossipMenuOption_
  {
    struct MenuId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "menu_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T menuId;
            T& operator()() { return menuId; }
            const T& operator()() const { return menuId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct OptionTextLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc1;
            T& operator()() { return optionTextLoc1; }
            const T& operator()() const { return optionTextLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc2;
            T& operator()() { return optionTextLoc2; }
            const T& operator()() const { return optionTextLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc3;
            T& operator()() { return optionTextLoc3; }
            const T& operator()() const { return optionTextLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc4;
            T& operator()() { return optionTextLoc4; }
            const T& operator()() const { return optionTextLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc5;
            T& operator()() { return optionTextLoc5; }
            const T& operator()() const { return optionTextLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc6;
            T& operator()() { return optionTextLoc6; }
            const T& operator()() const { return optionTextLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc7;
            T& operator()() { return optionTextLoc7; }
            const T& operator()() const { return optionTextLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct OptionTextLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "option_text_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T optionTextLoc8;
            T& operator()() { return optionTextLoc8; }
            const T& operator()() const { return optionTextLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc1;
            T& operator()() { return boxTextLoc1; }
            const T& operator()() const { return boxTextLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc2;
            T& operator()() { return boxTextLoc2; }
            const T& operator()() const { return boxTextLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc3;
            T& operator()() { return boxTextLoc3; }
            const T& operator()() const { return boxTextLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc4;
            T& operator()() { return boxTextLoc4; }
            const T& operator()() const { return boxTextLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc5;
            T& operator()() { return boxTextLoc5; }
            const T& operator()() const { return boxTextLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc6;
            T& operator()() { return boxTextLoc6; }
            const T& operator()() const { return boxTextLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc7;
            T& operator()() { return boxTextLoc7; }
            const T& operator()() const { return boxTextLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct BoxTextLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "box_text_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T boxTextLoc8;
            T& operator()() { return boxTextLoc8; }
            const T& operator()() const { return boxTextLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct LocalesGossipMenuOption: sqlpp::table_t<LocalesGossipMenuOption,
               LocalesGossipMenuOption_::MenuId,
               LocalesGossipMenuOption_::Id,
               LocalesGossipMenuOption_::OptionTextLoc1,
               LocalesGossipMenuOption_::OptionTextLoc2,
               LocalesGossipMenuOption_::OptionTextLoc3,
               LocalesGossipMenuOption_::OptionTextLoc4,
               LocalesGossipMenuOption_::OptionTextLoc5,
               LocalesGossipMenuOption_::OptionTextLoc6,
               LocalesGossipMenuOption_::OptionTextLoc7,
               LocalesGossipMenuOption_::OptionTextLoc8,
               LocalesGossipMenuOption_::BoxTextLoc1,
               LocalesGossipMenuOption_::BoxTextLoc2,
               LocalesGossipMenuOption_::BoxTextLoc3,
               LocalesGossipMenuOption_::BoxTextLoc4,
               LocalesGossipMenuOption_::BoxTextLoc5,
               LocalesGossipMenuOption_::BoxTextLoc6,
               LocalesGossipMenuOption_::BoxTextLoc7,
               LocalesGossipMenuOption_::BoxTextLoc8>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "locales_gossip_menu_option";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T localesGossipMenuOption;
        T& operator()() { return localesGossipMenuOption; }
        const T& operator()() const { return localesGossipMenuOption; }
      };
    };
  };
  namespace MailLevelReward_
  {
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RaceMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "raceMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raceMask;
            T& operator()() { return raceMask; }
            const T& operator()() const { return raceMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MailTemplateId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mailTemplateId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mailTemplateId;
            T& operator()() { return mailTemplateId; }
            const T& operator()() const { return mailTemplateId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SenderEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "senderEntry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T senderEntry;
            T& operator()() { return senderEntry; }
            const T& operator()() const { return senderEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct MailLevelReward: sqlpp::table_t<MailLevelReward,
               MailLevelReward_::Level,
               MailLevelReward_::RaceMask,
               MailLevelReward_::MailTemplateId,
               MailLevelReward_::SenderEntry>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mail_level_reward";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mailLevelReward;
        T& operator()() { return mailLevelReward; }
        const T& operator()() const { return mailLevelReward; }
      };
    };
  };
  namespace MailLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct MailLootTemplate: sqlpp::table_t<MailLootTemplate,
               MailLootTemplate_::Entry,
               MailLootTemplate_::Item,
               MailLootTemplate_::Reference,
               MailLootTemplate_::Chance,
               MailLootTemplate_::QuestRequired,
               MailLootTemplate_::LootMode,
               MailLootTemplate_::GroupId,
               MailLootTemplate_::MinCount,
               MailLootTemplate_::MaxCount,
               MailLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mail_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mailLootTemplate;
        T& operator()() { return mailLootTemplate; }
        const T& operator()() const { return mailLootTemplate; }
      };
    };
  };
  namespace MillingLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct MillingLootTemplate: sqlpp::table_t<MillingLootTemplate,
               MillingLootTemplate_::Entry,
               MillingLootTemplate_::Item,
               MillingLootTemplate_::Reference,
               MillingLootTemplate_::Chance,
               MillingLootTemplate_::QuestRequired,
               MillingLootTemplate_::LootMode,
               MillingLootTemplate_::GroupId,
               MillingLootTemplate_::MinCount,
               MillingLootTemplate_::MaxCount,
               MillingLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "milling_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T millingLootTemplate;
        T& operator()() { return millingLootTemplate; }
        const T& operator()() const { return millingLootTemplate; }
      };
    };
  };
  namespace MountDefinitions_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct OtherFactionSpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "otherFactionSpellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T otherFactionSpellId;
            T& operator()() { return otherFactionSpellId; }
            const T& operator()() const { return otherFactionSpellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct MountDefinitions: sqlpp::table_t<MountDefinitions,
               MountDefinitions_::SpellId,
               MountDefinitions_::OtherFactionSpellId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "mount_definitions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T mountDefinitions;
        T& operator()() { return mountDefinitions; }
        const T& operator()() const { return mountDefinitions; }
      };
    };
  };
  namespace NpcSpellclickSpells_
  {
    struct NpcEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "npc_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T npcEntry;
            T& operator()() { return npcEntry; }
            const T& operator()() const { return npcEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CastFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "cast_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T castFlags;
            T& operator()() { return castFlags; }
            const T& operator()() const { return castFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct UserType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "user_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T userType;
            T& operator()() { return userType; }
            const T& operator()() const { return userType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  }

  struct NpcSpellclickSpells: sqlpp::table_t<NpcSpellclickSpells,
               NpcSpellclickSpells_::NpcEntry,
               NpcSpellclickSpells_::SpellId,
               NpcSpellclickSpells_::CastFlags,
               NpcSpellclickSpells_::UserType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_spellclick_spells";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npcSpellclickSpells;
        T& operator()() { return npcSpellclickSpells; }
        const T& operator()() const { return npcSpellclickSpells; }
      };
    };
  };
  namespace NpcText_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Probability0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability0;
            T& operator()() { return Probability0; }
            const T& operator()() const { return Probability0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability1;
            T& operator()() { return Probability1; }
            const T& operator()() const { return Probability1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability2;
            T& operator()() { return Probability2; }
            const T& operator()() const { return Probability2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability3;
            T& operator()() { return Probability3; }
            const T& operator()() const { return Probability3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability4;
            T& operator()() { return Probability4; }
            const T& operator()() const { return Probability4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability5;
            T& operator()() { return Probability5; }
            const T& operator()() const { return Probability5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability6;
            T& operator()() { return Probability6; }
            const T& operator()() const { return Probability6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Probability7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Probability7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Probability7;
            T& operator()() { return Probability7; }
            const T& operator()() const { return Probability7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct BroadcastTextID0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID0;
            T& operator()() { return BroadcastTextID0; }
            const T& operator()() const { return BroadcastTextID0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID1;
            T& operator()() { return BroadcastTextID1; }
            const T& operator()() const { return BroadcastTextID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID2;
            T& operator()() { return BroadcastTextID2; }
            const T& operator()() const { return BroadcastTextID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID3;
            T& operator()() { return BroadcastTextID3; }
            const T& operator()() const { return BroadcastTextID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID4;
            T& operator()() { return BroadcastTextID4; }
            const T& operator()() const { return BroadcastTextID4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID5;
            T& operator()() { return BroadcastTextID5; }
            const T& operator()() const { return BroadcastTextID5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID6;
            T& operator()() { return BroadcastTextID6; }
            const T& operator()() const { return BroadcastTextID6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BroadcastTextID7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BroadcastTextID7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BroadcastTextID7;
            T& operator()() { return BroadcastTextID7; }
            const T& operator()() const { return BroadcastTextID7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct NpcText: sqlpp::table_t<NpcText,
               NpcText_::ID,
               NpcText_::Probability0,
               NpcText_::Probability1,
               NpcText_::Probability2,
               NpcText_::Probability3,
               NpcText_::Probability4,
               NpcText_::Probability5,
               NpcText_::Probability6,
               NpcText_::Probability7,
               NpcText_::BroadcastTextID0,
               NpcText_::BroadcastTextID1,
               NpcText_::BroadcastTextID2,
               NpcText_::BroadcastTextID3,
               NpcText_::BroadcastTextID4,
               NpcText_::BroadcastTextID5,
               NpcText_::BroadcastTextID6,
               NpcText_::BroadcastTextID7,
               NpcText_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_text";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npcText;
        T& operator()() { return npcText; }
        const T& operator()() const { return npcText; }
      };
    };
  };
  namespace NpcTrainer_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellID;
            T& operator()() { return SpellID; }
            const T& operator()() const { return SpellID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MoneyCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MoneyCost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MoneyCost;
            T& operator()() { return MoneyCost; }
            const T& operator()() const { return MoneyCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ReqSkillLine
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ReqSkillLine";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ReqSkillLine;
            T& operator()() { return ReqSkillLine; }
            const T& operator()() const { return ReqSkillLine; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ReqSkillRank
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ReqSkillRank";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ReqSkillRank;
            T& operator()() { return ReqSkillRank; }
            const T& operator()() const { return ReqSkillRank; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct ReqLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ReqLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ReqLevel;
            T& operator()() { return ReqLevel; }
            const T& operator()() const { return ReqLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct NpcTrainer: sqlpp::table_t<NpcTrainer,
               NpcTrainer_::ID,
               NpcTrainer_::SpellID,
               NpcTrainer_::MoneyCost,
               NpcTrainer_::ReqSkillLine,
               NpcTrainer_::ReqSkillRank,
               NpcTrainer_::ReqLevel>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_trainer";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npcTrainer;
        T& operator()() { return npcTrainer; }
        const T& operator()() const { return npcTrainer; }
      };
    };
  };
  namespace NpcVendor_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Slot
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "slot";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T slot;
            T& operator()() { return slot; }
            const T& operator()() const { return slot; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T item;
            T& operator()() { return item; }
            const T& operator()() const { return item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Maxcount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxcount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxcount;
            T& operator()() { return maxcount; }
            const T& operator()() const { return maxcount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Incrtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "incrtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T incrtime;
            T& operator()() { return incrtime; }
            const T& operator()() const { return incrtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ExtendedCost
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ExtendedCost";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ExtendedCost;
            T& operator()() { return ExtendedCost; }
            const T& operator()() const { return ExtendedCost; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct PlayerConditionID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PlayerConditionID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerConditionID;
            T& operator()() { return PlayerConditionID; }
            const T& operator()() const { return PlayerConditionID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct IgnoreFiltering
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "IgnoreFiltering";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T IgnoreFiltering;
            T& operator()() { return IgnoreFiltering; }
            const T& operator()() const { return IgnoreFiltering; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct NpcVendor: sqlpp::table_t<NpcVendor,
               NpcVendor_::Entry,
               NpcVendor_::Slot,
               NpcVendor_::Item,
               NpcVendor_::Maxcount,
               NpcVendor_::Incrtime,
               NpcVendor_::ExtendedCost,
               NpcVendor_::Type,
               NpcVendor_::PlayerConditionID,
               NpcVendor_::IgnoreFiltering,
               NpcVendor_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "npc_vendor";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T npcVendor;
        T& operator()() { return npcVendor; }
        const T& operator()() const { return npcVendor; }
      };
    };
  };
  namespace OutdoorpvpTemplate_
  {
    struct TypeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TypeId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TypeId;
            T& operator()() { return TypeId; }
            const T& operator()() const { return TypeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct OutdoorpvpTemplate: sqlpp::table_t<OutdoorpvpTemplate,
               OutdoorpvpTemplate_::TypeId,
               OutdoorpvpTemplate_::ScriptName,
               OutdoorpvpTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "outdoorpvp_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T outdoorpvpTemplate;
        T& operator()() { return outdoorpvpTemplate; }
        const T& operator()() const { return outdoorpvpTemplate; }
      };
    };
  };
  namespace PageText_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Text;
            T& operator()() { return Text; }
            const T& operator()() const { return Text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct NextPageID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "NextPageID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NextPageID;
            T& operator()() { return NextPageID; }
            const T& operator()() const { return NextPageID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PlayerConditionID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PlayerConditionID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerConditionID;
            T& operator()() { return PlayerConditionID; }
            const T& operator()() const { return PlayerConditionID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct PageText: sqlpp::table_t<PageText,
               PageText_::ID,
               PageText_::Text,
               PageText_::NextPageID,
               PageText_::PlayerConditionID,
               PageText_::Flags,
               PageText_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "page_text";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pageText;
        T& operator()() { return pageText; }
        const T& operator()() const { return pageText; }
      };
    };
  };
  namespace PageTextLocale_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Text;
            T& operator()() { return Text; }
            const T& operator()() const { return Text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct PageTextLocale: sqlpp::table_t<PageTextLocale,
               PageTextLocale_::ID,
               PageTextLocale_::Locale,
               PageTextLocale_::Text,
               PageTextLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "page_text_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pageTextLocale;
        T& operator()() { return pageTextLocale; }
        const T& operator()() const { return pageTextLocale; }
      };
    };
  };
  namespace PetLevelstats_
  {
    struct CreatureEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "creature_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creatureEntry;
            T& operator()() { return creatureEntry; }
            const T& operator()() const { return creatureEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Hp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hp;
            T& operator()() { return hp; }
            const T& operator()() const { return hp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Mana
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mana";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mana;
            T& operator()() { return mana; }
            const T& operator()() const { return mana; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Armor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "armor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T armor;
            T& operator()() { return armor; }
            const T& operator()() const { return armor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Str
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "str";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T str;
            T& operator()() { return str; }
            const T& operator()() const { return str; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Agi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "agi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T agi;
            T& operator()() { return agi; }
            const T& operator()() const { return agi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Sta
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sta";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sta;
            T& operator()() { return sta; }
            const T& operator()() const { return sta; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Inte
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "inte";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T inte;
            T& operator()() { return inte; }
            const T& operator()() const { return inte; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Spi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spi;
            T& operator()() { return spi; }
            const T& operator()() const { return spi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PetLevelstats: sqlpp::table_t<PetLevelstats,
               PetLevelstats_::CreatureEntry,
               PetLevelstats_::Level,
               PetLevelstats_::Hp,
               PetLevelstats_::Mana,
               PetLevelstats_::Armor,
               PetLevelstats_::Str,
               PetLevelstats_::Agi,
               PetLevelstats_::Sta,
               PetLevelstats_::Inte,
               PetLevelstats_::Spi>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_levelstats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petLevelstats;
        T& operator()() { return petLevelstats; }
        const T& operator()() const { return petLevelstats; }
      };
    };
  };
  namespace PetNameGeneration_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Word
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "word";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T word;
            T& operator()() { return word; }
            const T& operator()() const { return word; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Half
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "half";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T half;
            T& operator()() { return half; }
            const T& operator()() const { return half; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct PetNameGeneration: sqlpp::table_t<PetNameGeneration,
               PetNameGeneration_::Id,
               PetNameGeneration_::Word,
               PetNameGeneration_::Entry,
               PetNameGeneration_::Half>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pet_name_generation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T petNameGeneration;
        T& operator()() { return petNameGeneration; }
        const T& operator()() const { return petNameGeneration; }
      };
    };
  };
  namespace PhaseArea_
  {
    struct AreaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AreaId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AreaId;
            T& operator()() { return AreaId; }
            const T& operator()() const { return AreaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct PhaseId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PhaseId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PhaseId;
            T& operator()() { return PhaseId; }
            const T& operator()() const { return PhaseId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PhaseArea: sqlpp::table_t<PhaseArea,
               PhaseArea_::AreaId,
               PhaseArea_::PhaseId,
               PhaseArea_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "phase_area";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T phaseArea;
        T& operator()() { return phaseArea; }
        const T& operator()() const { return phaseArea; }
      };
    };
  };
  namespace PickpocketingLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PickpocketingLootTemplate: sqlpp::table_t<PickpocketingLootTemplate,
               PickpocketingLootTemplate_::Entry,
               PickpocketingLootTemplate_::Item,
               PickpocketingLootTemplate_::Reference,
               PickpocketingLootTemplate_::Chance,
               PickpocketingLootTemplate_::QuestRequired,
               PickpocketingLootTemplate_::LootMode,
               PickpocketingLootTemplate_::GroupId,
               PickpocketingLootTemplate_::MinCount,
               PickpocketingLootTemplate_::MaxCount,
               PickpocketingLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pickpocketing_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pickpocketingLootTemplate;
        T& operator()() { return pickpocketingLootTemplate; }
        const T& operator()() const { return pickpocketingLootTemplate; }
      };
    };
  };
  namespace PlayerFactionchangeAchievement_
  {
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerFactionchangeAchievement: sqlpp::table_t<PlayerFactionchangeAchievement,
               PlayerFactionchangeAchievement_::AllianceId,
               PlayerFactionchangeAchievement_::HordeId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_achievement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeAchievement;
        T& operator()() { return playerFactionchangeAchievement; }
        const T& operator()() const { return playerFactionchangeAchievement; }
      };
    };
  };
  namespace PlayerFactionchangeItems_
  {
    struct RaceA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race_A";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raceA;
            T& operator()() { return raceA; }
            const T& operator()() const { return raceA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CommentA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "commentA";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T commentA;
            T& operator()() { return commentA; }
            const T& operator()() const { return commentA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct RaceH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race_H";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raceH;
            T& operator()() { return raceH; }
            const T& operator()() const { return raceH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CommentH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "commentH";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T commentH;
            T& operator()() { return commentH; }
            const T& operator()() const { return commentH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct PlayerFactionchangeItems: sqlpp::table_t<PlayerFactionchangeItems,
               PlayerFactionchangeItems_::RaceA,
               PlayerFactionchangeItems_::AllianceId,
               PlayerFactionchangeItems_::CommentA,
               PlayerFactionchangeItems_::RaceH,
               PlayerFactionchangeItems_::HordeId,
               PlayerFactionchangeItems_::CommentH>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_items";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeItems;
        T& operator()() { return playerFactionchangeItems; }
        const T& operator()() const { return playerFactionchangeItems; }
      };
    };
  };
  namespace PlayerFactionchangeQuests_
  {
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerFactionchangeQuests: sqlpp::table_t<PlayerFactionchangeQuests,
               PlayerFactionchangeQuests_::AllianceId,
               PlayerFactionchangeQuests_::HordeId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_quests";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeQuests;
        T& operator()() { return playerFactionchangeQuests; }
        const T& operator()() const { return playerFactionchangeQuests; }
      };
    };
  };
  namespace PlayerFactionchangeReputations_
  {
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerFactionchangeReputations: sqlpp::table_t<PlayerFactionchangeReputations,
               PlayerFactionchangeReputations_::AllianceId,
               PlayerFactionchangeReputations_::HordeId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_reputations";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeReputations;
        T& operator()() { return playerFactionchangeReputations; }
        const T& operator()() const { return playerFactionchangeReputations; }
      };
    };
  };
  namespace PlayerFactionchangeSpells_
  {
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerFactionchangeSpells: sqlpp::table_t<PlayerFactionchangeSpells,
               PlayerFactionchangeSpells_::AllianceId,
               PlayerFactionchangeSpells_::HordeId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_spells";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeSpells;
        T& operator()() { return playerFactionchangeSpells; }
        const T& operator()() const { return playerFactionchangeSpells; }
      };
    };
  };
  namespace PlayerFactionchangeTitles_
  {
    struct AllianceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "alliance_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allianceId;
            T& operator()() { return allianceId; }
            const T& operator()() const { return allianceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct HordeId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "horde_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hordeId;
            T& operator()() { return hordeId; }
            const T& operator()() const { return hordeId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerFactionchangeTitles: sqlpp::table_t<PlayerFactionchangeTitles,
               PlayerFactionchangeTitles_::AllianceId,
               PlayerFactionchangeTitles_::HordeId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_factionchange_titles";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerFactionchangeTitles;
        T& operator()() { return playerFactionchangeTitles; }
        const T& operator()() const { return playerFactionchangeTitles; }
      };
    };
  };
  namespace PlayerLevelstats_
  {
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Str
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "str";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T str;
            T& operator()() { return str; }
            const T& operator()() const { return str; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Agi
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "agi";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T agi;
            T& operator()() { return agi; }
            const T& operator()() const { return agi; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Sta
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sta";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sta;
            T& operator()() { return sta; }
            const T& operator()() const { return sta; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Inte
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "inte";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T inte;
            T& operator()() { return inte; }
            const T& operator()() const { return inte; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerLevelstats: sqlpp::table_t<PlayerLevelstats,
               PlayerLevelstats_::Race,
               PlayerLevelstats_::Class,
               PlayerLevelstats_::Level,
               PlayerLevelstats_::Str,
               PlayerLevelstats_::Agi,
               PlayerLevelstats_::Sta,
               PlayerLevelstats_::Inte>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_levelstats";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerLevelstats;
        T& operator()() { return playerLevelstats; }
        const T& operator()() const { return playerLevelstats; }
      };
    };
  };
  namespace PlayerXpForLevel_
  {
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Level;
            T& operator()() { return Level; }
            const T& operator()() const { return Level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Experience
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Experience";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Experience;
            T& operator()() { return Experience; }
            const T& operator()() const { return Experience; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point, sqlpp::tag::require_insert>;
    };
  }

  struct PlayerXpForLevel: sqlpp::table_t<PlayerXpForLevel,
               PlayerXpForLevel_::Level,
               PlayerXpForLevel_::Experience>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "player_xp_for_level";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playerXpForLevel;
        T& operator()() { return playerXpForLevel; }
        const T& operator()() const { return playerXpForLevel; }
      };
    };
  };
  namespace Playercreateinfo_
  {
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Zone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "zone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T zone;
            T& operator()() { return zone; }
            const T& operator()() const { return zone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct Playercreateinfo: sqlpp::table_t<Playercreateinfo,
               Playercreateinfo_::Race,
               Playercreateinfo_::Class,
               Playercreateinfo_::Map,
               Playercreateinfo_::Zone,
               Playercreateinfo_::PositionX,
               Playercreateinfo_::PositionY,
               Playercreateinfo_::PositionZ,
               Playercreateinfo_::Orientation>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "playercreateinfo";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playercreateinfo;
        T& operator()() { return playercreateinfo; }
        const T& operator()() const { return playercreateinfo; }
      };
    };
  };
  namespace PlayercreateinfoAction_
  {
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Button
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "button";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T button;
            T& operator()() { return button; }
            const T& operator()() const { return button; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Action
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T action;
            T& operator()() { return action; }
            const T& operator()() const { return action; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
  }

  struct PlayercreateinfoAction: sqlpp::table_t<PlayercreateinfoAction,
               PlayercreateinfoAction_::Race,
               PlayercreateinfoAction_::Class,
               PlayercreateinfoAction_::Button,
               PlayercreateinfoAction_::Action,
               PlayercreateinfoAction_::Type>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "playercreateinfo_action";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playercreateinfoAction;
        T& operator()() { return playercreateinfoAction; }
        const T& operator()() const { return playercreateinfoAction; }
      };
    };
  };
  namespace PlayercreateinfoCastSpell_
  {
    struct RaceMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "raceMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raceMask;
            T& operator()() { return raceMask; }
            const T& operator()() const { return raceMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ClassMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "classMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classMask;
            T& operator()() { return classMask; }
            const T& operator()() const { return classMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T note;
            T& operator()() { return note; }
            const T& operator()() const { return note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PlayercreateinfoCastSpell: sqlpp::table_t<PlayercreateinfoCastSpell,
               PlayercreateinfoCastSpell_::RaceMask,
               PlayercreateinfoCastSpell_::ClassMask,
               PlayercreateinfoCastSpell_::Spell,
               PlayercreateinfoCastSpell_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "playercreateinfo_cast_spell";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playercreateinfoCastSpell;
        T& operator()() { return playercreateinfoCastSpell; }
        const T& operator()() const { return playercreateinfoCastSpell; }
      };
    };
  };
  namespace PlayercreateinfoItem_
  {
    struct Race
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "race";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T race;
            T& operator()() { return race; }
            const T& operator()() const { return race; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Class
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "class";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T class_;
            T& operator()() { return class_; }
            const T& operator()() const { return class_; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Itemid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "itemid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemid;
            T& operator()() { return itemid; }
            const T& operator()() const { return itemid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T amount;
            T& operator()() { return amount; }
            const T& operator()() const { return amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct PlayercreateinfoItem: sqlpp::table_t<PlayercreateinfoItem,
               PlayercreateinfoItem_::Race,
               PlayercreateinfoItem_::Class,
               PlayercreateinfoItem_::Itemid,
               PlayercreateinfoItem_::Amount>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "playercreateinfo_item";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playercreateinfoItem;
        T& operator()() { return playercreateinfoItem; }
        const T& operator()() const { return playercreateinfoItem; }
      };
    };
  };
  namespace PlayercreateinfoSpellCustom_
  {
    struct Racemask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "racemask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T racemask;
            T& operator()() { return racemask; }
            const T& operator()() const { return racemask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Classmask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "classmask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T classmask;
            T& operator()() { return classmask; }
            const T& operator()() const { return classmask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Spell;
            T& operator()() { return Spell; }
            const T& operator()() const { return Spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Note
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Note";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Note;
            T& operator()() { return Note; }
            const T& operator()() const { return Note; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PlayercreateinfoSpellCustom: sqlpp::table_t<PlayercreateinfoSpellCustom,
               PlayercreateinfoSpellCustom_::Racemask,
               PlayercreateinfoSpellCustom_::Classmask,
               PlayercreateinfoSpellCustom_::Spell,
               PlayercreateinfoSpellCustom_::Note>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "playercreateinfo_spell_custom";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T playercreateinfoSpellCustom;
        T& operator()() { return playercreateinfoSpellCustom; }
        const T& operator()() const { return playercreateinfoSpellCustom; }
      };
    };
  };
  namespace PointsOfInterest_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PositionX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PositionX;
            T& operator()() { return PositionX; }
            const T& operator()() const { return PositionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PositionY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PositionY;
            T& operator()() { return PositionY; }
            const T& operator()() const { return PositionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Icon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Icon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Icon;
            T& operator()() { return Icon; }
            const T& operator()() const { return Icon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Importance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Importance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Importance;
            T& operator()() { return Importance; }
            const T& operator()() const { return Importance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Name;
            T& operator()() { return Name; }
            const T& operator()() const { return Name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct PointsOfInterest: sqlpp::table_t<PointsOfInterest,
               PointsOfInterest_::ID,
               PointsOfInterest_::PositionX,
               PointsOfInterest_::PositionY,
               PointsOfInterest_::Icon,
               PointsOfInterest_::Flags,
               PointsOfInterest_::Importance,
               PointsOfInterest_::Name,
               PointsOfInterest_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "points_of_interest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pointsOfInterest;
        T& operator()() { return pointsOfInterest; }
        const T& operator()() const { return pointsOfInterest; }
      };
    };
  };
  namespace PointsOfInterestLocale_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Name;
            T& operator()() { return Name; }
            const T& operator()() const { return Name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct PointsOfInterestLocale: sqlpp::table_t<PointsOfInterestLocale,
               PointsOfInterestLocale_::ID,
               PointsOfInterestLocale_::Locale,
               PointsOfInterestLocale_::Name,
               PointsOfInterestLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "points_of_interest_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T pointsOfInterestLocale;
        T& operator()() { return pointsOfInterestLocale; }
        const T& operator()() const { return pointsOfInterestLocale; }
      };
    };
  };
  namespace PoolCreature_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct PoolEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pool_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolEntry;
            T& operator()() { return poolEntry; }
            const T& operator()() const { return poolEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PoolCreature: sqlpp::table_t<PoolCreature,
               PoolCreature_::Guid,
               PoolCreature_::PoolEntry,
               PoolCreature_::Chance,
               PoolCreature_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_creature";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolCreature;
        T& operator()() { return poolCreature; }
        const T& operator()() const { return poolCreature; }
      };
    };
  };
  namespace PoolGameobject_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct PoolEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pool_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolEntry;
            T& operator()() { return poolEntry; }
            const T& operator()() const { return poolEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PoolGameobject: sqlpp::table_t<PoolGameobject,
               PoolGameobject_::Guid,
               PoolGameobject_::PoolEntry,
               PoolGameobject_::Chance,
               PoolGameobject_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_gameobject";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolGameobject;
        T& operator()() { return poolGameobject; }
        const T& operator()() const { return poolGameobject; }
      };
    };
  };
  namespace PoolPool_
  {
    struct PoolId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pool_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolId;
            T& operator()() { return poolId; }
            const T& operator()() const { return poolId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MotherPool
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mother_pool";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T motherPool;
            T& operator()() { return motherPool; }
            const T& operator()() const { return motherPool; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PoolPool: sqlpp::table_t<PoolPool,
               PoolPool_::PoolId,
               PoolPool_::MotherPool,
               PoolPool_::Chance,
               PoolPool_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_pool";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolPool;
        T& operator()() { return poolPool; }
        const T& operator()() const { return poolPool; }
      };
    };
  };
  namespace PoolQuest_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PoolEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pool_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T poolEntry;
            T& operator()() { return poolEntry; }
            const T& operator()() const { return poolEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PoolQuest: sqlpp::table_t<PoolQuest,
               PoolQuest_::Entry,
               PoolQuest_::PoolEntry,
               PoolQuest_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_quest";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolQuest;
        T& operator()() { return poolQuest; }
        const T& operator()() const { return poolQuest; }
      };
    };
  };
  namespace PoolTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxLimit
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "max_limit";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxLimit;
            T& operator()() { return maxLimit; }
            const T& operator()() const { return maxLimit; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct PoolTemplate: sqlpp::table_t<PoolTemplate,
               PoolTemplate_::Entry,
               PoolTemplate_::MaxLimit,
               PoolTemplate_::Description>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "pool_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T poolTemplate;
        T& operator()() { return poolTemplate; }
        const T& operator()() const { return poolTemplate; }
      };
    };
  };
  namespace ProspectingLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct ProspectingLootTemplate: sqlpp::table_t<ProspectingLootTemplate,
               ProspectingLootTemplate_::Entry,
               ProspectingLootTemplate_::Item,
               ProspectingLootTemplate_::Reference,
               ProspectingLootTemplate_::Chance,
               ProspectingLootTemplate_::QuestRequired,
               ProspectingLootTemplate_::LootMode,
               ProspectingLootTemplate_::GroupId,
               ProspectingLootTemplate_::MinCount,
               ProspectingLootTemplate_::MaxCount,
               ProspectingLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "prospecting_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T prospectingLootTemplate;
        T& operator()() { return prospectingLootTemplate; }
        const T& operator()() const { return prospectingLootTemplate; }
      };
    };
  };
  namespace QuestDetails_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Emote1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote1;
            T& operator()() { return Emote1; }
            const T& operator()() const { return Emote1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote2;
            T& operator()() { return Emote2; }
            const T& operator()() const { return Emote2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote3;
            T& operator()() { return Emote3; }
            const T& operator()() const { return Emote3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote4;
            T& operator()() { return Emote4; }
            const T& operator()() const { return Emote4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EmoteDelay1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay1;
            T& operator()() { return EmoteDelay1; }
            const T& operator()() const { return EmoteDelay1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay2;
            T& operator()() { return EmoteDelay2; }
            const T& operator()() const { return EmoteDelay2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay3;
            T& operator()() { return EmoteDelay3; }
            const T& operator()() const { return EmoteDelay3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay4;
            T& operator()() { return EmoteDelay4; }
            const T& operator()() const { return EmoteDelay4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestDetails: sqlpp::table_t<QuestDetails,
               QuestDetails_::ID,
               QuestDetails_::Emote1,
               QuestDetails_::Emote2,
               QuestDetails_::Emote3,
               QuestDetails_::Emote4,
               QuestDetails_::EmoteDelay1,
               QuestDetails_::EmoteDelay2,
               QuestDetails_::EmoteDelay3,
               QuestDetails_::EmoteDelay4,
               QuestDetails_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_details";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questDetails;
        T& operator()() { return questDetails; }
        const T& operator()() const { return questDetails; }
      };
    };
  };
  namespace QuestGreeting_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Type;
            T& operator()() { return Type; }
            const T& operator()() const { return Type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct GreetEmoteType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GreetEmoteType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GreetEmoteType;
            T& operator()() { return GreetEmoteType; }
            const T& operator()() const { return GreetEmoteType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GreetEmoteDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GreetEmoteDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GreetEmoteDelay;
            T& operator()() { return GreetEmoteDelay; }
            const T& operator()() const { return GreetEmoteDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Greeting
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Greeting";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Greeting;
            T& operator()() { return Greeting; }
            const T& operator()() const { return Greeting; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestGreeting: sqlpp::table_t<QuestGreeting,
               QuestGreeting_::ID,
               QuestGreeting_::Type,
               QuestGreeting_::GreetEmoteType,
               QuestGreeting_::GreetEmoteDelay,
               QuestGreeting_::Greeting,
               QuestGreeting_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_greeting";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questGreeting;
        T& operator()() { return questGreeting; }
        const T& operator()() const { return questGreeting; }
      };
    };
  };
  namespace QuestObjectives_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestID;
            T& operator()() { return QuestID; }
            const T& operator()() const { return QuestID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Type;
            T& operator()() { return Type; }
            const T& operator()() const { return Type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct StorageIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "StorageIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T StorageIndex;
            T& operator()() { return StorageIndex; }
            const T& operator()() const { return StorageIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct ObjectID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ObjectID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ObjectID;
            T& operator()() { return ObjectID; }
            const T& operator()() const { return ObjectID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Amount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Amount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Amount;
            T& operator()() { return Amount; }
            const T& operator()() const { return Amount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Flags2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags2;
            T& operator()() { return Flags2; }
            const T& operator()() const { return Flags2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ProgressBarWeight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ProgressBarWeight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ProgressBarWeight;
            T& operator()() { return ProgressBarWeight; }
            const T& operator()() const { return ProgressBarWeight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Description;
            T& operator()() { return Description; }
            const T& operator()() const { return Description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestObjectives: sqlpp::table_t<QuestObjectives,
               QuestObjectives_::ID,
               QuestObjectives_::QuestID,
               QuestObjectives_::Type,
               QuestObjectives_::StorageIndex,
               QuestObjectives_::ObjectID,
               QuestObjectives_::Amount,
               QuestObjectives_::Flags,
               QuestObjectives_::Flags2,
               QuestObjectives_::ProgressBarWeight,
               QuestObjectives_::Description,
               QuestObjectives_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_objectives";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questObjectives;
        T& operator()() { return questObjectives; }
        const T& operator()() const { return questObjectives; }
      };
    };
  };
  namespace QuestObjectivesLocale_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct QuestId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestId;
            T& operator()() { return QuestId; }
            const T& operator()() const { return QuestId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct StorageIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "StorageIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T StorageIndex;
            T& operator()() { return StorageIndex; }
            const T& operator()() const { return StorageIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Description;
            T& operator()() { return Description; }
            const T& operator()() const { return Description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct QuestObjectivesLocale: sqlpp::table_t<QuestObjectivesLocale,
               QuestObjectivesLocale_::ID,
               QuestObjectivesLocale_::Locale,
               QuestObjectivesLocale_::QuestId,
               QuestObjectivesLocale_::StorageIndex,
               QuestObjectivesLocale_::Description,
               QuestObjectivesLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_objectives_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questObjectivesLocale;
        T& operator()() { return questObjectivesLocale; }
        const T& operator()() const { return questObjectivesLocale; }
      };
    };
  };
  namespace QuestOfferReward_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Emote1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote1;
            T& operator()() { return Emote1; }
            const T& operator()() const { return Emote1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote2;
            T& operator()() { return Emote2; }
            const T& operator()() const { return Emote2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote3;
            T& operator()() { return Emote3; }
            const T& operator()() const { return Emote3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Emote4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Emote4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Emote4;
            T& operator()() { return Emote4; }
            const T& operator()() const { return Emote4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EmoteDelay1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay1;
            T& operator()() { return EmoteDelay1; }
            const T& operator()() const { return EmoteDelay1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay2;
            T& operator()() { return EmoteDelay2; }
            const T& operator()() const { return EmoteDelay2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay3;
            T& operator()() { return EmoteDelay3; }
            const T& operator()() const { return EmoteDelay3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteDelay4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteDelay4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteDelay4;
            T& operator()() { return EmoteDelay4; }
            const T& operator()() const { return EmoteDelay4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardText;
            T& operator()() { return RewardText; }
            const T& operator()() const { return RewardText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestOfferReward: sqlpp::table_t<QuestOfferReward,
               QuestOfferReward_::ID,
               QuestOfferReward_::Emote1,
               QuestOfferReward_::Emote2,
               QuestOfferReward_::Emote3,
               QuestOfferReward_::Emote4,
               QuestOfferReward_::EmoteDelay1,
               QuestOfferReward_::EmoteDelay2,
               QuestOfferReward_::EmoteDelay3,
               QuestOfferReward_::EmoteDelay4,
               QuestOfferReward_::RewardText,
               QuestOfferReward_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_offer_reward";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questOfferReward;
        T& operator()() { return questOfferReward; }
        const T& operator()() const { return questOfferReward; }
      };
    };
  };
  namespace QuestPoi_
  {
    struct QuestID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestID;
            T& operator()() { return QuestID; }
            const T& operator()() const { return QuestID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BlobIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BlobIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BlobIndex;
            T& operator()() { return BlobIndex; }
            const T& operator()() const { return BlobIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx1;
            T& operator()() { return Idx1; }
            const T& operator()() const { return Idx1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ObjectiveIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ObjectiveIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ObjectiveIndex;
            T& operator()() { return ObjectiveIndex; }
            const T& operator()() const { return ObjectiveIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestObjectiveID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestObjectiveID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestObjectiveID;
            T& operator()() { return QuestObjectiveID; }
            const T& operator()() const { return QuestObjectiveID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestObjectID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestObjectID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestObjectID;
            T& operator()() { return QuestObjectID; }
            const T& operator()() const { return QuestObjectID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MapID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MapID;
            T& operator()() { return MapID; }
            const T& operator()() const { return MapID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WorldMapAreaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WorldMapAreaId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WorldMapAreaId;
            T& operator()() { return WorldMapAreaId; }
            const T& operator()() const { return WorldMapAreaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Floor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Floor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Floor;
            T& operator()() { return Floor; }
            const T& operator()() const { return Floor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Priority
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Priority";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Priority;
            T& operator()() { return Priority; }
            const T& operator()() const { return Priority; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WorldEffectID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WorldEffectID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WorldEffectID;
            T& operator()() { return WorldEffectID; }
            const T& operator()() const { return WorldEffectID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PlayerConditionID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PlayerConditionID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerConditionID;
            T& operator()() { return PlayerConditionID; }
            const T& operator()() const { return PlayerConditionID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WoDUnk1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WoDUnk1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WoDUnk1;
            T& operator()() { return WoDUnk1; }
            const T& operator()() const { return WoDUnk1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct QuestPoi: sqlpp::table_t<QuestPoi,
               QuestPoi_::QuestID,
               QuestPoi_::BlobIndex,
               QuestPoi_::Idx1,
               QuestPoi_::ObjectiveIndex,
               QuestPoi_::QuestObjectiveID,
               QuestPoi_::QuestObjectID,
               QuestPoi_::MapID,
               QuestPoi_::WorldMapAreaId,
               QuestPoi_::Floor,
               QuestPoi_::Priority,
               QuestPoi_::Flags,
               QuestPoi_::WorldEffectID,
               QuestPoi_::PlayerConditionID,
               QuestPoi_::WoDUnk1,
               QuestPoi_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_poi";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questPoi;
        T& operator()() { return questPoi; }
        const T& operator()() const { return questPoi; }
      };
    };
  };
  namespace QuestPoiPoints_
  {
    struct QuestID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestID;
            T& operator()() { return QuestID; }
            const T& operator()() const { return QuestID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx1;
            T& operator()() { return Idx1; }
            const T& operator()() const { return Idx1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx2;
            T& operator()() { return Idx2; }
            const T& operator()() const { return Idx2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "X";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T X;
            T& operator()() { return X; }
            const T& operator()() const { return X; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Y;
            T& operator()() { return Y; }
            const T& operator()() const { return Y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct QuestPoiPoints: sqlpp::table_t<QuestPoiPoints,
               QuestPoiPoints_::QuestID,
               QuestPoiPoints_::Idx1,
               QuestPoiPoints_::Idx2,
               QuestPoiPoints_::X,
               QuestPoiPoints_::Y,
               QuestPoiPoints_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_poi_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questPoiPoints;
        T& operator()() { return questPoiPoints; }
        const T& operator()() const { return questPoiPoints; }
      };
    };
  };
  namespace QuestRequestItems_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteOnComplete
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteOnComplete";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteOnComplete;
            T& operator()() { return EmoteOnComplete; }
            const T& operator()() const { return EmoteOnComplete; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EmoteOnIncomplete
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteOnIncomplete";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteOnIncomplete;
            T& operator()() { return EmoteOnIncomplete; }
            const T& operator()() const { return EmoteOnIncomplete; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EmoteOnCompleteDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteOnCompleteDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteOnCompleteDelay;
            T& operator()() { return EmoteOnCompleteDelay; }
            const T& operator()() const { return EmoteOnCompleteDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EmoteOnIncompleteDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EmoteOnIncompleteDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EmoteOnIncompleteDelay;
            T& operator()() { return EmoteOnIncompleteDelay; }
            const T& operator()() const { return EmoteOnIncompleteDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CompletionText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CompletionText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CompletionText;
            T& operator()() { return CompletionText; }
            const T& operator()() const { return CompletionText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestRequestItems: sqlpp::table_t<QuestRequestItems,
               QuestRequestItems_::ID,
               QuestRequestItems_::EmoteOnComplete,
               QuestRequestItems_::EmoteOnIncomplete,
               QuestRequestItems_::EmoteOnCompleteDelay,
               QuestRequestItems_::EmoteOnIncompleteDelay,
               QuestRequestItems_::CompletionText,
               QuestRequestItems_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_request_items";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questRequestItems;
        T& operator()() { return questRequestItems; }
        const T& operator()() const { return questRequestItems; }
      };
    };
  };
  namespace QuestTemplate_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestType;
            T& operator()() { return QuestType; }
            const T& operator()() const { return QuestType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct QuestLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestLevel;
            T& operator()() { return QuestLevel; }
            const T& operator()() const { return QuestLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestPackageID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestPackageID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestPackageID;
            T& operator()() { return QuestPackageID; }
            const T& operator()() const { return QuestPackageID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MinLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinLevel;
            T& operator()() { return MinLevel; }
            const T& operator()() const { return MinLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestSortID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestSortID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestSortID;
            T& operator()() { return QuestSortID; }
            const T& operator()() const { return QuestSortID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct QuestInfoID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestInfoID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestInfoID;
            T& operator()() { return QuestInfoID; }
            const T& operator()() const { return QuestInfoID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SuggestedGroupNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SuggestedGroupNum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SuggestedGroupNum;
            T& operator()() { return SuggestedGroupNum; }
            const T& operator()() const { return SuggestedGroupNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct RewardNextQuest
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardNextQuest";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardNextQuest;
            T& operator()() { return RewardNextQuest; }
            const T& operator()() const { return RewardNextQuest; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardXPDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardXPDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardXPDifficulty;
            T& operator()() { return RewardXPDifficulty; }
            const T& operator()() const { return RewardXPDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardXPMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardXPMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardXPMultiplier;
            T& operator()() { return RewardXPMultiplier; }
            const T& operator()() const { return RewardXPMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RewardMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardMoney;
            T& operator()() { return RewardMoney; }
            const T& operator()() const { return RewardMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardMoneyDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardMoneyDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardMoneyDifficulty;
            T& operator()() { return RewardMoneyDifficulty; }
            const T& operator()() const { return RewardMoneyDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardMoneyMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardMoneyMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardMoneyMultiplier;
            T& operator()() { return RewardMoneyMultiplier; }
            const T& operator()() const { return RewardMoneyMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RewardBonusMoney
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardBonusMoney";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardBonusMoney;
            T& operator()() { return RewardBonusMoney; }
            const T& operator()() const { return RewardBonusMoney; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardDisplaySpell1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardDisplaySpell1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardDisplaySpell1;
            T& operator()() { return RewardDisplaySpell1; }
            const T& operator()() const { return RewardDisplaySpell1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardDisplaySpell2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardDisplaySpell2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardDisplaySpell2;
            T& operator()() { return RewardDisplaySpell2; }
            const T& operator()() const { return RewardDisplaySpell2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardDisplaySpell3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardDisplaySpell3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardDisplaySpell3;
            T& operator()() { return RewardDisplaySpell3; }
            const T& operator()() const { return RewardDisplaySpell3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardSpell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardSpell;
            T& operator()() { return RewardSpell; }
            const T& operator()() const { return RewardSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardHonor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardHonor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardHonor;
            T& operator()() { return RewardHonor; }
            const T& operator()() const { return RewardHonor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardKillHonor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardKillHonor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardKillHonor;
            T& operator()() { return RewardKillHonor; }
            const T& operator()() const { return RewardKillHonor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct StartItem
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "StartItem";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T StartItem;
            T& operator()() { return StartItem; }
            const T& operator()() const { return StartItem; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardArtifactXPDifficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardArtifactXPDifficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardArtifactXPDifficulty;
            T& operator()() { return RewardArtifactXPDifficulty; }
            const T& operator()() const { return RewardArtifactXPDifficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardArtifactXPMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardArtifactXPMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardArtifactXPMultiplier;
            T& operator()() { return RewardArtifactXPMultiplier; }
            const T& operator()() const { return RewardArtifactXPMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct RewardArtifactCategoryID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardArtifactCategoryID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardArtifactCategoryID;
            T& operator()() { return RewardArtifactCategoryID; }
            const T& operator()() const { return RewardArtifactCategoryID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct FlagsEx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "FlagsEx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T FlagsEx;
            T& operator()() { return FlagsEx; }
            const T& operator()() const { return FlagsEx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardItem1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardItem1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardItem1;
            T& operator()() { return RewardItem1; }
            const T& operator()() const { return RewardItem1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardAmount1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardAmount1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardAmount1;
            T& operator()() { return RewardAmount1; }
            const T& operator()() const { return RewardAmount1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardItem2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardItem2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardItem2;
            T& operator()() { return RewardItem2; }
            const T& operator()() const { return RewardItem2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardAmount2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardAmount2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardAmount2;
            T& operator()() { return RewardAmount2; }
            const T& operator()() const { return RewardAmount2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardItem3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardItem3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardItem3;
            T& operator()() { return RewardItem3; }
            const T& operator()() const { return RewardItem3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardAmount3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardAmount3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardAmount3;
            T& operator()() { return RewardAmount3; }
            const T& operator()() const { return RewardAmount3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardItem4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardItem4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardItem4;
            T& operator()() { return RewardItem4; }
            const T& operator()() const { return RewardItem4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardAmount4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardAmount4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardAmount4;
            T& operator()() { return RewardAmount4; }
            const T& operator()() const { return RewardAmount4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDrop1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDrop1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDrop1;
            T& operator()() { return ItemDrop1; }
            const T& operator()() const { return ItemDrop1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDropQuantity1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDropQuantity1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDropQuantity1;
            T& operator()() { return ItemDropQuantity1; }
            const T& operator()() const { return ItemDropQuantity1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDrop2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDrop2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDrop2;
            T& operator()() { return ItemDrop2; }
            const T& operator()() const { return ItemDrop2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDropQuantity2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDropQuantity2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDropQuantity2;
            T& operator()() { return ItemDropQuantity2; }
            const T& operator()() const { return ItemDropQuantity2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDrop3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDrop3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDrop3;
            T& operator()() { return ItemDrop3; }
            const T& operator()() const { return ItemDrop3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDropQuantity3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDropQuantity3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDropQuantity3;
            T& operator()() { return ItemDropQuantity3; }
            const T& operator()() const { return ItemDropQuantity3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDrop4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDrop4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDrop4;
            T& operator()() { return ItemDrop4; }
            const T& operator()() const { return ItemDrop4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ItemDropQuantity4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ItemDropQuantity4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ItemDropQuantity4;
            T& operator()() { return ItemDropQuantity4; }
            const T& operator()() const { return ItemDropQuantity4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID1;
            T& operator()() { return RewardChoiceItemID1; }
            const T& operator()() const { return RewardChoiceItemID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity1;
            T& operator()() { return RewardChoiceItemQuantity1; }
            const T& operator()() const { return RewardChoiceItemQuantity1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID1;
            T& operator()() { return RewardChoiceItemDisplayID1; }
            const T& operator()() const { return RewardChoiceItemDisplayID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID2;
            T& operator()() { return RewardChoiceItemID2; }
            const T& operator()() const { return RewardChoiceItemID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity2;
            T& operator()() { return RewardChoiceItemQuantity2; }
            const T& operator()() const { return RewardChoiceItemQuantity2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID2;
            T& operator()() { return RewardChoiceItemDisplayID2; }
            const T& operator()() const { return RewardChoiceItemDisplayID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID3;
            T& operator()() { return RewardChoiceItemID3; }
            const T& operator()() const { return RewardChoiceItemID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity3;
            T& operator()() { return RewardChoiceItemQuantity3; }
            const T& operator()() const { return RewardChoiceItemQuantity3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID3;
            T& operator()() { return RewardChoiceItemDisplayID3; }
            const T& operator()() const { return RewardChoiceItemDisplayID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID4;
            T& operator()() { return RewardChoiceItemID4; }
            const T& operator()() const { return RewardChoiceItemID4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity4;
            T& operator()() { return RewardChoiceItemQuantity4; }
            const T& operator()() const { return RewardChoiceItemQuantity4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID4;
            T& operator()() { return RewardChoiceItemDisplayID4; }
            const T& operator()() const { return RewardChoiceItemDisplayID4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID5;
            T& operator()() { return RewardChoiceItemID5; }
            const T& operator()() const { return RewardChoiceItemID5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity5;
            T& operator()() { return RewardChoiceItemQuantity5; }
            const T& operator()() const { return RewardChoiceItemQuantity5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID5;
            T& operator()() { return RewardChoiceItemDisplayID5; }
            const T& operator()() const { return RewardChoiceItemDisplayID5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemID6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemID6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemID6;
            T& operator()() { return RewardChoiceItemID6; }
            const T& operator()() const { return RewardChoiceItemID6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemQuantity6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemQuantity6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemQuantity6;
            T& operator()() { return RewardChoiceItemQuantity6; }
            const T& operator()() const { return RewardChoiceItemQuantity6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardChoiceItemDisplayID6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardChoiceItemDisplayID6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardChoiceItemDisplayID6;
            T& operator()() { return RewardChoiceItemDisplayID6; }
            const T& operator()() const { return RewardChoiceItemDisplayID6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct POIContinent
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "POIContinent";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T POIContinent;
            T& operator()() { return POIContinent; }
            const T& operator()() const { return POIContinent; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct POIx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "POIx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T POIx;
            T& operator()() { return POIx; }
            const T& operator()() const { return POIx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct POIy
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "POIy";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T POIy;
            T& operator()() { return POIy; }
            const T& operator()() const { return POIy; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct POIPriority
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "POIPriority";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T POIPriority;
            T& operator()() { return POIPriority; }
            const T& operator()() const { return POIPriority; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardTitle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardTitle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardTitle;
            T& operator()() { return RewardTitle; }
            const T& operator()() const { return RewardTitle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardArenaPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardArenaPoints";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardArenaPoints;
            T& operator()() { return RewardArenaPoints; }
            const T& operator()() const { return RewardArenaPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardSkillLineID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardSkillLineID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardSkillLineID;
            T& operator()() { return RewardSkillLineID; }
            const T& operator()() const { return RewardSkillLineID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardNumSkillUps
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardNumSkillUps";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardNumSkillUps;
            T& operator()() { return RewardNumSkillUps; }
            const T& operator()() const { return RewardNumSkillUps; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PortraitGiver
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitGiver";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitGiver;
            T& operator()() { return PortraitGiver; }
            const T& operator()() const { return PortraitGiver; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PortraitTurnIn
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitTurnIn";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitTurnIn;
            T& operator()() { return PortraitTurnIn; }
            const T& operator()() const { return PortraitTurnIn; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionID1;
            T& operator()() { return RewardFactionID1; }
            const T& operator()() const { return RewardFactionID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionValue1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionValue1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionValue1;
            T& operator()() { return RewardFactionValue1; }
            const T& operator()() const { return RewardFactionValue1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionOverride1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionOverride1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionOverride1;
            T& operator()() { return RewardFactionOverride1; }
            const T& operator()() const { return RewardFactionOverride1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionCapIn1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionCapIn1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionCapIn1;
            T& operator()() { return RewardFactionCapIn1; }
            const T& operator()() const { return RewardFactionCapIn1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionID2;
            T& operator()() { return RewardFactionID2; }
            const T& operator()() const { return RewardFactionID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionValue2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionValue2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionValue2;
            T& operator()() { return RewardFactionValue2; }
            const T& operator()() const { return RewardFactionValue2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionOverride2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionOverride2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionOverride2;
            T& operator()() { return RewardFactionOverride2; }
            const T& operator()() const { return RewardFactionOverride2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionCapIn2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionCapIn2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionCapIn2;
            T& operator()() { return RewardFactionCapIn2; }
            const T& operator()() const { return RewardFactionCapIn2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionID3;
            T& operator()() { return RewardFactionID3; }
            const T& operator()() const { return RewardFactionID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionValue3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionValue3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionValue3;
            T& operator()() { return RewardFactionValue3; }
            const T& operator()() const { return RewardFactionValue3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionOverride3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionOverride3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionOverride3;
            T& operator()() { return RewardFactionOverride3; }
            const T& operator()() const { return RewardFactionOverride3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionCapIn3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionCapIn3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionCapIn3;
            T& operator()() { return RewardFactionCapIn3; }
            const T& operator()() const { return RewardFactionCapIn3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionID4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionID4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionID4;
            T& operator()() { return RewardFactionID4; }
            const T& operator()() const { return RewardFactionID4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionValue4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionValue4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionValue4;
            T& operator()() { return RewardFactionValue4; }
            const T& operator()() const { return RewardFactionValue4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionOverride4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionOverride4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionOverride4;
            T& operator()() { return RewardFactionOverride4; }
            const T& operator()() const { return RewardFactionOverride4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionCapIn4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionCapIn4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionCapIn4;
            T& operator()() { return RewardFactionCapIn4; }
            const T& operator()() const { return RewardFactionCapIn4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionID5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionID5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionID5;
            T& operator()() { return RewardFactionID5; }
            const T& operator()() const { return RewardFactionID5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionValue5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionValue5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionValue5;
            T& operator()() { return RewardFactionValue5; }
            const T& operator()() const { return RewardFactionValue5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionOverride5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionOverride5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionOverride5;
            T& operator()() { return RewardFactionOverride5; }
            const T& operator()() const { return RewardFactionOverride5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardFactionCapIn5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionCapIn5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionCapIn5;
            T& operator()() { return RewardFactionCapIn5; }
            const T& operator()() const { return RewardFactionCapIn5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardFactionFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardFactionFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardFactionFlags;
            T& operator()() { return RewardFactionFlags; }
            const T& operator()() const { return RewardFactionFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyID1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyID1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyID1;
            T& operator()() { return RewardCurrencyID1; }
            const T& operator()() const { return RewardCurrencyID1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyQty1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyQty1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyQty1;
            T& operator()() { return RewardCurrencyQty1; }
            const T& operator()() const { return RewardCurrencyQty1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyID2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyID2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyID2;
            T& operator()() { return RewardCurrencyID2; }
            const T& operator()() const { return RewardCurrencyID2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyQty2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyQty2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyQty2;
            T& operator()() { return RewardCurrencyQty2; }
            const T& operator()() const { return RewardCurrencyQty2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyID3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyID3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyID3;
            T& operator()() { return RewardCurrencyID3; }
            const T& operator()() const { return RewardCurrencyID3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyQty3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyQty3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyQty3;
            T& operator()() { return RewardCurrencyQty3; }
            const T& operator()() const { return RewardCurrencyQty3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyID4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyID4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyID4;
            T& operator()() { return RewardCurrencyID4; }
            const T& operator()() const { return RewardCurrencyID4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardCurrencyQty4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardCurrencyQty4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardCurrencyQty4;
            T& operator()() { return RewardCurrencyQty4; }
            const T& operator()() const { return RewardCurrencyQty4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AcceptedSoundKitID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AcceptedSoundKitID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AcceptedSoundKitID;
            T& operator()() { return AcceptedSoundKitID; }
            const T& operator()() const { return AcceptedSoundKitID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CompleteSoundKitID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CompleteSoundKitID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CompleteSoundKitID;
            T& operator()() { return CompleteSoundKitID; }
            const T& operator()() const { return CompleteSoundKitID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AreaGroupID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AreaGroupID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AreaGroupID;
            T& operator()() { return AreaGroupID; }
            const T& operator()() const { return AreaGroupID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TimeAllowed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TimeAllowed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TimeAllowed;
            T& operator()() { return TimeAllowed; }
            const T& operator()() const { return TimeAllowed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AllowableRaces
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AllowableRaces";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AllowableRaces;
            T& operator()() { return AllowableRaces; }
            const T& operator()() const { return AllowableRaces; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestRewardID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRewardID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRewardID;
            T& operator()() { return QuestRewardID; }
            const T& operator()() const { return QuestRewardID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LogTitle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LogTitle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogTitle;
            T& operator()() { return LogTitle; }
            const T& operator()() const { return LogTitle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct LogDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LogDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogDescription;
            T& operator()() { return LogDescription; }
            const T& operator()() const { return LogDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct QuestDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestDescription;
            T& operator()() { return QuestDescription; }
            const T& operator()() const { return QuestDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AreaDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AreaDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AreaDescription;
            T& operator()() { return AreaDescription; }
            const T& operator()() const { return AreaDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitGiverText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitGiverText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitGiverText;
            T& operator()() { return PortraitGiverText; }
            const T& operator()() const { return PortraitGiverText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitGiverName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitGiverName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitGiverName;
            T& operator()() { return PortraitGiverName; }
            const T& operator()() const { return PortraitGiverName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitTurnInText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitTurnInText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitTurnInText;
            T& operator()() { return PortraitTurnInText; }
            const T& operator()() const { return PortraitTurnInText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitTurnInName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitTurnInName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitTurnInName;
            T& operator()() { return PortraitTurnInName; }
            const T& operator()() const { return PortraitTurnInName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct QuestCompletionLog
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestCompletionLog";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestCompletionLog;
            T& operator()() { return QuestCompletionLog; }
            const T& operator()() const { return QuestCompletionLog; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct QuestTemplate: sqlpp::table_t<QuestTemplate,
               QuestTemplate_::ID,
               QuestTemplate_::QuestType,
               QuestTemplate_::QuestLevel,
               QuestTemplate_::QuestPackageID,
               QuestTemplate_::MinLevel,
               QuestTemplate_::QuestSortID,
               QuestTemplate_::QuestInfoID,
               QuestTemplate_::SuggestedGroupNum,
               QuestTemplate_::RewardNextQuest,
               QuestTemplate_::RewardXPDifficulty,
               QuestTemplate_::RewardXPMultiplier,
               QuestTemplate_::RewardMoney,
               QuestTemplate_::RewardMoneyDifficulty,
               QuestTemplate_::RewardMoneyMultiplier,
               QuestTemplate_::RewardBonusMoney,
               QuestTemplate_::RewardDisplaySpell1,
               QuestTemplate_::RewardDisplaySpell2,
               QuestTemplate_::RewardDisplaySpell3,
               QuestTemplate_::RewardSpell,
               QuestTemplate_::RewardHonor,
               QuestTemplate_::RewardKillHonor,
               QuestTemplate_::StartItem,
               QuestTemplate_::RewardArtifactXPDifficulty,
               QuestTemplate_::RewardArtifactXPMultiplier,
               QuestTemplate_::RewardArtifactCategoryID,
               QuestTemplate_::Flags,
               QuestTemplate_::FlagsEx,
               QuestTemplate_::RewardItem1,
               QuestTemplate_::RewardAmount1,
               QuestTemplate_::RewardItem2,
               QuestTemplate_::RewardAmount2,
               QuestTemplate_::RewardItem3,
               QuestTemplate_::RewardAmount3,
               QuestTemplate_::RewardItem4,
               QuestTemplate_::RewardAmount4,
               QuestTemplate_::ItemDrop1,
               QuestTemplate_::ItemDropQuantity1,
               QuestTemplate_::ItemDrop2,
               QuestTemplate_::ItemDropQuantity2,
               QuestTemplate_::ItemDrop3,
               QuestTemplate_::ItemDropQuantity3,
               QuestTemplate_::ItemDrop4,
               QuestTemplate_::ItemDropQuantity4,
               QuestTemplate_::RewardChoiceItemID1,
               QuestTemplate_::RewardChoiceItemQuantity1,
               QuestTemplate_::RewardChoiceItemDisplayID1,
               QuestTemplate_::RewardChoiceItemID2,
               QuestTemplate_::RewardChoiceItemQuantity2,
               QuestTemplate_::RewardChoiceItemDisplayID2,
               QuestTemplate_::RewardChoiceItemID3,
               QuestTemplate_::RewardChoiceItemQuantity3,
               QuestTemplate_::RewardChoiceItemDisplayID3,
               QuestTemplate_::RewardChoiceItemID4,
               QuestTemplate_::RewardChoiceItemQuantity4,
               QuestTemplate_::RewardChoiceItemDisplayID4,
               QuestTemplate_::RewardChoiceItemID5,
               QuestTemplate_::RewardChoiceItemQuantity5,
               QuestTemplate_::RewardChoiceItemDisplayID5,
               QuestTemplate_::RewardChoiceItemID6,
               QuestTemplate_::RewardChoiceItemQuantity6,
               QuestTemplate_::RewardChoiceItemDisplayID6,
               QuestTemplate_::POIContinent,
               QuestTemplate_::POIx,
               QuestTemplate_::POIy,
               QuestTemplate_::POIPriority,
               QuestTemplate_::RewardTitle,
               QuestTemplate_::RewardArenaPoints,
               QuestTemplate_::RewardSkillLineID,
               QuestTemplate_::RewardNumSkillUps,
               QuestTemplate_::PortraitGiver,
               QuestTemplate_::PortraitTurnIn,
               QuestTemplate_::RewardFactionID1,
               QuestTemplate_::RewardFactionValue1,
               QuestTemplate_::RewardFactionOverride1,
               QuestTemplate_::RewardFactionCapIn1,
               QuestTemplate_::RewardFactionID2,
               QuestTemplate_::RewardFactionValue2,
               QuestTemplate_::RewardFactionOverride2,
               QuestTemplate_::RewardFactionCapIn2,
               QuestTemplate_::RewardFactionID3,
               QuestTemplate_::RewardFactionValue3,
               QuestTemplate_::RewardFactionOverride3,
               QuestTemplate_::RewardFactionCapIn3,
               QuestTemplate_::RewardFactionID4,
               QuestTemplate_::RewardFactionValue4,
               QuestTemplate_::RewardFactionOverride4,
               QuestTemplate_::RewardFactionCapIn4,
               QuestTemplate_::RewardFactionID5,
               QuestTemplate_::RewardFactionValue5,
               QuestTemplate_::RewardFactionOverride5,
               QuestTemplate_::RewardFactionCapIn5,
               QuestTemplate_::RewardFactionFlags,
               QuestTemplate_::RewardCurrencyID1,
               QuestTemplate_::RewardCurrencyQty1,
               QuestTemplate_::RewardCurrencyID2,
               QuestTemplate_::RewardCurrencyQty2,
               QuestTemplate_::RewardCurrencyID3,
               QuestTemplate_::RewardCurrencyQty3,
               QuestTemplate_::RewardCurrencyID4,
               QuestTemplate_::RewardCurrencyQty4,
               QuestTemplate_::AcceptedSoundKitID,
               QuestTemplate_::CompleteSoundKitID,
               QuestTemplate_::AreaGroupID,
               QuestTemplate_::TimeAllowed,
               QuestTemplate_::AllowableRaces,
               QuestTemplate_::QuestRewardID,
               QuestTemplate_::LogTitle,
               QuestTemplate_::LogDescription,
               QuestTemplate_::QuestDescription,
               QuestTemplate_::AreaDescription,
               QuestTemplate_::PortraitGiverText,
               QuestTemplate_::PortraitGiverName,
               QuestTemplate_::PortraitTurnInText,
               QuestTemplate_::PortraitTurnInName,
               QuestTemplate_::QuestCompletionLog,
               QuestTemplate_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questTemplate;
        T& operator()() { return questTemplate; }
        const T& operator()() const { return questTemplate; }
      };
    };
  };
  namespace QuestTemplateAddon_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MaxLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxLevel;
            T& operator()() { return MaxLevel; }
            const T& operator()() const { return MaxLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct AllowableClasses
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AllowableClasses";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AllowableClasses;
            T& operator()() { return AllowableClasses; }
            const T& operator()() const { return AllowableClasses; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SourceSpellID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SourceSpellID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SourceSpellID;
            T& operator()() { return SourceSpellID; }
            const T& operator()() const { return SourceSpellID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PrevQuestID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PrevQuestID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PrevQuestID;
            T& operator()() { return PrevQuestID; }
            const T& operator()() const { return PrevQuestID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct NextQuestID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "NextQuestID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T NextQuestID;
            T& operator()() { return NextQuestID; }
            const T& operator()() const { return NextQuestID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ExclusiveGroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ExclusiveGroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ExclusiveGroup;
            T& operator()() { return ExclusiveGroup; }
            const T& operator()() const { return ExclusiveGroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RewardMailTemplateID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardMailTemplateID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardMailTemplateID;
            T& operator()() { return RewardMailTemplateID; }
            const T& operator()() const { return RewardMailTemplateID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RewardMailDelay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RewardMailDelay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RewardMailDelay;
            T& operator()() { return RewardMailDelay; }
            const T& operator()() const { return RewardMailDelay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RequiredSkillID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredSkillID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredSkillID;
            T& operator()() { return RequiredSkillID; }
            const T& operator()() const { return RequiredSkillID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct RequiredSkillPoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredSkillPoints";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredSkillPoints;
            T& operator()() { return RequiredSkillPoints; }
            const T& operator()() const { return RequiredSkillPoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct RequiredMinRepFaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredMinRepFaction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredMinRepFaction;
            T& operator()() { return RequiredMinRepFaction; }
            const T& operator()() const { return RequiredMinRepFaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct RequiredMaxRepFaction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredMaxRepFaction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredMaxRepFaction;
            T& operator()() { return RequiredMaxRepFaction; }
            const T& operator()() const { return RequiredMaxRepFaction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct RequiredMinRepValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredMinRepValue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredMinRepValue;
            T& operator()() { return RequiredMinRepValue; }
            const T& operator()() const { return RequiredMinRepValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct RequiredMaxRepValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RequiredMaxRepValue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RequiredMaxRepValue;
            T& operator()() { return RequiredMaxRepValue; }
            const T& operator()() const { return RequiredMaxRepValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ProvidedItemCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ProvidedItemCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ProvidedItemCount;
            T& operator()() { return ProvidedItemCount; }
            const T& operator()() const { return ProvidedItemCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct SpecialFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpecialFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpecialFlags;
            T& operator()() { return SpecialFlags; }
            const T& operator()() const { return SpecialFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct QuestTemplateAddon: sqlpp::table_t<QuestTemplateAddon,
               QuestTemplateAddon_::ID,
               QuestTemplateAddon_::MaxLevel,
               QuestTemplateAddon_::AllowableClasses,
               QuestTemplateAddon_::SourceSpellID,
               QuestTemplateAddon_::PrevQuestID,
               QuestTemplateAddon_::NextQuestID,
               QuestTemplateAddon_::ExclusiveGroup,
               QuestTemplateAddon_::RewardMailTemplateID,
               QuestTemplateAddon_::RewardMailDelay,
               QuestTemplateAddon_::RequiredSkillID,
               QuestTemplateAddon_::RequiredSkillPoints,
               QuestTemplateAddon_::RequiredMinRepFaction,
               QuestTemplateAddon_::RequiredMaxRepFaction,
               QuestTemplateAddon_::RequiredMinRepValue,
               QuestTemplateAddon_::RequiredMaxRepValue,
               QuestTemplateAddon_::ProvidedItemCount,
               QuestTemplateAddon_::SpecialFlags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_template_addon";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questTemplateAddon;
        T& operator()() { return questTemplateAddon; }
        const T& operator()() const { return questTemplateAddon; }
      };
    };
  };
  namespace QuestTemplateLocale_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct LogTitle
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LogTitle";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogTitle;
            T& operator()() { return LogTitle; }
            const T& operator()() const { return LogTitle; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct LogDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LogDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LogDescription;
            T& operator()() { return LogDescription; }
            const T& operator()() const { return LogDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct QuestDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestDescription;
            T& operator()() { return QuestDescription; }
            const T& operator()() const { return QuestDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct AreaDescription
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AreaDescription";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AreaDescription;
            T& operator()() { return AreaDescription; }
            const T& operator()() const { return AreaDescription; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitGiverText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitGiverText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitGiverText;
            T& operator()() { return PortraitGiverText; }
            const T& operator()() const { return PortraitGiverText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitGiverName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitGiverName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitGiverName;
            T& operator()() { return PortraitGiverName; }
            const T& operator()() const { return PortraitGiverName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitTurnInText
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitTurnInText";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitTurnInText;
            T& operator()() { return PortraitTurnInText; }
            const T& operator()() const { return PortraitTurnInText; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct PortraitTurnInName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PortraitTurnInName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PortraitTurnInName;
            T& operator()() { return PortraitTurnInName; }
            const T& operator()() const { return PortraitTurnInName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct QuestCompletionLog
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestCompletionLog";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestCompletionLog;
            T& operator()() { return QuestCompletionLog; }
            const T& operator()() const { return QuestCompletionLog; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct QuestTemplateLocale: sqlpp::table_t<QuestTemplateLocale,
               QuestTemplateLocale_::ID,
               QuestTemplateLocale_::Locale,
               QuestTemplateLocale_::LogTitle,
               QuestTemplateLocale_::LogDescription,
               QuestTemplateLocale_::QuestDescription,
               QuestTemplateLocale_::AreaDescription,
               QuestTemplateLocale_::PortraitGiverText,
               QuestTemplateLocale_::PortraitGiverName,
               QuestTemplateLocale_::PortraitTurnInText,
               QuestTemplateLocale_::PortraitTurnInName,
               QuestTemplateLocale_::QuestCompletionLog,
               QuestTemplateLocale_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_template_locale";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questTemplateLocale;
        T& operator()() { return questTemplateLocale; }
        const T& operator()() const { return questTemplateLocale; }
      };
    };
  };
  namespace QuestVisualEffect_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Index
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Index";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Index;
            T& operator()() { return Index; }
            const T& operator()() const { return Index; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct VisualEffect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VisualEffect";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VisualEffect;
            T& operator()() { return VisualEffect; }
            const T& operator()() const { return VisualEffect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct QuestVisualEffect: sqlpp::table_t<QuestVisualEffect,
               QuestVisualEffect_::ID,
               QuestVisualEffect_::Index,
               QuestVisualEffect_::VisualEffect,
               QuestVisualEffect_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "quest_visual_effect";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T questVisualEffect;
        T& operator()() { return questVisualEffect; }
        const T& operator()() const { return questVisualEffect; }
      };
    };
  };
  namespace RaceExpansionRequirement_
  {
    struct RaceID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "raceID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T raceID;
            T& operator()() { return raceID; }
            const T& operator()() const { return raceID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Expansion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "expansion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expansion;
            T& operator()() { return expansion; }
            const T& operator()() const { return expansion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct RaceExpansionRequirement: sqlpp::table_t<RaceExpansionRequirement,
               RaceExpansionRequirement_::RaceID,
               RaceExpansionRequirement_::Expansion>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "race_expansion_requirement";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T raceExpansionRequirement;
        T& operator()() { return raceExpansionRequirement; }
        const T& operator()() const { return raceExpansionRequirement; }
      };
    };
  };
  namespace ReferenceLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct ReferenceLootTemplate: sqlpp::table_t<ReferenceLootTemplate,
               ReferenceLootTemplate_::Entry,
               ReferenceLootTemplate_::Item,
               ReferenceLootTemplate_::Reference,
               ReferenceLootTemplate_::Chance,
               ReferenceLootTemplate_::QuestRequired,
               ReferenceLootTemplate_::LootMode,
               ReferenceLootTemplate_::GroupId,
               ReferenceLootTemplate_::MinCount,
               ReferenceLootTemplate_::MaxCount,
               ReferenceLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "reference_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T referenceLootTemplate;
        T& operator()() { return referenceLootTemplate; }
        const T& operator()() const { return referenceLootTemplate; }
      };
    };
  };
  namespace ReputationRewardRate_
  {
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction;
            T& operator()() { return faction; }
            const T& operator()() const { return faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questRate;
            T& operator()() { return questRate; }
            const T& operator()() const { return questRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestDailyRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_daily_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questDailyRate;
            T& operator()() { return questDailyRate; }
            const T& operator()() const { return questDailyRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestWeeklyRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_weekly_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questWeeklyRate;
            T& operator()() { return questWeeklyRate; }
            const T& operator()() const { return questWeeklyRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestMonthlyRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_monthly_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questMonthlyRate;
            T& operator()() { return questMonthlyRate; }
            const T& operator()() const { return questMonthlyRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRepeatableRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_repeatable_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questRepeatableRate;
            T& operator()() { return questRepeatableRate; }
            const T& operator()() const { return questRepeatableRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct CreatureRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "creature_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T creatureRate;
            T& operator()() { return creatureRate; }
            const T& operator()() const { return creatureRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct SpellRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_rate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellRate;
            T& operator()() { return spellRate; }
            const T& operator()() const { return spellRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct ReputationRewardRate: sqlpp::table_t<ReputationRewardRate,
               ReputationRewardRate_::Faction,
               ReputationRewardRate_::QuestRate,
               ReputationRewardRate_::QuestDailyRate,
               ReputationRewardRate_::QuestWeeklyRate,
               ReputationRewardRate_::QuestMonthlyRate,
               ReputationRewardRate_::QuestRepeatableRate,
               ReputationRewardRate_::CreatureRate,
               ReputationRewardRate_::SpellRate>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "reputation_reward_rate";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T reputationRewardRate;
        T& operator()() { return reputationRewardRate; }
        const T& operator()() const { return reputationRewardRate; }
      };
    };
  };
  namespace ReputationSpilloverTemplate_
  {
    struct Faction
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction;
            T& operator()() { return faction; }
            const T& operator()() const { return faction; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Faction1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction1;
            T& operator()() { return faction1; }
            const T& operator()() const { return faction1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rate1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rate_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate1;
            T& operator()() { return rate1; }
            const T& operator()() const { return rate1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank_1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank1;
            T& operator()() { return rank1; }
            const T& operator()() const { return rank1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Faction2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction2;
            T& operator()() { return faction2; }
            const T& operator()() const { return faction2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rate2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rate_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate2;
            T& operator()() { return rate2; }
            const T& operator()() const { return rate2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank2;
            T& operator()() { return rank2; }
            const T& operator()() const { return rank2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Faction3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction3;
            T& operator()() { return faction3; }
            const T& operator()() const { return faction3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rate3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rate_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate3;
            T& operator()() { return rate3; }
            const T& operator()() const { return rate3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank3;
            T& operator()() { return rank3; }
            const T& operator()() const { return rank3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Faction4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction4;
            T& operator()() { return faction4; }
            const T& operator()() const { return faction4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rate4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rate_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate4;
            T& operator()() { return rate4; }
            const T& operator()() const { return rate4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank_4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank4;
            T& operator()() { return rank4; }
            const T& operator()() const { return rank4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Faction5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "faction5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T faction5;
            T& operator()() { return faction5; }
            const T& operator()() const { return faction5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Rate5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rate_5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rate5;
            T& operator()() { return rate5; }
            const T& operator()() const { return rate5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Rank5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "rank_5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T rank5;
            T& operator()() { return rank5; }
            const T& operator()() const { return rank5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct ReputationSpilloverTemplate: sqlpp::table_t<ReputationSpilloverTemplate,
               ReputationSpilloverTemplate_::Faction,
               ReputationSpilloverTemplate_::Faction1,
               ReputationSpilloverTemplate_::Rate1,
               ReputationSpilloverTemplate_::Rank1,
               ReputationSpilloverTemplate_::Faction2,
               ReputationSpilloverTemplate_::Rate2,
               ReputationSpilloverTemplate_::Rank2,
               ReputationSpilloverTemplate_::Faction3,
               ReputationSpilloverTemplate_::Rate3,
               ReputationSpilloverTemplate_::Rank3,
               ReputationSpilloverTemplate_::Faction4,
               ReputationSpilloverTemplate_::Rate4,
               ReputationSpilloverTemplate_::Rank4,
               ReputationSpilloverTemplate_::Faction5,
               ReputationSpilloverTemplate_::Rate5,
               ReputationSpilloverTemplate_::Rank5>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "reputation_spillover_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T reputationSpilloverTemplate;
        T& operator()() { return reputationSpilloverTemplate; }
        const T& operator()() const { return reputationSpilloverTemplate; }
      };
    };
  };
  namespace ScenarioPoi_
  {
    struct CriteriaTreeID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CriteriaTreeID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CriteriaTreeID;
            T& operator()() { return CriteriaTreeID; }
            const T& operator()() const { return CriteriaTreeID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct BlobIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "BlobIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T BlobIndex;
            T& operator()() { return BlobIndex; }
            const T& operator()() const { return BlobIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx1;
            T& operator()() { return Idx1; }
            const T& operator()() const { return Idx1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct MapID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MapID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MapID;
            T& operator()() { return MapID; }
            const T& operator()() const { return MapID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WorldMapAreaId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WorldMapAreaId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WorldMapAreaId;
            T& operator()() { return WorldMapAreaId; }
            const T& operator()() const { return WorldMapAreaId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Floor
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Floor";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Floor;
            T& operator()() { return Floor; }
            const T& operator()() const { return Floor; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Priority
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Priority";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Priority;
            T& operator()() { return Priority; }
            const T& operator()() const { return Priority; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct WorldEffectID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WorldEffectID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WorldEffectID;
            T& operator()() { return WorldEffectID; }
            const T& operator()() const { return WorldEffectID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct PlayerConditionID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PlayerConditionID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PlayerConditionID;
            T& operator()() { return PlayerConditionID; }
            const T& operator()() const { return PlayerConditionID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct ScenarioPoi: sqlpp::table_t<ScenarioPoi,
               ScenarioPoi_::CriteriaTreeID,
               ScenarioPoi_::BlobIndex,
               ScenarioPoi_::Idx1,
               ScenarioPoi_::MapID,
               ScenarioPoi_::WorldMapAreaId,
               ScenarioPoi_::Floor,
               ScenarioPoi_::Priority,
               ScenarioPoi_::Flags,
               ScenarioPoi_::WorldEffectID,
               ScenarioPoi_::PlayerConditionID,
               ScenarioPoi_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "scenario_poi";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T scenarioPoi;
        T& operator()() { return scenarioPoi; }
        const T& operator()() const { return scenarioPoi; }
      };
    };
  };
  namespace ScenarioPoiPoints_
  {
    struct CriteriaTreeID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CriteriaTreeID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CriteriaTreeID;
            T& operator()() { return CriteriaTreeID; }
            const T& operator()() const { return CriteriaTreeID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx1;
            T& operator()() { return Idx1; }
            const T& operator()() const { return Idx1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Idx2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Idx2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Idx2;
            T& operator()() { return Idx2; }
            const T& operator()() const { return Idx2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "X";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T X;
            T& operator()() { return X; }
            const T& operator()() const { return X; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Y;
            T& operator()() { return Y; }
            const T& operator()() const { return Y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct ScenarioPoiPoints: sqlpp::table_t<ScenarioPoiPoints,
               ScenarioPoiPoints_::CriteriaTreeID,
               ScenarioPoiPoints_::Idx1,
               ScenarioPoiPoints_::Idx2,
               ScenarioPoiPoints_::X,
               ScenarioPoiPoints_::Y,
               ScenarioPoiPoints_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "scenario_poi_points";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T scenarioPoiPoints;
        T& operator()() { return scenarioPoiPoints; }
        const T& operator()() const { return scenarioPoiPoints; }
      };
    };
  };
  namespace Scenarios_
  {
    struct Map
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "map";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T map;
            T& operator()() { return map; }
            const T& operator()() const { return map; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Difficulty
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "difficulty";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T difficulty;
            T& operator()() { return difficulty; }
            const T& operator()() const { return difficulty; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ScenarioA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "scenario_A";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scenarioA;
            T& operator()() { return scenarioA; }
            const T& operator()() const { return scenarioA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScenarioH
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "scenario_H";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T scenarioH;
            T& operator()() { return scenarioH; }
            const T& operator()() const { return scenarioH; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct Scenarios: sqlpp::table_t<Scenarios,
               Scenarios_::Map,
               Scenarios_::Difficulty,
               Scenarios_::ScenarioA,
               Scenarios_::ScenarioH>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "scenarios";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T scenarios;
        T& operator()() { return scenarios; }
        const T& operator()() const { return scenarios; }
      };
    };
  };
  namespace SceneTemplate_
  {
    struct SceneId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SceneId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SceneId;
            T& operator()() { return SceneId; }
            const T& operator()() const { return SceneId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Flags;
            T& operator()() { return Flags; }
            const T& operator()() const { return Flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScriptPackageID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptPackageID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptPackageID;
            T& operator()() { return ScriptPackageID; }
            const T& operator()() const { return ScriptPackageID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct SceneTemplate: sqlpp::table_t<SceneTemplate,
               SceneTemplate_::SceneId,
               SceneTemplate_::Flags,
               SceneTemplate_::ScriptPackageID,
               SceneTemplate_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "scene_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T sceneTemplate;
        T& operator()() { return sceneTemplate; }
        const T& operator()() const { return sceneTemplate; }
      };
    };
  };
  namespace ScriptWaypoint_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Pointid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pointid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointid;
            T& operator()() { return pointid; }
            const T& operator()() const { return pointid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LocationX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "location_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locationX;
            T& operator()() { return locationX; }
            const T& operator()() const { return locationX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct LocationY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "location_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locationY;
            T& operator()() { return locationY; }
            const T& operator()() const { return locationY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct LocationZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "location_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locationZ;
            T& operator()() { return locationZ; }
            const T& operator()() const { return locationZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Waittime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "waittime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T waittime;
            T& operator()() { return waittime; }
            const T& operator()() const { return waittime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PointComment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "point_comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointComment;
            T& operator()() { return pointComment; }
            const T& operator()() const { return pointComment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct ScriptWaypoint: sqlpp::table_t<ScriptWaypoint,
               ScriptWaypoint_::Entry,
               ScriptWaypoint_::Pointid,
               ScriptWaypoint_::LocationX,
               ScriptWaypoint_::LocationY,
               ScriptWaypoint_::LocationZ,
               ScriptWaypoint_::Waittime,
               ScriptWaypoint_::PointComment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "script_waypoint";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T scriptWaypoint;
        T& operator()() { return scriptWaypoint; }
        const T& operator()() const { return scriptWaypoint; }
      };
    };
  };
  namespace SkillDiscoveryTemplate_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ReqSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "reqSpell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqSpell;
            T& operator()() { return reqSpell; }
            const T& operator()() const { return reqSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ReqSkillValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "reqSkillValue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqSkillValue;
            T& operator()() { return reqSkillValue; }
            const T& operator()() const { return reqSkillValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct SkillDiscoveryTemplate: sqlpp::table_t<SkillDiscoveryTemplate,
               SkillDiscoveryTemplate_::SpellId,
               SkillDiscoveryTemplate_::ReqSpell,
               SkillDiscoveryTemplate_::ReqSkillValue,
               SkillDiscoveryTemplate_::Chance>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_discovery_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillDiscoveryTemplate;
        T& operator()() { return skillDiscoveryTemplate; }
        const T& operator()() const { return skillDiscoveryTemplate; }
      };
    };
  };
  namespace SkillExtraItemTemplate_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RequiredSpecialization
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "requiredSpecialization";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T requiredSpecialization;
            T& operator()() { return requiredSpecialization; }
            const T& operator()() const { return requiredSpecialization; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AdditionalCreateChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "additionalCreateChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T additionalCreateChance;
            T& operator()() { return additionalCreateChance; }
            const T& operator()() const { return additionalCreateChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct AdditionalMaxNum
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "additionalMaxNum";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T additionalMaxNum;
            T& operator()() { return additionalMaxNum; }
            const T& operator()() const { return additionalMaxNum; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct SkillExtraItemTemplate: sqlpp::table_t<SkillExtraItemTemplate,
               SkillExtraItemTemplate_::SpellId,
               SkillExtraItemTemplate_::RequiredSpecialization,
               SkillExtraItemTemplate_::AdditionalCreateChance,
               SkillExtraItemTemplate_::AdditionalMaxNum>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_extra_item_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillExtraItemTemplate;
        T& operator()() { return skillExtraItemTemplate; }
        const T& operator()() const { return skillExtraItemTemplate; }
      };
    };
  };
  namespace SkillFishingBaseLevel_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Skill
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "skill";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T skill;
            T& operator()() { return skill; }
            const T& operator()() const { return skill; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
  }

  struct SkillFishingBaseLevel: sqlpp::table_t<SkillFishingBaseLevel,
               SkillFishingBaseLevel_::Entry,
               SkillFishingBaseLevel_::Skill>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_fishing_base_level";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillFishingBaseLevel;
        T& operator()() { return skillFishingBaseLevel; }
        const T& operator()() const { return skillFishingBaseLevel; }
      };
    };
  };
  namespace SkillPerfectItemTemplate_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RequiredSpecialization
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "requiredSpecialization";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T requiredSpecialization;
            T& operator()() { return requiredSpecialization; }
            const T& operator()() const { return requiredSpecialization; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PerfectCreateChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "perfectCreateChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfectCreateChance;
            T& operator()() { return perfectCreateChance; }
            const T& operator()() const { return perfectCreateChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PerfectItemType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "perfectItemType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T perfectItemType;
            T& operator()() { return perfectItemType; }
            const T& operator()() const { return perfectItemType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SkillPerfectItemTemplate: sqlpp::table_t<SkillPerfectItemTemplate,
               SkillPerfectItemTemplate_::SpellId,
               SkillPerfectItemTemplate_::RequiredSpecialization,
               SkillPerfectItemTemplate_::PerfectCreateChance,
               SkillPerfectItemTemplate_::PerfectItemType>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_perfect_item_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillPerfectItemTemplate;
        T& operator()() { return skillPerfectItemTemplate; }
        const T& operator()() const { return skillPerfectItemTemplate; }
      };
    };
  };
  namespace SkillTiers_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value1;
            T& operator()() { return Value1; }
            const T& operator()() const { return Value1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value2;
            T& operator()() { return Value2; }
            const T& operator()() const { return Value2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value3;
            T& operator()() { return Value3; }
            const T& operator()() const { return Value3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value4;
            T& operator()() { return Value4; }
            const T& operator()() const { return Value4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value5;
            T& operator()() { return Value5; }
            const T& operator()() const { return Value5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value6;
            T& operator()() { return Value6; }
            const T& operator()() const { return Value6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value7;
            T& operator()() { return Value7; }
            const T& operator()() const { return Value7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value8;
            T& operator()() { return Value8; }
            const T& operator()() const { return Value8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value9;
            T& operator()() { return Value9; }
            const T& operator()() const { return Value9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value10;
            T& operator()() { return Value10; }
            const T& operator()() const { return Value10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value11
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value11";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value11;
            T& operator()() { return Value11; }
            const T& operator()() const { return Value11; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value12
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value12";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value12;
            T& operator()() { return Value12; }
            const T& operator()() const { return Value12; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value13
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value13";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value13;
            T& operator()() { return Value13; }
            const T& operator()() const { return Value13; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value14
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value14";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value14;
            T& operator()() { return Value14; }
            const T& operator()() const { return Value14; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value15
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value15";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value15;
            T& operator()() { return Value15; }
            const T& operator()() const { return Value15; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Value16
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Value16";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Value16;
            T& operator()() { return Value16; }
            const T& operator()() const { return Value16; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SkillTiers: sqlpp::table_t<SkillTiers,
               SkillTiers_::ID,
               SkillTiers_::Value1,
               SkillTiers_::Value2,
               SkillTiers_::Value3,
               SkillTiers_::Value4,
               SkillTiers_::Value5,
               SkillTiers_::Value6,
               SkillTiers_::Value7,
               SkillTiers_::Value8,
               SkillTiers_::Value9,
               SkillTiers_::Value10,
               SkillTiers_::Value11,
               SkillTiers_::Value12,
               SkillTiers_::Value13,
               SkillTiers_::Value14,
               SkillTiers_::Value15,
               SkillTiers_::Value16>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skill_tiers";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skillTiers;
        T& operator()() { return skillTiers; }
        const T& operator()() const { return skillTiers; }
      };
    };
  };
  namespace SkinningLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct SkinningLootTemplate: sqlpp::table_t<SkinningLootTemplate,
               SkinningLootTemplate_::Entry,
               SkinningLootTemplate_::Item,
               SkinningLootTemplate_::Reference,
               SkinningLootTemplate_::Chance,
               SkinningLootTemplate_::QuestRequired,
               SkinningLootTemplate_::LootMode,
               SkinningLootTemplate_::GroupId,
               SkinningLootTemplate_::MinCount,
               SkinningLootTemplate_::MaxCount,
               SkinningLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "skinning_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T skinningLootTemplate;
        T& operator()() { return skinningLootTemplate; }
        const T& operator()() const { return skinningLootTemplate; }
      };
    };
  };
  namespace SmartScripts_
  {
    struct Entryorguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entryorguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entryorguid;
            T& operator()() { return entryorguid; }
            const T& operator()() const { return entryorguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct SourceType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "source_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sourceType;
            T& operator()() { return sourceType; }
            const T& operator()() const { return sourceType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Link
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "link";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T link;
            T& operator()() { return link; }
            const T& operator()() const { return link; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct EventType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventType;
            T& operator()() { return eventType; }
            const T& operator()() const { return eventType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EventPhaseMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_phase_mask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventPhaseMask;
            T& operator()() { return eventPhaseMask; }
            const T& operator()() const { return eventPhaseMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EventChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventChance;
            T& operator()() { return eventChance; }
            const T& operator()() const { return eventChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EventFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventFlags;
            T& operator()() { return eventFlags; }
            const T& operator()() const { return eventFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct EventParam1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_param1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventParam1;
            T& operator()() { return eventParam1; }
            const T& operator()() const { return eventParam1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EventParam2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_param2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventParam2;
            T& operator()() { return eventParam2; }
            const T& operator()() const { return eventParam2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EventParam3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_param3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventParam3;
            T& operator()() { return eventParam3; }
            const T& operator()() const { return eventParam3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EventParam4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "event_param4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T eventParam4;
            T& operator()() { return eventParam4; }
            const T& operator()() const { return eventParam4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionType;
            T& operator()() { return actionType; }
            const T& operator()() const { return actionType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct ActionParam1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam1;
            T& operator()() { return actionParam1; }
            const T& operator()() const { return actionParam1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionParam2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam2;
            T& operator()() { return actionParam2; }
            const T& operator()() const { return actionParam2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionParam3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam3;
            T& operator()() { return actionParam3; }
            const T& operator()() const { return actionParam3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionParam4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam4;
            T& operator()() { return actionParam4; }
            const T& operator()() const { return actionParam4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionParam5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam5;
            T& operator()() { return actionParam5; }
            const T& operator()() const { return actionParam5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ActionParam6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_param6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionParam6;
            T& operator()() { return actionParam6; }
            const T& operator()() const { return actionParam6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TargetType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetType;
            T& operator()() { return targetType; }
            const T& operator()() const { return targetType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct TargetParam1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_param1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetParam1;
            T& operator()() { return targetParam1; }
            const T& operator()() const { return targetParam1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TargetParam2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_param2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetParam2;
            T& operator()() { return targetParam2; }
            const T& operator()() const { return targetParam2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TargetParam3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_param3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetParam3;
            T& operator()() { return targetParam3; }
            const T& operator()() const { return targetParam3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TargetX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetX;
            T& operator()() { return targetX; }
            const T& operator()() const { return targetX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TargetY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetY;
            T& operator()() { return targetY; }
            const T& operator()() const { return targetY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TargetZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetZ;
            T& operator()() { return targetZ; }
            const T& operator()() const { return targetZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct TargetO
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "target_o";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T targetO;
            T& operator()() { return targetO; }
            const T& operator()() const { return targetO; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct SmartScripts: sqlpp::table_t<SmartScripts,
               SmartScripts_::Entryorguid,
               SmartScripts_::SourceType,
               SmartScripts_::Id,
               SmartScripts_::Link,
               SmartScripts_::EventType,
               SmartScripts_::EventPhaseMask,
               SmartScripts_::EventChance,
               SmartScripts_::EventFlags,
               SmartScripts_::EventParam1,
               SmartScripts_::EventParam2,
               SmartScripts_::EventParam3,
               SmartScripts_::EventParam4,
               SmartScripts_::ActionType,
               SmartScripts_::ActionParam1,
               SmartScripts_::ActionParam2,
               SmartScripts_::ActionParam3,
               SmartScripts_::ActionParam4,
               SmartScripts_::ActionParam5,
               SmartScripts_::ActionParam6,
               SmartScripts_::TargetType,
               SmartScripts_::TargetParam1,
               SmartScripts_::TargetParam2,
               SmartScripts_::TargetParam3,
               SmartScripts_::TargetX,
               SmartScripts_::TargetY,
               SmartScripts_::TargetZ,
               SmartScripts_::TargetO,
               SmartScripts_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "smart_scripts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T smartScripts;
        T& operator()() { return smartScripts; }
        const T& operator()() const { return smartScripts; }
      };
    };
  };
  namespace SpellArea_
  {
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Area
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "area";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T area;
            T& operator()() { return area; }
            const T& operator()() const { return area; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestStart
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_start";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questStart;
            T& operator()() { return questStart; }
            const T& operator()() const { return questStart; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct QuestEnd
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_end";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questEnd;
            T& operator()() { return questEnd; }
            const T& operator()() const { return questEnd; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AuraSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "aura_spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T auraSpell;
            T& operator()() { return auraSpell; }
            const T& operator()() const { return auraSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Racemask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "racemask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T racemask;
            T& operator()() { return racemask; }
            const T& operator()() const { return racemask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Gender
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "gender";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gender;
            T& operator()() { return gender; }
            const T& operator()() const { return gender; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Autocast
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "autocast";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T autocast;
            T& operator()() { return autocast; }
            const T& operator()() const { return autocast; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct QuestStartStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_start_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questStartStatus;
            T& operator()() { return questStartStatus; }
            const T& operator()() const { return questStartStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct QuestEndStatus
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quest_end_status";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T questEndStatus;
            T& operator()() { return questEndStatus; }
            const T& operator()() const { return questEndStatus; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct SpellArea: sqlpp::table_t<SpellArea,
               SpellArea_::Spell,
               SpellArea_::Area,
               SpellArea_::QuestStart,
               SpellArea_::QuestEnd,
               SpellArea_::AuraSpell,
               SpellArea_::Racemask,
               SpellArea_::Gender,
               SpellArea_::Autocast,
               SpellArea_::QuestStartStatus,
               SpellArea_::QuestEndStatus>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_area";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellArea;
        T& operator()() { return spellArea; }
        const T& operator()() const { return spellArea; }
      };
    };
  };
  namespace SpellCustomAttr_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Attributes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "attributes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attributes;
            T& operator()() { return attributes; }
            const T& operator()() const { return attributes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SpellCustomAttr: sqlpp::table_t<SpellCustomAttr,
               SpellCustomAttr_::Entry,
               SpellCustomAttr_::Attributes>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_custom_attr";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellCustomAttr;
        T& operator()() { return spellCustomAttr; }
        const T& operator()() const { return spellCustomAttr; }
      };
    };
  };
  namespace SpellDbc_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Attributes
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Attributes";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Attributes;
            T& operator()() { return Attributes; }
            const T& operator()() const { return Attributes; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx;
            T& operator()() { return AttributesEx; }
            const T& operator()() const { return AttributesEx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx2;
            T& operator()() { return AttributesEx2; }
            const T& operator()() const { return AttributesEx2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx3;
            T& operator()() { return AttributesEx3; }
            const T& operator()() const { return AttributesEx3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx4;
            T& operator()() { return AttributesEx4; }
            const T& operator()() const { return AttributesEx4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx5;
            T& operator()() { return AttributesEx5; }
            const T& operator()() const { return AttributesEx5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx6;
            T& operator()() { return AttributesEx6; }
            const T& operator()() const { return AttributesEx6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx7;
            T& operator()() { return AttributesEx7; }
            const T& operator()() const { return AttributesEx7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx8;
            T& operator()() { return AttributesEx8; }
            const T& operator()() const { return AttributesEx8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx9
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx9";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx9;
            T& operator()() { return AttributesEx9; }
            const T& operator()() const { return AttributesEx9; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AttributesEx10
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "AttributesEx10";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T AttributesEx10;
            T& operator()() { return AttributesEx10; }
            const T& operator()() const { return AttributesEx10; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct CastingTimeIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CastingTimeIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CastingTimeIndex;
            T& operator()() { return CastingTimeIndex; }
            const T& operator()() const { return CastingTimeIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct DurationIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "DurationIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T DurationIndex;
            T& operator()() { return DurationIndex; }
            const T& operator()() const { return DurationIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RangeIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RangeIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RangeIndex;
            T& operator()() { return RangeIndex; }
            const T& operator()() const { return RangeIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SchoolMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SchoolMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SchoolMask;
            T& operator()() { return SchoolMask; }
            const T& operator()() const { return SchoolMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellAuraOptionsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellAuraOptionsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellAuraOptionsId;
            T& operator()() { return SpellAuraOptionsId; }
            const T& operator()() const { return SpellAuraOptionsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellCastingRequirementsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellCastingRequirementsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellCastingRequirementsId;
            T& operator()() { return SpellCastingRequirementsId; }
            const T& operator()() const { return SpellCastingRequirementsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellCategoriesId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellCategoriesId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellCategoriesId;
            T& operator()() { return SpellCategoriesId; }
            const T& operator()() const { return SpellCategoriesId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellClassOptionsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellClassOptionsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellClassOptionsId;
            T& operator()() { return SpellClassOptionsId; }
            const T& operator()() const { return SpellClassOptionsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellEquippedItemsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellEquippedItemsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellEquippedItemsId;
            T& operator()() { return SpellEquippedItemsId; }
            const T& operator()() const { return SpellEquippedItemsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellLevelsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellLevelsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellLevelsId;
            T& operator()() { return SpellLevelsId; }
            const T& operator()() const { return SpellLevelsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellTargetRestrictionsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellTargetRestrictionsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellTargetRestrictionsId;
            T& operator()() { return SpellTargetRestrictionsId; }
            const T& operator()() const { return SpellTargetRestrictionsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellInterruptsId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellInterruptsId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellInterruptsId;
            T& operator()() { return SpellInterruptsId; }
            const T& operator()() const { return SpellInterruptsId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct SpellDbc: sqlpp::table_t<SpellDbc,
               SpellDbc_::Id,
               SpellDbc_::Attributes,
               SpellDbc_::AttributesEx,
               SpellDbc_::AttributesEx2,
               SpellDbc_::AttributesEx3,
               SpellDbc_::AttributesEx4,
               SpellDbc_::AttributesEx5,
               SpellDbc_::AttributesEx6,
               SpellDbc_::AttributesEx7,
               SpellDbc_::AttributesEx8,
               SpellDbc_::AttributesEx9,
               SpellDbc_::AttributesEx10,
               SpellDbc_::CastingTimeIndex,
               SpellDbc_::DurationIndex,
               SpellDbc_::RangeIndex,
               SpellDbc_::SchoolMask,
               SpellDbc_::SpellAuraOptionsId,
               SpellDbc_::SpellCastingRequirementsId,
               SpellDbc_::SpellCategoriesId,
               SpellDbc_::SpellClassOptionsId,
               SpellDbc_::SpellEquippedItemsId,
               SpellDbc_::SpellLevelsId,
               SpellDbc_::SpellTargetRestrictionsId,
               SpellDbc_::SpellInterruptsId,
               SpellDbc_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_dbc";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellDbc;
        T& operator()() { return spellDbc; }
        const T& operator()() const { return spellDbc; }
      };
    };
  };
  namespace SpellEnchantProcData_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CustomChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "customChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T customChance;
            T& operator()() { return customChance; }
            const T& operator()() const { return customChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PPMChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PPMChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PPMChance;
            T& operator()() { return PPMChance; }
            const T& operator()() const { return PPMChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ProcEx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "procEx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T procEx;
            T& operator()() { return procEx; }
            const T& operator()() const { return procEx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SpellEnchantProcData: sqlpp::table_t<SpellEnchantProcData,
               SpellEnchantProcData_::Entry,
               SpellEnchantProcData_::CustomChance,
               SpellEnchantProcData_::PPMChance,
               SpellEnchantProcData_::ProcEx>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_enchant_proc_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellEnchantProcData;
        T& operator()() { return spellEnchantProcData; }
        const T& operator()() const { return spellEnchantProcData; }
      };
    };
  };
  namespace SpellGroup_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct SpellGroup: sqlpp::table_t<SpellGroup,
               SpellGroup_::Id,
               SpellGroup_::SpellId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_group";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellGroup;
        T& operator()() { return spellGroup; }
        const T& operator()() const { return spellGroup; }
      };
    };
  };
  namespace SpellGroupStackRules_
  {
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "group_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T groupId;
            T& operator()() { return groupId; }
            const T& operator()() const { return groupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct StackRule
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "stack_rule";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T stackRule;
            T& operator()() { return stackRule; }
            const T& operator()() const { return stackRule; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct SpellGroupStackRules: sqlpp::table_t<SpellGroupStackRules,
               SpellGroupStackRules_::GroupId,
               SpellGroupStackRules_::StackRule>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_group_stack_rules";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellGroupStackRules;
        T& operator()() { return spellGroupStackRules; }
        const T& operator()() const { return spellGroupStackRules; }
      };
    };
  };
  namespace SpellLearnSpell_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellID;
            T& operator()() { return SpellID; }
            const T& operator()() const { return SpellID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Active;
            T& operator()() { return Active; }
            const T& operator()() const { return Active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct SpellLearnSpell: sqlpp::table_t<SpellLearnSpell,
               SpellLearnSpell_::Entry,
               SpellLearnSpell_::SpellID,
               SpellLearnSpell_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_learn_spell";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellLearnSpell;
        T& operator()() { return spellLearnSpell; }
        const T& operator()() const { return spellLearnSpell; }
      };
    };
  };
  namespace SpellLinkedSpell_
  {
    struct SpellTrigger
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_trigger";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellTrigger;
            T& operator()() { return spellTrigger; }
            const T& operator()() const { return spellTrigger; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct SpellEffect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_effect";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellEffect;
            T& operator()() { return spellEffect; }
            const T& operator()() const { return spellEffect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct SpellLinkedSpell: sqlpp::table_t<SpellLinkedSpell,
               SpellLinkedSpell_::SpellTrigger,
               SpellLinkedSpell_::SpellEffect,
               SpellLinkedSpell_::Type,
               SpellLinkedSpell_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_linked_spell";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellLinkedSpell;
        T& operator()() { return spellLinkedSpell; }
        const T& operator()() const { return spellLinkedSpell; }
      };
    };
  };
  namespace SpellLootTemplate_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Entry;
            T& operator()() { return Entry; }
            const T& operator()() const { return Entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Item
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Item";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Item;
            T& operator()() { return Item; }
            const T& operator()() const { return Item; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Reference
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Reference";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Reference;
            T& operator()() { return Reference; }
            const T& operator()() const { return Reference; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Chance;
            T& operator()() { return Chance; }
            const T& operator()() const { return Chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct QuestRequired
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "QuestRequired";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T QuestRequired;
            T& operator()() { return QuestRequired; }
            const T& operator()() const { return QuestRequired; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct LootMode
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LootMode";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LootMode;
            T& operator()() { return LootMode; }
            const T& operator()() const { return LootMode; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct GroupId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "GroupId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T GroupId;
            T& operator()() { return GroupId; }
            const T& operator()() const { return GroupId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MinCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MinCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MinCount;
            T& operator()() { return MinCount; }
            const T& operator()() const { return MinCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MaxCount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MaxCount";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MaxCount;
            T& operator()() { return MaxCount; }
            const T& operator()() const { return MaxCount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct SpellLootTemplate: sqlpp::table_t<SpellLootTemplate,
               SpellLootTemplate_::Entry,
               SpellLootTemplate_::Item,
               SpellLootTemplate_::Reference,
               SpellLootTemplate_::Chance,
               SpellLootTemplate_::QuestRequired,
               SpellLootTemplate_::LootMode,
               SpellLootTemplate_::GroupId,
               SpellLootTemplate_::MinCount,
               SpellLootTemplate_::MaxCount,
               SpellLootTemplate_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_loot_template";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellLootTemplate;
        T& operator()() { return spellLootTemplate; }
        const T& operator()() const { return spellLootTemplate; }
      };
    };
  };
  namespace SpellPetAuras_
  {
    struct Spell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spell;
            T& operator()() { return spell; }
            const T& operator()() const { return spell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct EffectId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "effectId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effectId;
            T& operator()() { return effectId; }
            const T& operator()() const { return effectId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Pet
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pet";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pet;
            T& operator()() { return pet; }
            const T& operator()() const { return pet; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Aura
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "aura";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T aura;
            T& operator()() { return aura; }
            const T& operator()() const { return aura; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct SpellPetAuras: sqlpp::table_t<SpellPetAuras,
               SpellPetAuras_::Spell,
               SpellPetAuras_::EffectId,
               SpellPetAuras_::Pet,
               SpellPetAuras_::Aura>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_pet_auras";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellPetAuras;
        T& operator()() { return spellPetAuras; }
        const T& operator()() const { return spellPetAuras; }
      };
    };
  };
  namespace SpellProc_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SchoolMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "schoolMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T schoolMask;
            T& operator()() { return schoolMask; }
            const T& operator()() const { return schoolMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SpellFamilyName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyName;
            T& operator()() { return spellFamilyName; }
            const T& operator()() const { return spellFamilyName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SpellFamilyMask0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyMask0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyMask0;
            T& operator()() { return spellFamilyMask0; }
            const T& operator()() const { return spellFamilyMask0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyMask1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyMask1;
            T& operator()() { return spellFamilyMask1; }
            const T& operator()() const { return spellFamilyMask1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyMask2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyMask2;
            T& operator()() { return spellFamilyMask2; }
            const T& operator()() const { return spellFamilyMask2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyMask3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyMask3;
            T& operator()() { return spellFamilyMask3; }
            const T& operator()() const { return spellFamilyMask3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct TypeMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "typeMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T typeMask;
            T& operator()() { return typeMask; }
            const T& operator()() const { return typeMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellTypeMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellTypeMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellTypeMask;
            T& operator()() { return spellTypeMask; }
            const T& operator()() const { return spellTypeMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellPhaseMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellPhaseMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellPhaseMask;
            T& operator()() { return spellPhaseMask; }
            const T& operator()() const { return spellPhaseMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct HitMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hitMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hitMask;
            T& operator()() { return hitMask; }
            const T& operator()() const { return hitMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct AttributesMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "attributesMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T attributesMask;
            T& operator()() { return attributesMask; }
            const T& operator()() const { return attributesMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RatePerMinute
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ratePerMinute";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ratePerMinute;
            T& operator()() { return ratePerMinute; }
            const T& operator()() const { return ratePerMinute; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Chance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T chance;
            T& operator()() { return chance; }
            const T& operator()() const { return chance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Cooldown
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "cooldown";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cooldown;
            T& operator()() { return cooldown; }
            const T& operator()() const { return cooldown; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Charges
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "charges";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T charges;
            T& operator()() { return charges; }
            const T& operator()() const { return charges; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SpellProc: sqlpp::table_t<SpellProc,
               SpellProc_::SpellId,
               SpellProc_::SchoolMask,
               SpellProc_::SpellFamilyName,
               SpellProc_::SpellFamilyMask0,
               SpellProc_::SpellFamilyMask1,
               SpellProc_::SpellFamilyMask2,
               SpellProc_::SpellFamilyMask3,
               SpellProc_::TypeMask,
               SpellProc_::SpellTypeMask,
               SpellProc_::SpellPhaseMask,
               SpellProc_::HitMask,
               SpellProc_::AttributesMask,
               SpellProc_::RatePerMinute,
               SpellProc_::Chance,
               SpellProc_::Cooldown,
               SpellProc_::Charges>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_proc";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellProc;
        T& operator()() { return spellProc; }
        const T& operator()() const { return spellProc; }
      };
    };
  };
  namespace SpellProcEvent_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct SchoolMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SchoolMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SchoolMask;
            T& operator()() { return SchoolMask; }
            const T& operator()() const { return SchoolMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct SpellFamilyName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellFamilyName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellFamilyName;
            T& operator()() { return SpellFamilyName; }
            const T& operator()() const { return SpellFamilyName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct SpellFamilyMask0
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellFamilyMask0";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellFamilyMask0;
            T& operator()() { return SpellFamilyMask0; }
            const T& operator()() const { return SpellFamilyMask0; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellFamilyMask1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellFamilyMask1;
            T& operator()() { return SpellFamilyMask1; }
            const T& operator()() const { return SpellFamilyMask1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "SpellFamilyMask2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T SpellFamilyMask2;
            T& operator()() { return SpellFamilyMask2; }
            const T& operator()() const { return SpellFamilyMask2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SpellFamilyMask3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spellFamilyMask3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellFamilyMask3;
            T& operator()() { return spellFamilyMask3; }
            const T& operator()() const { return spellFamilyMask3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ProcFlags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "procFlags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T procFlags;
            T& operator()() { return procFlags; }
            const T& operator()() const { return procFlags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ProcEx
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "procEx";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T procEx;
            T& operator()() { return procEx; }
            const T& operator()() const { return procEx; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PpmRate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ppmRate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ppmRate;
            T& operator()() { return ppmRate; }
            const T& operator()() const { return ppmRate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct CustomChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "CustomChance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T CustomChance;
            T& operator()() { return CustomChance; }
            const T& operator()() const { return CustomChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Cooldown
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Cooldown";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Cooldown;
            T& operator()() { return Cooldown; }
            const T& operator()() const { return Cooldown; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct SpellProcEvent: sqlpp::table_t<SpellProcEvent,
               SpellProcEvent_::Entry,
               SpellProcEvent_::SchoolMask,
               SpellProcEvent_::SpellFamilyName,
               SpellProcEvent_::SpellFamilyMask0,
               SpellProcEvent_::SpellFamilyMask1,
               SpellProcEvent_::SpellFamilyMask2,
               SpellProcEvent_::SpellFamilyMask3,
               SpellProcEvent_::ProcFlags,
               SpellProcEvent_::ProcEx,
               SpellProcEvent_::PpmRate,
               SpellProcEvent_::CustomChance,
               SpellProcEvent_::Cooldown>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_proc_event";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellProcEvent;
        T& operator()() { return spellProcEvent; }
        const T& operator()() const { return spellProcEvent; }
      };
    };
  };
  namespace SpellRequired_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ReqSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "req_spell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T reqSpell;
            T& operator()() { return reqSpell; }
            const T& operator()() const { return reqSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct SpellRequired: sqlpp::table_t<SpellRequired,
               SpellRequired_::SpellId,
               SpellRequired_::ReqSpell>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_required";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellRequired;
        T& operator()() { return spellRequired; }
        const T& operator()() const { return spellRequired; }
      };
    };
  };
  namespace SpellScriptNames_
  {
    struct SpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "spell_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T spellId;
            T& operator()() { return spellId; }
            const T& operator()() const { return spellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::require_insert>;
    };
  }

  struct SpellScriptNames: sqlpp::table_t<SpellScriptNames,
               SpellScriptNames_::SpellId,
               SpellScriptNames_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_script_names";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellScriptNames;
        T& operator()() { return spellScriptNames; }
        const T& operator()() const { return spellScriptNames; }
      };
    };
  };
  namespace SpellScripts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "effIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T effIndex;
            T& operator()() { return effIndex; }
            const T& operator()() const { return effIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Command
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "command";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T command;
            T& operator()() { return command; }
            const T& operator()() const { return command; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong;
            T& operator()() { return datalong; }
            const T& operator()() const { return datalong; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong2;
            T& operator()() { return datalong2; }
            const T& operator()() const { return datalong2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dataint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dataint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dataint;
            T& operator()() { return dataint; }
            const T& operator()() const { return dataint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T z;
            T& operator()() { return z; }
            const T& operator()() const { return z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct O
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "o";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T o;
            T& operator()() { return o; }
            const T& operator()() const { return o; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct SpellScripts: sqlpp::table_t<SpellScripts,
               SpellScripts_::Id,
               SpellScripts_::EffIndex,
               SpellScripts_::Delay,
               SpellScripts_::Command,
               SpellScripts_::Datalong,
               SpellScripts_::Datalong2,
               SpellScripts_::Dataint,
               SpellScripts_::X,
               SpellScripts_::Y,
               SpellScripts_::Z,
               SpellScripts_::O>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_scripts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellScripts;
        T& operator()() { return spellScripts; }
        const T& operator()() const { return spellScripts; }
      };
    };
  };
  namespace SpellTargetPosition_
  {
    struct ID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ID;
            T& operator()() { return ID; }
            const T& operator()() const { return ID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectIndex;
            T& operator()() { return EffectIndex; }
            const T& operator()() const { return EffectIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct MapID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MapID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MapID;
            T& operator()() { return MapID; }
            const T& operator()() const { return MapID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PositionX";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PositionX;
            T& operator()() { return PositionX; }
            const T& operator()() const { return PositionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PositionY";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PositionY;
            T& operator()() { return PositionY; }
            const T& operator()() const { return PositionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "PositionZ";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T PositionZ;
            T& operator()() { return PositionZ; }
            const T& operator()() const { return PositionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct VerifiedBuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "VerifiedBuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T VerifiedBuild;
            T& operator()() { return VerifiedBuild; }
            const T& operator()() const { return VerifiedBuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::can_be_null>;
    };
  }

  struct SpellTargetPosition: sqlpp::table_t<SpellTargetPosition,
               SpellTargetPosition_::ID,
               SpellTargetPosition_::EffectIndex,
               SpellTargetPosition_::MapID,
               SpellTargetPosition_::PositionX,
               SpellTargetPosition_::PositionY,
               SpellTargetPosition_::PositionZ,
               SpellTargetPosition_::VerifiedBuild>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_target_position";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellTargetPosition;
        T& operator()() { return spellTargetPosition; }
        const T& operator()() const { return spellTargetPosition; }
      };
    };
  };
  namespace SpellThreat_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct FlatMod
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flatMod";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flatMod;
            T& operator()() { return flatMod; }
            const T& operator()() const { return flatMod; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
    struct PctMod
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pctMod";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pctMod;
            T& operator()() { return pctMod; }
            const T& operator()() const { return pctMod; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct ApPctMod
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "apPctMod";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T apPctMod;
            T& operator()() { return apPctMod; }
            const T& operator()() const { return apPctMod; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct SpellThreat: sqlpp::table_t<SpellThreat,
               SpellThreat_::Entry,
               SpellThreat_::FlatMod,
               SpellThreat_::PctMod,
               SpellThreat_::ApPctMod>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spell_threat";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spellThreat;
        T& operator()() { return spellThreat; }
        const T& operator()() const { return spellThreat; }
      };
    };
  };
  namespace SpelleffectDbc_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Effect
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Effect";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Effect;
            T& operator()() { return Effect; }
            const T& operator()() const { return Effect; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectValueMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectValueMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectValueMultiplier;
            T& operator()() { return EffectValueMultiplier; }
            const T& operator()() const { return EffectValueMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct EffectApplyAuraName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectApplyAuraName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectApplyAuraName;
            T& operator()() { return EffectApplyAuraName; }
            const T& operator()() const { return EffectApplyAuraName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectAmplitude
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectAmplitude";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectAmplitude;
            T& operator()() { return EffectAmplitude; }
            const T& operator()() const { return EffectAmplitude; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectBasePoints
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectBasePoints";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectBasePoints;
            T& operator()() { return EffectBasePoints; }
            const T& operator()() const { return EffectBasePoints; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EffectBonusMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectBonusMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectBonusMultiplier;
            T& operator()() { return EffectBonusMultiplier; }
            const T& operator()() const { return EffectBonusMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct EffectDamageMultiplier
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectDamageMultiplier";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectDamageMultiplier;
            T& operator()() { return EffectDamageMultiplier; }
            const T& operator()() const { return EffectDamageMultiplier; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct EffectChainTarget
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectChainTarget";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectChainTarget;
            T& operator()() { return EffectChainTarget; }
            const T& operator()() const { return EffectChainTarget; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectDieSides
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectDieSides";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectDieSides;
            T& operator()() { return EffectDieSides; }
            const T& operator()() const { return EffectDieSides; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EffectItemType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectItemType";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectItemType;
            T& operator()() { return EffectItemType; }
            const T& operator()() const { return EffectItemType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectMechanic
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectMechanic";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectMechanic;
            T& operator()() { return EffectMechanic; }
            const T& operator()() const { return EffectMechanic; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectMiscValue
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectMiscValue";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectMiscValue;
            T& operator()() { return EffectMiscValue; }
            const T& operator()() const { return EffectMiscValue; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EffectMiscValueB
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectMiscValueB";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectMiscValueB;
            T& operator()() { return EffectMiscValueB; }
            const T& operator()() const { return EffectMiscValueB; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct EffectRadiusIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectRadiusIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectRadiusIndex;
            T& operator()() { return EffectRadiusIndex; }
            const T& operator()() const { return EffectRadiusIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectRadiusIndexMax
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectRadiusIndexMax";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectRadiusIndexMax;
            T& operator()() { return EffectRadiusIndexMax; }
            const T& operator()() const { return EffectRadiusIndexMax; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectRealPointsPerLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectRealPointsPerLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectRealPointsPerLevel;
            T& operator()() { return EffectRealPointsPerLevel; }
            const T& operator()() const { return EffectRealPointsPerLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct EffectSpellClassMaskA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectSpellClassMaskA";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectSpellClassMaskA;
            T& operator()() { return EffectSpellClassMaskA; }
            const T& operator()() const { return EffectSpellClassMaskA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectSpellClassMaskB
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectSpellClassMaskB";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectSpellClassMaskB;
            T& operator()() { return EffectSpellClassMaskB; }
            const T& operator()() const { return EffectSpellClassMaskB; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectSpellClassMaskC
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectSpellClassMaskC";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectSpellClassMaskC;
            T& operator()() { return EffectSpellClassMaskC; }
            const T& operator()() const { return EffectSpellClassMaskC; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectTriggerSpell
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectTriggerSpell";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectTriggerSpell;
            T& operator()() { return EffectTriggerSpell; }
            const T& operator()() const { return EffectTriggerSpell; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectImplicitTargetA
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectImplicitTargetA";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectImplicitTargetA;
            T& operator()() { return EffectImplicitTargetA; }
            const T& operator()() const { return EffectImplicitTargetA; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectImplicitTargetB
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectImplicitTargetB";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectImplicitTargetB;
            T& operator()() { return EffectImplicitTargetB; }
            const T& operator()() const { return EffectImplicitTargetB; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct EffectSpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectSpellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectSpellId;
            T& operator()() { return EffectSpellId; }
            const T& operator()() const { return EffectSpellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct EffectIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "EffectIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T EffectIndex;
            T& operator()() { return EffectIndex; }
            const T& operator()() const { return EffectIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct SpelleffectDbc: sqlpp::table_t<SpelleffectDbc,
               SpelleffectDbc_::Id,
               SpelleffectDbc_::Effect,
               SpelleffectDbc_::EffectValueMultiplier,
               SpelleffectDbc_::EffectApplyAuraName,
               SpelleffectDbc_::EffectAmplitude,
               SpelleffectDbc_::EffectBasePoints,
               SpelleffectDbc_::EffectBonusMultiplier,
               SpelleffectDbc_::EffectDamageMultiplier,
               SpelleffectDbc_::EffectChainTarget,
               SpelleffectDbc_::EffectDieSides,
               SpelleffectDbc_::EffectItemType,
               SpelleffectDbc_::EffectMechanic,
               SpelleffectDbc_::EffectMiscValue,
               SpelleffectDbc_::EffectMiscValueB,
               SpelleffectDbc_::EffectRadiusIndex,
               SpelleffectDbc_::EffectRadiusIndexMax,
               SpelleffectDbc_::EffectRealPointsPerLevel,
               SpelleffectDbc_::EffectSpellClassMaskA,
               SpelleffectDbc_::EffectSpellClassMaskB,
               SpelleffectDbc_::EffectSpellClassMaskC,
               SpelleffectDbc_::EffectTriggerSpell,
               SpelleffectDbc_::EffectImplicitTargetA,
               SpelleffectDbc_::EffectImplicitTargetB,
               SpelleffectDbc_::EffectSpellId,
               SpelleffectDbc_::EffectIndex>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "spelleffect_dbc";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T spelleffectDbc;
        T& operator()() { return spelleffectDbc; }
        const T& operator()() const { return spelleffectDbc; }
      };
    };
  };
  namespace TerrainPhaseInfo_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Id;
            T& operator()() { return Id; }
            const T& operator()() const { return Id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct TerrainSwapMap
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TerrainSwapMap";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TerrainSwapMap;
            T& operator()() { return TerrainSwapMap; }
            const T& operator()() const { return TerrainSwapMap; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct TerrainPhaseInfo: sqlpp::table_t<TerrainPhaseInfo,
               TerrainPhaseInfo_::Id,
               TerrainPhaseInfo_::TerrainSwapMap,
               TerrainPhaseInfo_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "terrain_phase_info";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T terrainPhaseInfo;
        T& operator()() { return terrainPhaseInfo; }
        const T& operator()() const { return terrainPhaseInfo; }
      };
    };
  };
  namespace TerrainSwapDefaults_
  {
    struct MapId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "MapId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T MapId;
            T& operator()() { return MapId; }
            const T& operator()() const { return MapId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct TerrainSwapMap
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TerrainSwapMap";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TerrainSwapMap;
            T& operator()() { return TerrainSwapMap; }
            const T& operator()() const { return TerrainSwapMap; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct TerrainSwapDefaults: sqlpp::table_t<TerrainSwapDefaults,
               TerrainSwapDefaults_::MapId,
               TerrainSwapDefaults_::TerrainSwapMap,
               TerrainSwapDefaults_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "terrain_swap_defaults";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T terrainSwapDefaults;
        T& operator()() { return terrainSwapDefaults; }
        const T& operator()() const { return terrainSwapDefaults; }
      };
    };
  };
  namespace TerrainWorldmap_
  {
    struct TerrainSwapMap
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TerrainSwapMap";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TerrainSwapMap;
            T& operator()() { return TerrainSwapMap; }
            const T& operator()() const { return TerrainSwapMap; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct WorldMapArea
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "WorldMapArea";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T WorldMapArea;
            T& operator()() { return WorldMapArea; }
            const T& operator()() const { return WorldMapArea; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Comment;
            T& operator()() { return Comment; }
            const T& operator()() const { return Comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct TerrainWorldmap: sqlpp::table_t<TerrainWorldmap,
               TerrainWorldmap_::TerrainSwapMap,
               TerrainWorldmap_::WorldMapArea,
               TerrainWorldmap_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "terrain_worldmap";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T terrainWorldmap;
        T& operator()() { return terrainWorldmap; }
        const T& operator()() const { return terrainWorldmap; }
      };
    };
  };
  namespace Transports_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Phaseid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "phaseid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phaseid;
            T& operator()() { return phaseid; }
            const T& operator()() const { return phaseid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Phasegroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "phasegroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T phasegroup;
            T& operator()() { return phasegroup; }
            const T& operator()() const { return phasegroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ScriptName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ScriptName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ScriptName;
            T& operator()() { return ScriptName; }
            const T& operator()() const { return ScriptName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
  }

  struct Transports: sqlpp::table_t<Transports,
               Transports_::Guid,
               Transports_::Entry,
               Transports_::Name,
               Transports_::Phaseid,
               Transports_::Phasegroup,
               Transports_::ScriptName>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "transports";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T transports;
        T& operator()() { return transports; }
        const T& operator()() const { return transports; }
      };
    };
  };
  namespace TrinityString_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct ContentDefault
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_default";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentDefault;
            T& operator()() { return contentDefault; }
            const T& operator()() const { return contentDefault; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct ContentLoc1
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc1";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc1;
            T& operator()() { return contentLoc1; }
            const T& operator()() const { return contentLoc1; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc2;
            T& operator()() { return contentLoc2; }
            const T& operator()() const { return contentLoc2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc3;
            T& operator()() { return contentLoc3; }
            const T& operator()() const { return contentLoc3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc4
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc4";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc4;
            T& operator()() { return contentLoc4; }
            const T& operator()() const { return contentLoc4; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc5
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc5";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc5;
            T& operator()() { return contentLoc5; }
            const T& operator()() const { return contentLoc5; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc6
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc6";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc6;
            T& operator()() { return contentLoc6; }
            const T& operator()() const { return contentLoc6; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc7
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc7";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc7;
            T& operator()() { return contentLoc7; }
            const T& operator()() const { return contentLoc7; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct ContentLoc8
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "content_loc8";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T contentLoc8;
            T& operator()() { return contentLoc8; }
            const T& operator()() const { return contentLoc8; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct TrinityString: sqlpp::table_t<TrinityString,
               TrinityString_::Entry,
               TrinityString_::ContentDefault,
               TrinityString_::ContentLoc1,
               TrinityString_::ContentLoc2,
               TrinityString_::ContentLoc3,
               TrinityString_::ContentLoc4,
               TrinityString_::ContentLoc5,
               TrinityString_::ContentLoc6,
               TrinityString_::ContentLoc7,
               TrinityString_::ContentLoc8>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "trinity_string";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T trinityString;
        T& operator()() { return trinityString; }
        const T& operator()() const { return trinityString; }
      };
    };
  };
  namespace Updates_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct Updates: sqlpp::table_t<Updates,
               Updates_::Name,
               Updates_::Hash,
               Updates_::State,
               Updates_::Timestamp,
               Updates_::Speed>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updates;
        T& operator()() { return updates; }
        const T& operator()() const { return updates; }
      };
    };
  };
  namespace UpdatesInclude_
  {
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  }

  struct UpdatesInclude: sqlpp::table_t<UpdatesInclude,
               UpdatesInclude_::Path,
               UpdatesInclude_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates_include";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updatesInclude;
        T& operator()() { return updatesInclude; }
        const T& operator()() const { return updatesInclude; }
      };
    };
  };
  namespace VehicleAccessory_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
    struct AccessoryEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accessory_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accessoryEntry;
            T& operator()() { return accessoryEntry; }
            const T& operator()() const { return accessoryEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SeatId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "seat_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seatId;
            T& operator()() { return seatId; }
            const T& operator()() const { return seatId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Minion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "minion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minion;
            T& operator()() { return minion; }
            const T& operator()() const { return minion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Summontype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summontype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summontype;
            T& operator()() { return summontype; }
            const T& operator()() const { return summontype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Summontimer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summontimer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summontimer;
            T& operator()() { return summontimer; }
            const T& operator()() const { return summontimer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct VehicleAccessory: sqlpp::table_t<VehicleAccessory,
               VehicleAccessory_::Guid,
               VehicleAccessory_::AccessoryEntry,
               VehicleAccessory_::SeatId,
               VehicleAccessory_::Minion,
               VehicleAccessory_::Description,
               VehicleAccessory_::Summontype,
               VehicleAccessory_::Summontimer>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "vehicle_accessory";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T vehicleAccessory;
        T& operator()() { return vehicleAccessory; }
        const T& operator()() const { return vehicleAccessory; }
      };
    };
  };
  namespace VehicleTemplateAccessory_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct AccessoryEntry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accessory_entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accessoryEntry;
            T& operator()() { return accessoryEntry; }
            const T& operator()() const { return accessoryEntry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct SeatId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "seat_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T seatId;
            T& operator()() { return seatId; }
            const T& operator()() const { return seatId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Minion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "minion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T minion;
            T& operator()() { return minion; }
            const T& operator()() const { return minion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Description
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "description";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T description;
            T& operator()() { return description; }
            const T& operator()() const { return description; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
    struct Summontype
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summontype";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summontype;
            T& operator()() { return summontype; }
            const T& operator()() const { return summontype; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Summontimer
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "summontimer";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T summontimer;
            T& operator()() { return summontimer; }
            const T& operator()() const { return summontimer; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct VehicleTemplateAccessory: sqlpp::table_t<VehicleTemplateAccessory,
               VehicleTemplateAccessory_::Entry,
               VehicleTemplateAccessory_::AccessoryEntry,
               VehicleTemplateAccessory_::SeatId,
               VehicleTemplateAccessory_::Minion,
               VehicleTemplateAccessory_::Description,
               VehicleTemplateAccessory_::Summontype,
               VehicleTemplateAccessory_::Summontimer>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "vehicle_template_accessory";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T vehicleTemplateAccessory;
        T& operator()() { return vehicleTemplateAccessory; }
        const T& operator()() const { return vehicleTemplateAccessory; }
      };
    };
  };
  namespace Version_
  {
    struct CoreVersion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "core_version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T coreVersion;
            T& operator()() { return coreVersion; }
            const T& operator()() const { return coreVersion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct CoreRevision
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "core_revision";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T coreRevision;
            T& operator()() { return coreRevision; }
            const T& operator()() const { return coreRevision; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct DbVersion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "db_version";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dbVersion;
            T& operator()() { return dbVersion; }
            const T& operator()() const { return dbVersion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CacheId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "cache_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T cacheId;
            T& operator()() { return cacheId; }
            const T& operator()() const { return cacheId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::can_be_null>;
    };
  }

  struct Version: sqlpp::table_t<Version,
               Version_::CoreVersion,
               Version_::CoreRevision,
               Version_::DbVersion,
               Version_::CacheId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "version";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T version;
        T& operator()() { return version; }
        const T& operator()() const { return version; }
      };
    };
  };
  namespace WardenChecks_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Data
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "data";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T data;
            T& operator()() { return data; }
            const T& operator()() const { return data; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Str
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "str";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T str;
            T& operator()() { return str; }
            const T& operator()() const { return str; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Address
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "address";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T address;
            T& operator()() { return address; }
            const T& operator()() const { return address; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Length
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "length";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T length;
            T& operator()() { return length; }
            const T& operator()() const { return length; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Result
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "result";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T result;
            T& operator()() { return result; }
            const T& operator()() const { return result; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
  }

  struct WardenChecks: sqlpp::table_t<WardenChecks,
               WardenChecks_::Id,
               WardenChecks_::Type,
               WardenChecks_::Data,
               WardenChecks_::Str,
               WardenChecks_::Address,
               WardenChecks_::Length,
               WardenChecks_::Result,
               WardenChecks_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "warden_checks";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T wardenChecks;
        T& operator()() { return wardenChecks; }
        const T& operator()() const { return wardenChecks; }
      };
    };
  };
  namespace WaypointData_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Point
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "point";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T point;
            T& operator()() { return point; }
            const T& operator()() const { return point; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Orientation
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "orientation";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T orientation;
            T& operator()() { return orientation; }
            const T& operator()() const { return orientation; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct MoveType
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "move_type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T moveType;
            T& operator()() { return moveType; }
            const T& operator()() const { return moveType; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Action
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T action;
            T& operator()() { return action; }
            const T& operator()() const { return action; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct ActionChance
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "action_chance";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T actionChance;
            T& operator()() { return actionChance; }
            const T& operator()() const { return actionChance; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Wpguid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "wpguid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T wpguid;
            T& operator()() { return wpguid; }
            const T& operator()() const { return wpguid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned>;
    };
  }

  struct WaypointData: sqlpp::table_t<WaypointData,
               WaypointData_::Id,
               WaypointData_::Point,
               WaypointData_::PositionX,
               WaypointData_::PositionY,
               WaypointData_::PositionZ,
               WaypointData_::Orientation,
               WaypointData_::Delay,
               WaypointData_::MoveType,
               WaypointData_::Action,
               WaypointData_::ActionChance,
               WaypointData_::Wpguid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "waypoint_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T waypointData;
        T& operator()() { return waypointData; }
        const T& operator()() const { return waypointData; }
      };
    };
  };
  namespace WaypointScripts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Delay
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "delay";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T delay;
            T& operator()() { return delay; }
            const T& operator()() const { return delay; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Command
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "command";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T command;
            T& operator()() { return command; }
            const T& operator()() const { return command; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong;
            T& operator()() { return datalong; }
            const T& operator()() const { return datalong; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Datalong2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "datalong2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T datalong2;
            T& operator()() { return datalong2; }
            const T& operator()() const { return datalong2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Dataint
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "dataint";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T dataint;
            T& operator()() { return dataint; }
            const T& operator()() const { return dataint; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct X
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T x;
            T& operator()() { return x; }
            const T& operator()() const { return x; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Y
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T y;
            T& operator()() { return y; }
            const T& operator()() const { return y; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Z
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T z;
            T& operator()() { return z; }
            const T& operator()() const { return z; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct O
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "o";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T o;
            T& operator()() { return o; }
            const T& operator()() const { return o; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct WaypointScripts: sqlpp::table_t<WaypointScripts,
               WaypointScripts_::Id,
               WaypointScripts_::Delay,
               WaypointScripts_::Command,
               WaypointScripts_::Datalong,
               WaypointScripts_::Datalong2,
               WaypointScripts_::Dataint,
               WaypointScripts_::X,
               WaypointScripts_::Y,
               WaypointScripts_::Z,
               WaypointScripts_::O,
               WaypointScripts_::Guid>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "waypoint_scripts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T waypointScripts;
        T& operator()() { return waypointScripts; }
        const T& operator()() const { return waypointScripts; }
      };
    };
  };
  namespace Waypoints_
  {
    struct Entry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "entry";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T entry;
            T& operator()() { return entry; }
            const T& operator()() const { return entry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Pointid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "pointid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointid;
            T& operator()() { return pointid; }
            const T& operator()() const { return pointid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct PositionX
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_x";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionX;
            T& operator()() { return positionX; }
            const T& operator()() const { return positionX; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionY
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_y";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionY;
            T& operator()() { return positionY; }
            const T& operator()() const { return positionY; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PositionZ
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "position_z";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T positionZ;
            T& operator()() { return positionZ; }
            const T& operator()() const { return positionZ; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct PointComment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "point_comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T pointComment;
            T& operator()() { return pointComment; }
            const T& operator()() const { return pointComment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Waypoints: sqlpp::table_t<Waypoints,
               Waypoints_::Entry,
               Waypoints_::Pointid,
               Waypoints_::PositionX,
               Waypoints_::PositionY,
               Waypoints_::PositionZ,
               Waypoints_::PointComment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "waypoints";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T waypoints;
        T& operator()() { return waypoints; }
        const T& operator()() const { return waypoints; }
      };
    };
  };
}
#endif
