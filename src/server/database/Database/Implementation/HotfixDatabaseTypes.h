// generated by D:\Users\Shauren\Desktop\Sources\TrinityCore\dep\sqlpp11\scripts\ddl2cpp.py hotfix_data.sql HotfixDatabaseTypes hotfixdb
#ifndef HOTFIXDB_HOTFIXDATABASETYPES_H
#define HOTFIXDB_HOTFIXDATABASETYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace hotfixdb
{
  namespace HotfixData_
  {
    struct TableHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "TableHash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T TableHash;
            T& operator()() { return TableHash; }
            const T& operator()() const { return TableHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct RecordID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RecordID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RecordID;
            T& operator()() { return RecordID; }
            const T& operator()() const { return RecordID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Timestamp;
            T& operator()() { return Timestamp; }
            const T& operator()() const { return Timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Deleted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Deleted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Deleted;
            T& operator()() { return Deleted; }
            const T& operator()() const { return Deleted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct HotfixData: sqlpp::table_t<HotfixData,
               HotfixData_::TableHash,
               HotfixData_::RecordID,
               HotfixData_::Timestamp,
               HotfixData_::Deleted>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "hotfix_data";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T hotfixData;
        T& operator()() { return hotfixData; }
        const T& operator()() const { return hotfixData; }
      };
    };
  };
}
#endif
