// generated by D:\Users\Shauren\Desktop\Sources\TrinityCore\dep\sqlpp11\scripts\ddl2cpp.py auth_database.sql LoginDatabaseTypes authdb
#ifndef AUTHDB_LOGINDATABASETYPES_H
#define AUTHDB_LOGINDATABASETYPES_H

#include <sqlpp11/table.h>
#include <sqlpp11/data_types.h>
#include <sqlpp11/char_sequence.h>

namespace authdb
{
  namespace Account_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Username
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "username";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T username;
            T& operator()() { return username; }
            const T& operator()() const { return username; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct ShaPassHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sha_pass_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shaPassHash;
            T& operator()() { return shaPassHash; }
            const T& operator()() const { return shaPassHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Sessionkey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sessionkey";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T sessionkey;
            T& operator()() { return sessionkey; }
            const T& operator()() const { return sessionkey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct V
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "v";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T v;
            T& operator()() { return v; }
            const T& operator()() const { return v; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct S
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "s";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T s;
            T& operator()() { return s; }
            const T& operator()() const { return s; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct TokenKey
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "token_key";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T tokenKey;
            T& operator()() { return tokenKey; }
            const T& operator()() const { return tokenKey; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T email;
            T& operator()() { return email; }
            const T& operator()() const { return email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct RegMail
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "reg_mail";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T regMail;
            T& operator()() { return regMail; }
            const T& operator()() const { return regMail; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Joindate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "joindate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joindate;
            T& operator()() { return joindate; }
            const T& operator()() const { return joindate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LastIp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "last_ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastIp;
            T& operator()() { return lastIp; }
            const T& operator()() const { return lastIp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LastAttemptIp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "last_attempt_ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastAttemptIp;
            T& operator()() { return lastAttemptIp; }
            const T& operator()() const { return lastAttemptIp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct FailedLogins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "failed_logins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T failedLogins;
            T& operator()() { return failedLogins; }
            const T& operator()() const { return failedLogins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locked;
            T& operator()() { return locked; }
            const T& operator()() const { return locked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LockCountry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lock_country";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lockCountry;
            T& operator()() { return lockCountry; }
            const T& operator()() const { return lockCountry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LastLogin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "last_login";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLogin;
            T& operator()() { return lastLogin; }
            const T& operator()() const { return lastLogin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Online
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "online";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T online;
            T& operator()() { return online; }
            const T& operator()() const { return online; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Expansion
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "expansion";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T expansion;
            T& operator()() { return expansion; }
            const T& operator()() const { return expansion; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Mutetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutetime;
            T& operator()() { return mutetime; }
            const T& operator()() const { return mutetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint>;
    };
    struct Mutereason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutereason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutereason;
            T& operator()() { return mutereason; }
            const T& operator()() const { return mutereason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Muteby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "muteby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T muteby;
            T& operator()() { return muteby; }
            const T& operator()() const { return muteby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Os
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "os";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T os;
            T& operator()() { return os; }
            const T& operator()() const { return os; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Recruiter
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "recruiter";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T recruiter;
            T& operator()() { return recruiter; }
            const T& operator()() const { return recruiter; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct BattlenetAccount
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenet_account";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccount;
            T& operator()() { return battlenetAccount; }
            const T& operator()() const { return battlenetAccount; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct BattlenetIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenet_index";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetIndex;
            T& operator()() { return battlenetIndex; }
            const T& operator()() const { return battlenetIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
  }

  struct Account: sqlpp::table_t<Account,
               Account_::Id,
               Account_::Username,
               Account_::ShaPassHash,
               Account_::Sessionkey,
               Account_::V,
               Account_::S,
               Account_::TokenKey,
               Account_::Email,
               Account_::RegMail,
               Account_::Joindate,
               Account_::LastIp,
               Account_::LastAttemptIp,
               Account_::FailedLogins,
               Account_::Locked,
               Account_::LockCountry,
               Account_::LastLogin,
               Account_::Online,
               Account_::Expansion,
               Account_::Mutetime,
               Account_::Mutereason,
               Account_::Muteby,
               Account_::Locale,
               Account_::Os,
               Account_::Recruiter,
               Account_::BattlenetAccount,
               Account_::BattlenetIndex>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T account;
        T& operator()() { return account; }
        const T& operator()() const { return account; }
      };
    };
  };
  namespace AccountAccess_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Gmlevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "gmlevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gmlevel;
            T& operator()() { return gmlevel; }
            const T& operator()() const { return gmlevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct RealmID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "RealmID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T RealmID;
            T& operator()() { return RealmID; }
            const T& operator()() const { return RealmID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct AccountAccess: sqlpp::table_t<AccountAccess,
               AccountAccess_::Id,
               AccountAccess_::Gmlevel,
               AccountAccess_::RealmID>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_access";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountAccess;
        T& operator()() { return accountAccess; }
        const T& operator()() const { return accountAccess; }
      };
    };
  };
  namespace AccountBanned_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bandate;
            T& operator()() { return bandate; }
            const T& operator()() const { return bandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Unbandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unbandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unbandate;
            T& operator()() { return unbandate; }
            const T& operator()() const { return unbandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bannedby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bannedby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bannedby;
            T& operator()() { return bannedby; }
            const T& operator()() const { return bannedby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Banreason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "banreason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T banreason;
            T& operator()() { return banreason; }
            const T& operator()() const { return banreason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Active
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "active";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T active;
            T& operator()() { return active; }
            const T& operator()() const { return active; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct AccountBanned: sqlpp::table_t<AccountBanned,
               AccountBanned_::Id,
               AccountBanned_::Bandate,
               AccountBanned_::Unbandate,
               AccountBanned_::Bannedby,
               AccountBanned_::Banreason,
               AccountBanned_::Active>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_banned";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountBanned;
        T& operator()() { return accountBanned; }
        const T& operator()() const { return accountBanned; }
      };
    };
  };
  namespace AccountLastPlayedCharacter_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Region
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "region";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T region;
            T& operator()() { return region; }
            const T& operator()() const { return region; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Battlegroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlegroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlegroup;
            T& operator()() { return battlegroup; }
            const T& operator()() const { return battlegroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct RealmId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmId;
            T& operator()() { return realmId; }
            const T& operator()() const { return realmId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
    struct CharacterName
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "characterName";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T characterName;
            T& operator()() { return characterName; }
            const T& operator()() const { return characterName; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct CharacterGUID
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "characterGUID";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T characterGUID;
            T& operator()() { return characterGUID; }
            const T& operator()() const { return characterGUID; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct LastPlayedTime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lastPlayedTime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastPlayedTime;
            T& operator()() { return lastPlayedTime; }
            const T& operator()() const { return lastPlayedTime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::can_be_null>;
    };
  }

  struct AccountLastPlayedCharacter: sqlpp::table_t<AccountLastPlayedCharacter,
               AccountLastPlayedCharacter_::AccountId,
               AccountLastPlayedCharacter_::Region,
               AccountLastPlayedCharacter_::Battlegroup,
               AccountLastPlayedCharacter_::RealmId,
               AccountLastPlayedCharacter_::CharacterName,
               AccountLastPlayedCharacter_::CharacterGUID,
               AccountLastPlayedCharacter_::LastPlayedTime>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_last_played_character";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountLastPlayedCharacter;
        T& operator()() { return accountLastPlayedCharacter; }
        const T& operator()() const { return accountLastPlayedCharacter; }
      };
    };
  };
  namespace AccountMuted_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mutedate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutedate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutedate;
            T& operator()() { return mutedate; }
            const T& operator()() const { return mutedate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mutetime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutetime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutetime;
            T& operator()() { return mutetime; }
            const T& operator()() const { return mutetime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Mutedby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutedby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutedby;
            T& operator()() { return mutedby; }
            const T& operator()() const { return mutedby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Mutereason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mutereason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mutereason;
            T& operator()() { return mutereason; }
            const T& operator()() const { return mutereason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct AccountMuted: sqlpp::table_t<AccountMuted,
               AccountMuted_::Guid,
               AccountMuted_::Mutedate,
               AccountMuted_::Mutetime,
               AccountMuted_::Mutedby,
               AccountMuted_::Mutereason>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "account_muted";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T accountMuted;
        T& operator()() { return accountMuted; }
        const T& operator()() const { return accountMuted; }
      };
    };
  };
  namespace Autobroadcast_
  {
    struct Realmid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmid;
            T& operator()() { return realmid; }
            const T& operator()() const { return realmid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Weight
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "weight";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T weight;
            T& operator()() { return weight; }
            const T& operator()() const { return weight; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::can_be_null>;
    };
    struct Text
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "text";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T text;
            T& operator()() { return text; }
            const T& operator()() const { return text; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::require_insert>;
    };
  }

  struct Autobroadcast: sqlpp::table_t<Autobroadcast,
               Autobroadcast_::Realmid,
               Autobroadcast_::Id,
               Autobroadcast_::Weight,
               Autobroadcast_::Text>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "autobroadcast";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T autobroadcast;
        T& operator()() { return autobroadcast; }
        const T& operator()() const { return autobroadcast; }
      };
    };
  };
  namespace BattlePetSlots_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::require_insert>;
    };
    struct BattlenetAccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenetAccountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccountId;
            T& operator()() { return battlenetAccountId; }
            const T& operator()() const { return battlenetAccountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct BattlePetGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlePetGuid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlePetGuid;
            T& operator()() { return battlePetGuid; }
            const T& operator()() const { return battlePetGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct Locked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locked;
            T& operator()() { return locked; }
            const T& operator()() const { return locked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
  }

  struct BattlePetSlots: sqlpp::table_t<BattlePetSlots,
               BattlePetSlots_::Id,
               BattlePetSlots_::BattlenetAccountId,
               BattlePetSlots_::BattlePetGuid,
               BattlePetSlots_::Locked>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battle_pet_slots";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlePetSlots;
        T& operator()() { return battlePetSlots; }
        const T& operator()() const { return battlePetSlots; }
      };
    };
  };
  namespace BattlePets_
  {
    struct Guid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T guid;
            T& operator()() { return guid; }
            const T& operator()() const { return guid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint, sqlpp::tag::require_insert>;
    };
    struct BattlenetAccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenetAccountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccountId;
            T& operator()() { return battlenetAccountId; }
            const T& operator()() const { return battlenetAccountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Species
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "species";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T species;
            T& operator()() { return species; }
            const T& operator()() const { return species; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer, sqlpp::tag::require_insert>;
    };
    struct Breed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "breed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T breed;
            T& operator()() { return breed; }
            const T& operator()() const { return breed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint, sqlpp::tag::require_insert>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Exp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "exp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T exp;
            T& operator()() { return exp; }
            const T& operator()() const { return exp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Health
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "health";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T health;
            T& operator()() { return health; }
            const T& operator()() const { return health; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct Quality
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "quality";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T quality;
            T& operator()() { return quality; }
            const T& operator()() const { return quality; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct BattlePets: sqlpp::table_t<BattlePets,
               BattlePets_::Guid,
               BattlePets_::BattlenetAccountId,
               BattlePets_::Species,
               BattlePets_::Breed,
               BattlePets_::Level,
               BattlePets_::Exp,
               BattlePets_::Health,
               BattlePets_::Quality,
               BattlePets_::Flags,
               BattlePets_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battle_pets";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlePets;
        T& operator()() { return battlePets; }
        const T& operator()() const { return battlePets; }
      };
    };
  };
  namespace BattlenetAccountBans_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bandate;
            T& operator()() { return bandate; }
            const T& operator()() const { return bandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Unbandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unbandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unbandate;
            T& operator()() { return unbandate; }
            const T& operator()() const { return unbandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Bannedby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bannedby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bannedby;
            T& operator()() { return bannedby; }
            const T& operator()() const { return bannedby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Banreason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "banreason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T banreason;
            T& operator()() { return banreason; }
            const T& operator()() const { return banreason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct BattlenetAccountBans: sqlpp::table_t<BattlenetAccountBans,
               BattlenetAccountBans_::Id,
               BattlenetAccountBans_::Bandate,
               BattlenetAccountBans_::Unbandate,
               BattlenetAccountBans_::Bannedby,
               BattlenetAccountBans_::Banreason>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_account_bans";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetAccountBans;
        T& operator()() { return battlenetAccountBans; }
        const T& operator()() const { return battlenetAccountBans; }
      };
    };
  };
  namespace BattlenetAccountHeirlooms_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct BattlenetAccountHeirlooms: sqlpp::table_t<BattlenetAccountHeirlooms,
               BattlenetAccountHeirlooms_::AccountId,
               BattlenetAccountHeirlooms_::ItemId,
               BattlenetAccountHeirlooms_::Flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_account_heirlooms";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetAccountHeirlooms;
        T& operator()() { return battlenetAccountHeirlooms; }
        const T& operator()() const { return battlenetAccountHeirlooms; }
      };
    };
  };
  namespace BattlenetAccountMounts_
  {
    struct BattlenetAccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenetAccountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccountId;
            T& operator()() { return battlenetAccountId; }
            const T& operator()() const { return battlenetAccountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct MountSpellId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "mountSpellId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T mountSpellId;
            T& operator()() { return mountSpellId; }
            const T& operator()() const { return mountSpellId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Flags
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flags";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flags;
            T& operator()() { return flags; }
            const T& operator()() const { return flags; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct BattlenetAccountMounts: sqlpp::table_t<BattlenetAccountMounts,
               BattlenetAccountMounts_::BattlenetAccountId,
               BattlenetAccountMounts_::MountSpellId,
               BattlenetAccountMounts_::Flags>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_account_mounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetAccountMounts;
        T& operator()() { return battlenetAccountMounts; }
        const T& operator()() const { return battlenetAccountMounts; }
      };
    };
  };
  namespace BattlenetAccountToys_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct ItemId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "itemId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemId;
            T& operator()() { return itemId; }
            const T& operator()() const { return itemId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
    struct IsFavourite
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "isFavourite";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isFavourite;
            T& operator()() { return isFavourite; }
            const T& operator()() const { return isFavourite; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint, sqlpp::tag::can_be_null>;
    };
  }

  struct BattlenetAccountToys: sqlpp::table_t<BattlenetAccountToys,
               BattlenetAccountToys_::AccountId,
               BattlenetAccountToys_::ItemId,
               BattlenetAccountToys_::IsFavourite>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_account_toys";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetAccountToys;
        T& operator()() { return battlenetAccountToys; }
        const T& operator()() const { return battlenetAccountToys; }
      };
    };
  };
  namespace BattlenetAccounts_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Email
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "email";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T email;
            T& operator()() { return email; }
            const T& operator()() const { return email; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct ShaPassHash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "sha_pass_hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T shaPassHash;
            T& operator()() { return shaPassHash; }
            const T& operator()() const { return shaPassHash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Joindate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "joindate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T joindate;
            T& operator()() { return joindate; }
            const T& operator()() const { return joindate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct LastIp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "last_ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastIp;
            T& operator()() { return lastIp; }
            const T& operator()() const { return lastIp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct FailedLogins
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "failed_logins";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T failedLogins;
            T& operator()() { return failedLogins; }
            const T& operator()() const { return failedLogins; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Locked
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locked";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locked;
            T& operator()() { return locked; }
            const T& operator()() const { return locked; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct LockCountry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lock_country";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lockCountry;
            T& operator()() { return lockCountry; }
            const T& operator()() const { return lockCountry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LastLogin
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "last_login";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lastLogin;
            T& operator()() { return lastLogin; }
            const T& operator()() const { return lastLogin; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Online
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "online";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T online;
            T& operator()() { return online; }
            const T& operator()() const { return online; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Locale
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "locale";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T locale;
            T& operator()() { return locale; }
            const T& operator()() const { return locale; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Os
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "os";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T os;
            T& operator()() { return os; }
            const T& operator()() const { return os; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LastCharacterUndelete
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "LastCharacterUndelete";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T LastCharacterUndelete;
            T& operator()() { return LastCharacterUndelete; }
            const T& operator()() const { return LastCharacterUndelete; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct BattlenetAccounts: sqlpp::table_t<BattlenetAccounts,
               BattlenetAccounts_::Id,
               BattlenetAccounts_::Email,
               BattlenetAccounts_::ShaPassHash,
               BattlenetAccounts_::Joindate,
               BattlenetAccounts_::LastIp,
               BattlenetAccounts_::FailedLogins,
               BattlenetAccounts_::Locked,
               BattlenetAccounts_::LockCountry,
               BattlenetAccounts_::LastLogin,
               BattlenetAccounts_::Online,
               BattlenetAccounts_::Locale,
               BattlenetAccounts_::Os,
               BattlenetAccounts_::LastCharacterUndelete>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_accounts";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetAccounts;
        T& operator()() { return battlenetAccounts; }
        const T& operator()() const { return battlenetAccounts; }
      };
    };
  };
  namespace BattlenetItemAppearances_
  {
    struct BattlenetAccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenetAccountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccountId;
            T& operator()() { return battlenetAccountId; }
            const T& operator()() const { return battlenetAccountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct BlobIndex
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "blobIndex";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T blobIndex;
            T& operator()() { return blobIndex; }
            const T& operator()() const { return blobIndex; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned, sqlpp::tag::require_insert>;
    };
    struct AppearanceMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "appearanceMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T appearanceMask;
            T& operator()() { return appearanceMask; }
            const T& operator()() const { return appearanceMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct BattlenetItemAppearances: sqlpp::table_t<BattlenetItemAppearances,
               BattlenetItemAppearances_::BattlenetAccountId,
               BattlenetItemAppearances_::BlobIndex,
               BattlenetItemAppearances_::AppearanceMask>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_item_appearances";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetItemAppearances;
        T& operator()() { return battlenetItemAppearances; }
        const T& operator()() const { return battlenetItemAppearances; }
      };
    };
  };
  namespace BattlenetItemFavoriteAppearances_
  {
    struct BattlenetAccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "battlenetAccountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T battlenetAccountId;
            T& operator()() { return battlenetAccountId; }
            const T& operator()() const { return battlenetAccountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct ItemModifiedAppearanceId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "itemModifiedAppearanceId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T itemModifiedAppearanceId;
            T& operator()() { return itemModifiedAppearanceId; }
            const T& operator()() const { return itemModifiedAppearanceId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct BattlenetItemFavoriteAppearances: sqlpp::table_t<BattlenetItemFavoriteAppearances,
               BattlenetItemFavoriteAppearances_::BattlenetAccountId,
               BattlenetItemFavoriteAppearances_::ItemModifiedAppearanceId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "battlenet_item_favorite_appearances";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T battlenetItemFavoriteAppearances;
        T& operator()() { return battlenetItemFavoriteAppearances; }
        const T& operator()() const { return battlenetItemFavoriteAppearances; }
      };
    };
  };
  namespace Ip2Nation_
  {
    struct Ip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ip;
            T& operator()() { return ip; }
            const T& operator()() const { return ip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Country
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "country";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T country;
            T& operator()() { return country; }
            const T& operator()() const { return country; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_>;
    };
  }

  struct Ip2Nation: sqlpp::table_t<Ip2Nation,
               Ip2Nation_::Ip,
               Ip2Nation_::Country>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ip2nation";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ip2Nation;
        T& operator()() { return ip2Nation; }
        const T& operator()() const { return ip2Nation; }
      };
    };
  };
  namespace Ip2NationCountries_
  {
    struct Code
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "code";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T code;
            T& operator()() { return code; }
            const T& operator()() const { return code; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct IsoCode2
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "iso_code_2";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isoCode2;
            T& operator()() { return isoCode2; }
            const T& operator()() const { return isoCode2; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct IsoCode3
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "iso_code_3";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isoCode3;
            T& operator()() { return isoCode3; }
            const T& operator()() const { return isoCode3; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::can_be_null>;
    };
    struct IsoCountry
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "iso_country";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T isoCountry;
            T& operator()() { return isoCountry; }
            const T& operator()() const { return isoCountry; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Country
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "country";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T country;
            T& operator()() { return country; }
            const T& operator()() const { return country; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Lat
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lat";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lat;
            T& operator()() { return lat; }
            const T& operator()() const { return lat; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Lon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "lon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T lon;
            T& operator()() { return lon; }
            const T& operator()() const { return lon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
  }

  struct Ip2NationCountries: sqlpp::table_t<Ip2NationCountries,
               Ip2NationCountries_::Code,
               Ip2NationCountries_::IsoCode2,
               Ip2NationCountries_::IsoCode3,
               Ip2NationCountries_::IsoCountry,
               Ip2NationCountries_::Country,
               Ip2NationCountries_::Lat,
               Ip2NationCountries_::Lon>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ip2nationCountries";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ip2NationCountries;
        T& operator()() { return ip2NationCountries; }
        const T& operator()() const { return ip2NationCountries; }
      };
    };
  };
  namespace IpBanned_
  {
    struct Ip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ip;
            T& operator()() { return ip; }
            const T& operator()() const { return ip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Bandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bandate;
            T& operator()() { return bandate; }
            const T& operator()() const { return bandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Unbandate
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unbandate";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unbandate;
            T& operator()() { return unbandate; }
            const T& operator()() const { return unbandate; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Bannedby
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "bannedby";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T bannedby;
            T& operator()() { return bannedby; }
            const T& operator()() const { return bannedby; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Banreason
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "banreason";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T banreason;
            T& operator()() { return banreason; }
            const T& operator()() const { return banreason; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct IpBanned: sqlpp::table_t<IpBanned,
               IpBanned_::Ip,
               IpBanned_::Bandate,
               IpBanned_::Unbandate,
               IpBanned_::Bannedby,
               IpBanned_::Banreason>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "ip_banned";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T ipBanned;
        T& operator()() { return ipBanned; }
        const T& operator()() const { return ipBanned; }
      };
    };
  };
  namespace Logs_
  {
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Realm
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realm";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realm;
            T& operator()() { return realm; }
            const T& operator()() const { return realm; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Level
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "level";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T level;
            T& operator()() { return level; }
            const T& operator()() const { return level; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct String
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "string";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T string;
            T& operator()() { return string; }
            const T& operator()() const { return string; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct Logs: sqlpp::table_t<Logs,
               Logs_::Time,
               Logs_::Realm,
               Logs_::Type,
               Logs_::Level,
               Logs_::String>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "logs";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T logs;
        T& operator()() { return logs; }
        const T& operator()() const { return logs; }
      };
    };
  };
  namespace LogsIpActions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "account_id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct CharacterGuid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "character_guid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T characterGuid;
            T& operator()() { return characterGuid; }
            const T& operator()() const { return characterGuid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::bigint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Type
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "type";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T type;
            T& operator()() { return type; }
            const T& operator()() const { return type; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned, sqlpp::tag::require_insert>;
    };
    struct Ip
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "ip";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T ip;
            T& operator()() { return ip; }
            const T& operator()() const { return ip; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Systemnote
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "systemnote";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T systemnote;
            T& operator()() { return systemnote; }
            const T& operator()() const { return systemnote; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
    struct Unixtime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "unixtime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T unixtime;
            T& operator()() { return unixtime; }
            const T& operator()() const { return unixtime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Time
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "time";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T time;
            T& operator()() { return time; }
            const T& operator()() const { return time; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Comment
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "comment";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T comment;
            T& operator()() { return comment; }
            const T& operator()() const { return comment; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text, sqlpp::tag::can_be_null>;
    };
  }

  struct LogsIpActions: sqlpp::table_t<LogsIpActions,
               LogsIpActions_::Id,
               LogsIpActions_::AccountId,
               LogsIpActions_::CharacterGuid,
               LogsIpActions_::Type,
               LogsIpActions_::Ip,
               LogsIpActions_::Systemnote,
               LogsIpActions_::Unixtime,
               LogsIpActions_::Time,
               LogsIpActions_::Comment>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "logs_ip_actions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T logsIpActions;
        T& operator()() { return logsIpActions; }
        const T& operator()() const { return logsIpActions; }
      };
    };
  };
  namespace RbacAccountPermissions_
  {
    struct AccountId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "accountId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T accountId;
            T& operator()() { return accountId; }
            const T& operator()() const { return accountId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct PermissionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "permissionId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permissionId;
            T& operator()() { return permissionId; }
            const T& operator()() const { return permissionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Granted
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "granted";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T granted;
            T& operator()() { return granted; }
            const T& operator()() const { return granted; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint>;
    };
    struct RealmId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmId;
            T& operator()() { return realmId; }
            const T& operator()() const { return realmId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct RbacAccountPermissions: sqlpp::table_t<RbacAccountPermissions,
               RbacAccountPermissions_::AccountId,
               RbacAccountPermissions_::PermissionId,
               RbacAccountPermissions_::Granted,
               RbacAccountPermissions_::RealmId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "rbac_account_permissions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T rbacAccountPermissions;
        T& operator()() { return rbacAccountPermissions; }
        const T& operator()() const { return rbacAccountPermissions; }
      };
    };
  };
  namespace RbacDefaultPermissions_
  {
    struct SecId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "secId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T secId;
            T& operator()() { return secId; }
            const T& operator()() const { return secId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct PermissionId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "permissionId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T permissionId;
            T& operator()() { return permissionId; }
            const T& operator()() const { return permissionId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct RealmId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmId;
            T& operator()() { return realmId; }
            const T& operator()() const { return realmId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer>;
    };
  }

  struct RbacDefaultPermissions: sqlpp::table_t<RbacDefaultPermissions,
               RbacDefaultPermissions_::SecId,
               RbacDefaultPermissions_::PermissionId,
               RbacDefaultPermissions_::RealmId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "rbac_default_permissions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T rbacDefaultPermissions;
        T& operator()() { return rbacDefaultPermissions; }
        const T& operator()() const { return rbacDefaultPermissions; }
      };
    };
  };
  namespace RbacLinkedPermissions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct LinkedId
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "linkedId";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T linkedId;
            T& operator()() { return linkedId; }
            const T& operator()() const { return linkedId; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
  }

  struct RbacLinkedPermissions: sqlpp::table_t<RbacLinkedPermissions,
               RbacLinkedPermissions_::Id,
               RbacLinkedPermissions_::LinkedId>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "rbac_linked_permissions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T rbacLinkedPermissions;
        T& operator()() { return rbacLinkedPermissions; }
        const T& operator()() const { return rbacLinkedPermissions; }
      };
    };
  };
  namespace RbacPermissions_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
  }

  struct RbacPermissions: sqlpp::table_t<RbacPermissions,
               RbacPermissions_::Id,
               RbacPermissions_::Name>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "rbac_permissions";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T rbacPermissions;
        T& operator()() { return rbacPermissions; }
        const T& operator()() const { return rbacPermissions; }
      };
    };
  };
  namespace Realmcharacters_
  {
    struct Realmid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmid;
            T& operator()() { return realmid; }
            const T& operator()() const { return realmid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Acctid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "acctid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T acctid;
            T& operator()() { return acctid; }
            const T& operator()() const { return acctid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Numchars
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "numchars";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T numchars;
            T& operator()() { return numchars; }
            const T& operator()() const { return numchars; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct Realmcharacters: sqlpp::table_t<Realmcharacters,
               Realmcharacters_::Realmid,
               Realmcharacters_::Acctid,
               Realmcharacters_::Numchars>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "realmcharacters";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T realmcharacters;
        T& operator()() { return realmcharacters; }
        const T& operator()() const { return realmcharacters; }
      };
    };
  };
  namespace Realmlist_
  {
    struct Id
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "id";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T id;
            T& operator()() { return id; }
            const T& operator()() const { return id; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::must_not_insert, sqlpp::tag::must_not_update>;
    };
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Address
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "address";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T address;
            T& operator()() { return address; }
            const T& operator()() const { return address; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LocalAddress
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "localAddress";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T localAddress;
            T& operator()() { return localAddress; }
            const T& operator()() const { return localAddress; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct LocalSubnetMask
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "localSubnetMask";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T localSubnetMask;
            T& operator()() { return localSubnetMask; }
            const T& operator()() const { return localSubnetMask; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
    struct Port
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "port";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T port;
            T& operator()() { return port; }
            const T& operator()() const { return port; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Icon
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "icon";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T icon;
            T& operator()() { return icon; }
            const T& operator()() const { return icon; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Flag
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "flag";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T flag;
            T& operator()() { return flag; }
            const T& operator()() const { return flag; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Timezone
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "timezone";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timezone;
            T& operator()() { return timezone; }
            const T& operator()() const { return timezone; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct AllowedSecurityLevel
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "allowedSecurityLevel";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T allowedSecurityLevel;
            T& operator()() { return allowedSecurityLevel; }
            const T& operator()() const { return allowedSecurityLevel; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Population
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "population";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T population;
            T& operator()() { return population; }
            const T& operator()() const { return population; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::floating_point>;
    };
    struct Gamebuild
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "gamebuild";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T gamebuild;
            T& operator()() { return gamebuild; }
            const T& operator()() const { return gamebuild; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Region
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Region";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Region;
            T& operator()() { return Region; }
            const T& operator()() const { return Region; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
    struct Battlegroup
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "Battlegroup";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T Battlegroup;
            T& operator()() { return Battlegroup; }
            const T& operator()() const { return Battlegroup; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::tinyint_unsigned>;
    };
  }

  struct Realmlist: sqlpp::table_t<Realmlist,
               Realmlist_::Id,
               Realmlist_::Name,
               Realmlist_::Address,
               Realmlist_::LocalAddress,
               Realmlist_::LocalSubnetMask,
               Realmlist_::Port,
               Realmlist_::Icon,
               Realmlist_::Flag,
               Realmlist_::Timezone,
               Realmlist_::AllowedSecurityLevel,
               Realmlist_::Population,
               Realmlist_::Gamebuild,
               Realmlist_::Region,
               Realmlist_::Battlegroup>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "realmlist";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T realmlist;
        T& operator()() { return realmlist; }
        const T& operator()() const { return realmlist; }
      };
    };
  };
  namespace Updates_
  {
    struct Name
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "name";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T name;
            T& operator()() { return name; }
            const T& operator()() const { return name; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct Hash
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "hash";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T hash;
            T& operator()() { return hash; }
            const T& operator()() const { return hash; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::char_, sqlpp::tag::can_be_null>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
    struct Timestamp
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "timestamp";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T timestamp;
            T& operator()() { return timestamp; }
            const T& operator()() const { return timestamp; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Speed
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "speed";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T speed;
            T& operator()() { return speed; }
            const T& operator()() const { return speed; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
  }

  struct Updates: sqlpp::table_t<Updates,
               Updates_::Name,
               Updates_::Hash,
               Updates_::State,
               Updates_::Timestamp,
               Updates_::Speed>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updates;
        T& operator()() { return updates; }
        const T& operator()() const { return updates; }
      };
    };
  };
  namespace UpdatesInclude_
  {
    struct Path
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "path";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T path;
            T& operator()() { return path; }
            const T& operator()() const { return path; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar, sqlpp::tag::require_insert>;
    };
    struct State
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "state";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T state;
            T& operator()() { return state; }
            const T& operator()() const { return state; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::text>;
    };
  }

  struct UpdatesInclude: sqlpp::table_t<UpdatesInclude,
               UpdatesInclude_::Path,
               UpdatesInclude_::State>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "updates_include";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T updatesInclude;
        T& operator()() { return updatesInclude; }
        const T& operator()() const { return updatesInclude; }
      };
    };
  };
  namespace Uptime_
  {
    struct Realmid
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "realmid";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T realmid;
            T& operator()() { return realmid; }
            const T& operator()() const { return realmid; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned, sqlpp::tag::require_insert>;
    };
    struct Starttime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "starttime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T starttime;
            T& operator()() { return starttime; }
            const T& operator()() const { return starttime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Uptime
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "uptime";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T uptime;
            T& operator()() { return uptime; }
            const T& operator()() const { return uptime; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::integer_unsigned>;
    };
    struct Maxplayers
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "maxplayers";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T maxplayers;
            T& operator()() { return maxplayers; }
            const T& operator()() const { return maxplayers; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::smallint_unsigned>;
    };
    struct Revision
    {
      struct _alias_t
      {
        static constexpr const char _literal[] = "revision";
        using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
        template<typename T>
        struct _member_t
          {
            T revision;
            T& operator()() { return revision; }
            const T& operator()() const { return revision; }
          };
      };
      using _traits = sqlpp::make_traits<sqlpp::varchar>;
    };
  }

  struct Uptime: sqlpp::table_t<Uptime,
               Uptime_::Realmid,
               Uptime_::Starttime,
               Uptime_::Uptime,
               Uptime_::Maxplayers,
               Uptime_::Revision>
  {
    struct _alias_t
    {
      static constexpr const char _literal[] =  "uptime";
      using _name_t = sqlpp::make_char_sequence<sizeof(_literal), _literal>;
      template<typename T>
      struct _member_t
      {
        T uptime;
        T& operator()() { return uptime; }
        const T& operator()() const { return uptime; }
      };
    };
  };
}
#endif
